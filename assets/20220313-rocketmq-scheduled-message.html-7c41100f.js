import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as i,a as n,b as s,d as a,w as t,e as o}from"./app-eaa093f0.js";const k={},d={href:"http://hscarb.github.io/rocketmq/20220313-rocketmq-scheduled-message.html",target:"_blank",rel:"noopener noreferrer"},r=n("h1",{id:"rocketmq-延迟消息-定时消息-源码解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rocketmq-延迟消息-定时消息-源码解析","aria-hidden":"true"},"#"),s(" RocketMQ 延迟消息（定时消息）源码解析")],-1),m={class:"table-of-contents"},v=o(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><h3 id="_1-1-定时消息概念" tabindex="-1"><a class="header-anchor" href="#_1-1-定时消息概念" aria-hidden="true">#</a> 1.1 定时消息概念</h3><p>定时消息指发送一条消息，消费者不立即能够消费，而是需要在指定时间进行消费</p><ul><li>生产者在发送消息时为消息指定发送时间，或者延迟时间</li><li>定时消息指消息发送后，不能立即被消费者消费</li><li>当到达指定的发送时间或者延迟相应时间后，消费者才可消费</li></ul><h3 id="_1-2-rocketmq中的定时消息支持" tabindex="-1"><a class="header-anchor" href="#_1-2-rocketmq中的定时消息支持" aria-hidden="true">#</a> 1.2 RocketMQ中的定时消息支持</h3><p>截至目前版本，RocketMQ 不支持任意时间的定时消息，而是提供了18个延迟等级。发送消息时可以从18个延迟等级中选一个，然后这条消息会延迟相应的时间发送。</p><p>默认支持的延迟等级为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可在 Broker 端通过 <code>messageDelayLevel</code> 参数进行配置</p><p>需要注意的是 RocketMQ 的定时消息受到 CommitLog 保存时间的限制。也就是说如果 CommitLog 最长保存3天，那么延迟时间最长为3天。</p><h2 id="_2-概要流程" tabindex="-1"><a class="header-anchor" href="#_2-概要流程" aria-hidden="true">#</a> 2. 概要流程</h2><p>下面讲一下RocketMQ中发送定时消息，Broker处理再到消息被消费的流程</p><ul><li>生产者 <ol><li>生产者发送消息时，用户需在消息属性中设置延迟等级</li></ol></li><li>Broker <ol><li><p>Broker 初始化时会创建一个 Topic，专门存放延迟消息。该 Topic 默认有18（延迟等级个数）个 Queue</p></li><li><p>Broker 启动时，为每个延迟等级都创建一个处理线程。该线程扫描对应的延迟等级 Queue。</p></li><li><p>Broker 收到消息后，查看属性中是否有延迟等级信息。如果有，则将该消息的 Topic 和 QueueId 分别替换成延迟消息对应的 Topic 和延迟等级对应的 QueueId。</p><p>然后将消息真正的 Topic 和 QueueId 放到消息的 properties 属性中</p><p>最后将消息保存到磁盘。</p></li><li><p>延迟消息保存后，会在在其 ConsumeQueue 生成索引（上面说过，每个延迟等级都有一个 Queue）</p></li><li><p>延迟等级处理线程周期性扫描对应的延迟等级 ConsumeQueue 中是否有到期的消息，如果有则将消息真正的 Topic 和 QueueId 恢复，然后重新投递，如果没有则继续循环扫描</p></li></ol></li><li>消费者 <ol><li>当延迟消息被延迟等级处理线程重新投递之后，消费者可以消费到该消息</li></ol></li></ul><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778325.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-详细流程" tabindex="-1"><a class="header-anchor" href="#_3-详细流程" aria-hidden="true">#</a> 3. 详细流程</h2><p>延迟消息在 Producer 端只需要在消息上额外设置延迟等级即可，所以这里只讨论 Broker 端的流程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在Producer端设置消息为定时消息</span>
<span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">&quot;TopicA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">&quot;Tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;this is a delay message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置延迟level为5，对应延迟1分钟</span>
msg<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-1-定时消息涉及到的类" tabindex="-1"><a class="header-anchor" href="#_3-1-定时消息涉及到的类" aria-hidden="true">#</a> 3.1 定时消息涉及到的类</h3><p>我们先来看一下定时消息涉及到的类分别实现了什么功能</p><ul><li><code>SCHEDULE_TOPIC_XXXX</code>：这是一个 RocketMQ 系统 Topic，在 Broker 启动时会自动创建，专门用来保存还没有到投递时间的定时消息。系统级别的 Topic 无法被消费者消费，所以在被重新投递之前，消费者无法消费到未到期的定时消息。 <ul><li>它默认有 18 个 Queue，对应18个延迟等级。每个 Queue 都保存所有对应延迟等级的定时消息。</li><li>这么设计的原因：延迟消息每个消息的投递时间不确定，Broker 端需要将消息根据投递时间排序后投递。只支持指定时间延迟，并为每个延迟等级设计单独的 Queue 就是为了解决消息排序的问题。这样一来，每个 Queue 中的消息都是按照消息产生的时间顺序发送的。</li></ul></li><li><strong>CommitLog</strong>：RocketMQ 消息存储的实现，在定时消息功能中，它主要负责在保存消息时将原消息的 Topic 和 QueueId 替换成定时消息对应的 Topic 和 QueueId。</li><li><strong>ConsumeQueue</strong>：RocketMQ 的消费队列，用于消费者消费消息。每个队列元素是一个消息的索引，该索引主要包含消息在 CommitLog 中的偏移量。 <ul><li>消费者消费时查询 ConsumeQueue，一旦发现新的索引项，就可以用该项中的偏移量从 CommitLog 中找到消息并消费。</li></ul></li><li><strong>ScheduleMessageService</strong>：实现定时消息延迟投递的主要逻辑。为每个延迟等级的 Queue 创建一个线程，该线程循环扫描对应的 Queue，如果发现到投递时间的消息，则把消息的 Topic 和 QueueId 恢复，然后重新投递到 CommitLog 中。</li></ul><h3 id="_3-2-定时消息时序图" tabindex="-1"><a class="header-anchor" href="#_3-2-定时消息时序图" aria-hidden="true">#</a> 3.2 定时消息时序图</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778344.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>DefaultMessageStore 调用 putMessage 方法保存消息，内部调用 CommitLog 保存消息</li><li>CommitLog 保存消息时检查是否是延迟消息（是否有 DelayLevel 属性） <ul><li>如果是，则修改消息的</li></ul></li></ol><h3 id="_3-3-每个类关于定时消息的具体逻辑" tabindex="-1"><a class="header-anchor" href="#_3-3-每个类关于定时消息的具体逻辑" aria-hidden="true">#</a> 3.3 每个类关于定时消息的具体逻辑</h3><h4 id="_3-3-1-commitlog" tabindex="-1"><a class="header-anchor" href="#_3-3-1-commitlog" aria-hidden="true">#</a> 3.3.1 CommitLog</h4><ul><li><code>putMessage() / AsyncPutMessage()</code>：同步和异步的消息存储函数，Broker 收到消息后存储消息时调用。 <ul><li>在存盘之前，中检查消息属性中<code>delayLevel &gt; 0</code>来判断是否是定时消息</li><li>如果是定时消息，将原消息的 Topic 和 QueueId 替换成定时消息对应的 Topic 和 QueueId；然后将消息真正的 Topic 和 QueueId 存放到消息 <code>properties</code>属性中</li><li>将消息存储。之后会根据存储的消息构建消息的索引文件 ConsumeQueue 和 IndexFile</li><li>重投递时，会计算出消息的真正投递时间，保存到 ConsumeQueue 索引的 <code>tagsCode</code> 位置。</li></ul></li></ul><h4 id="_3-3-2-schedulemessageservice" tabindex="-1"><a class="header-anchor" href="#_3-3-2-schedulemessageservice" aria-hidden="true">#</a> 3.3.2 ScheduleMessageService</h4><p>这个类扩展了 <code>ConfigManager</code>，<code>ConfigManager</code> 提供了管理一个配置文件的功能，包含配置文件持久化的函数和重新加载配置文件到内存的函数。</p>`,29),f=o("<li><code>ConcurrentMap&lt;Integer /* level */, Long/* offset */&gt; offsetTable</code>：每个延迟等级扫描的逻辑 offset，会被作为配置文件保存，在启动时从磁盘中加载。</li><li><code>start()</code>：Broker 不为 <code>SLAVE</code> 时，在 Broker 启动时运行。 <ol><li>从磁盘中加载<code>offsetTable</code></li><li>为每个延迟等级创建一个<code>DeliverDelayedMessageTimerTask</code>，用于周期性扫描延迟等级的消息，将到期的消息重新投递</li><li>创建一个周期性定时任务，定时将<code>offsetTable</code>持久化</li></ol></li>",2),g=n("code",null,"Timer timer",-1),b=n("code",null,"Timer",-1),h={href:"https://github.com/apache/rocketmq/pull/3287",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"ScheduledExecutorService",-1),_=o(`<h4 id="_3-3-3-deliverdelayedmessagetimertask" tabindex="-1"><a class="header-anchor" href="#_3-3-3-deliverdelayedmessagetimertask" aria-hidden="true">#</a> 3.3.3 DeliverDelayedMessageTimerTask</h4><p><code>ScheduleMessageService</code>的内部类，扩展了 <code>TimerTask</code>，用以被 <code>Timer</code> 定时调用。（后改成 Runnable，用以被<code>ScheduledExecutorService</code>定时调用）</p><p>每个该类对应一个延迟等级的 Queue，负责周期性扫描该 Queue 中是否有到期消息，如果有则将到期消息都投递到 CommitLog，如果没有则等待 0.1s 继续下次扫描。</p><ul><li><code>run()</code>：执行入口，这里没有用 while 循环或者是周期性定时任务来周期执行，而是每次 <code>run()</code> 里面都会执行一个新的定时任务（<code>DeliverDelayedMessageTimerTask</code>），以此来达到周期性执行该任务的效果。</li><li><code>executeOnTimeup()</code>：扫描消息并且检查是否到投递时间的主要逻辑都在这个函数里面，由<code>run()</code>调用</li></ul><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-commitlog" tabindex="-1"><a class="header-anchor" href="#_4-1-commitlog" aria-hidden="true">#</a> 4.1 CommitLog</h3><ul><li><strong>asyncPutMessage：消息异步保存</strong><ul><li>在存盘之前，中检查消息属性中<code>delayLevel &gt; 0</code>来判断是否是定时消息</li><li>如果是定时消息，将原消息的 Topic 和 QueueId 替换成定时消息对应的 Topic 和 QueueId；然后将消息真正的 Topic 和 QueueId 存放到消息 <code>properties</code>属性中</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncPutMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageExtBrokerInner</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token class-name">String</span> topic <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> queueId <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token keyword">int</span> tranType <span class="token operator">=</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token function">getTransactionValue</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tranType <span class="token operator">==</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_NOT_TYPE</span> <span class="token operator">||</span> tranType <span class="token operator">==</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_COMMIT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Delay Delivery</span>
				<span class="token comment">// 判断是否是定时消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getDelayTimeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getDelayTimeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getScheduleMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxDelayLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                msg<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getScheduleMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxDelayLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
						<span class="token comment">// 替换消息的Topic和QueueId为定时消息Topic和延迟等级对应的QueueId</span>
            topic <span class="token operator">=</span> <span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">RMQ_SYS_SCHEDULE_TOPIC</span><span class="token punctuation">;</span>
            queueId <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token function">delayLevel2QueueId</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getDelayTimeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Backup real topic, queueId</span>
						<span class="token comment">// 把真正的 Topic 和 QueueId 放到消息属性中</span>
            <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_REAL_TOPIC</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_REAL_QUEUE_ID</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msg<span class="token punctuation">.</span><span class="token function">setPropertiesString</span><span class="token punctuation">(</span><span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">messageProperties2String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            msg<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
		<span class="token comment">// ...消息存储逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步保存消息的方法即是异步方法调用<code>get()</code>，不再赘述</p><h3 id="_4-2-schedulemessageservice" tabindex="-1"><a class="header-anchor" href="#_4-2-schedulemessageservice" aria-hidden="true">#</a> 4.2 ScheduleMessageService</h3><ul><li><strong>start：延迟消息服务启动</strong><ol><li>从磁盘中加载<code>offsetTable</code></li><li>为每个延迟等级创建一个<code>DeliverDelayedMessageTimerTask</code>，用于周期性扫描延迟等级的消息，将到期的消息重新投递</li><li>创建一个周期性定时任务，定时将<code>offsetTable</code>持久化</li></ol></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>started<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduleMessageTimerThread&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delayLevelTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> level <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> timeDelay <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                offset <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeDelay <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeliverDelayedMessageTimerTask</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">FIRST_DELAY_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>started<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;scheduleAtFixedRate flush exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushDelayOffsetInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-1-deliverdelayedmessagetimertask" tabindex="-1"><a class="header-anchor" href="#_4-2-1-deliverdelayedmessagetimertask" aria-hidden="true">#</a> 4.2.1 DeliverDelayedMessageTimerTask</h4><ul><li><strong>executeOnTimeup：延迟到期执行</strong><ol><li>先获延迟等级取对应的 ConsumeQueue，然后根据 <code>offsetTable</code> 中获取的延迟等级对应的 offset（记录这个队列扫描的偏移量）开始扫描后面的消息</li><li>从 ConsumeQueue 获取 tagsCode，这里面存的是真正投递时间，跟现在的时间戳比较，来判断该消息是否要投递 <ul><li>如果现在已经到了投递时间点，投递消息</li><li>如果现在还没到投递时间点，继续创建一个定时任务，countdown 秒之后执行，然后 return</li></ul></li><li>等待 0.1s，执行一个新的 <code>DeliverDelayedMessageTimerTask</code></li></ol></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeOnTimeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据delayLevel查找对应的延迟消息ConsumeQueue</span>
    <span class="token class-name">ConsumeQueue</span> cq <span class="token operator">=</span>
        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">findConsumeQueue</span><span class="token punctuation">(</span><span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">RMQ_SYS_SCHEDULE_TOPIC</span><span class="token punctuation">,</span>
            <span class="token function">delayLevel2QueueId</span><span class="token punctuation">(</span>delayLevel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> failScheduleOffset <span class="token operator">=</span> offset<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cq <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据ConsumeQueue的有效延迟消息逻辑offset，获取所有有效的消息</span>
        <span class="token class-name">SelectMappedBufferResult</span> bufferCQ <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getIndexBuffer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferCQ <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> nextOffset <span class="token operator">=</span> offset<span class="token punctuation">;</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span> cqExtUnit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 遍历ConsumeQueue中的所有有效消息</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 获取ConsumeQueue索引的三个关键属性</span>
                    <span class="token keyword">long</span> offsetPy <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> sizePy <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">long</span> tagsCode <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span><span class="token function">isExtAddr</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span><span class="token function">getExt</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">,</span> cqExtUnit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            tagsCode <span class="token operator">=</span> cqExtUnit<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token comment">//can&#39;t find ext content.So re compute tags code.</span>
                            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG] can&#39;t find consume queue extend file content!addr={}, offsetPy={}, sizePy={}&quot;</span><span class="token punctuation">,</span>
                                tagsCode<span class="token punctuation">,</span> offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">long</span> msgStoreTime <span class="token operator">=</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pickupStoreTimestamp</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            tagsCode <span class="token operator">=</span> <span class="token function">computeDeliverTimestamp</span><span class="token punctuation">(</span>delayLevel<span class="token punctuation">,</span> msgStoreTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// ConsumeQueue里面的tagsCode实际是一个时间点（投递时间点）</span>
                    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">long</span> deliverTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">correctDeliverTimestamp</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> tagsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    nextOffset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">long</span> countdown <span class="token operator">=</span> deliverTimestamp <span class="token operator">-</span> now<span class="token punctuation">;</span>

                    <span class="token comment">// 如果现在已经到了投递时间点，投递消息</span>
                    <span class="token comment">// 如果现在还没到投递时间点，继续创建一个定时任务，countdown秒之后执行</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>countdown <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">MessageExt</span> msgExt <span class="token operator">=</span>
                            <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">lookMessageByOffset</span><span class="token punctuation">(</span>
                                offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgExt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                <span class="token class-name">MessageExtBrokerInner</span> msgInner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messageTimeup</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">RMQ_SYS_TRANS_HALF_TOPIC</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG] the real topic of schedule msg is {}, discard the msg. msg={}&quot;</span><span class="token punctuation">,</span>
                                            msgInner<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                <span class="token comment">// 重新投递消息到CommitLog</span>
                                <span class="token class-name">PutMessageResult</span> putMessageResult <span class="token operator">=</span>
                                    <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>writeMessageStore
                                        <span class="token punctuation">.</span><span class="token function">putMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">// 投递成功</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>putMessageResult <span class="token operator">!=</span> <span class="token keyword">null</span>
                                    <span class="token operator">&amp;&amp;</span> putMessageResult<span class="token punctuation">.</span><span class="token function">getPutMessageStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">PUT_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                                <span class="token comment">// 投递失败</span>
                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                    <span class="token comment">// XXX: warn and notify me</span>
                                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                                        <span class="token string">&quot;ScheduleMessageService, a message time up, but reput it failed, topic: {} msgId {}&quot;</span><span class="token punctuation">,</span>
                                        msgExt<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgExt<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>
                                        <span class="token keyword">new</span> <span class="token class-name">DeliverDelayedMessageTimerTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span>
                                            nextOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_PERIOD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span>
                                        nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">/*
                                 * XXX: warn and notify me
                                 * msgExt里面的内容不完整
                                 * ，如没有REAL_QID,REAL_TOPIC之类的
                                 * ，导致数据无法正常的投递到正确的消费队列，所以暂时先直接跳过该条消息
                                 */</span>
                                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                                    <span class="token string">&quot;ScheduleMessageService, messageTimeup execute error, drop it. msgExt=&quot;</span>
                                        <span class="token operator">+</span> msgExt <span class="token operator">+</span> <span class="token string">&quot;, nextOffset=&quot;</span> <span class="token operator">+</span> nextOffset <span class="token operator">+</span> <span class="token string">&quot;,offsetPy=&quot;</span>
                                        <span class="token operator">+</span> offsetPy <span class="token operator">+</span> <span class="token string">&quot;,sizePy=&quot;</span> <span class="token operator">+</span> sizePy<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 该条ConsumeQueue索引对应的消息如果未到投递时间，那么创建一个定时任务，到投递时间时执行</span>
                        <span class="token comment">// 如果有还未投递的消息，创建定时任务后直接返回</span>
                        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>
                            <span class="token keyword">new</span> <span class="token class-name">DeliverDelayedMessageTimerTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">,</span>
                            countdown<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token comment">// end of for</span>

                <span class="token comment">// 如果所有消息都已经被投递，那么等待0.1s后重新执行该检查任务</span>
                nextOffset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeliverDelayedMessageTimerTask</span><span class="token punctuation">(</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>

                bufferCQ<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token comment">// end of if (bufferCQ != null)</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">/*
             * 索引文件被删除，定时任务中记录的offset已经被删除，会导致从该位置中取不到数据，
             * 这里直接纠正下一次定时任务的offset为当前定时任务队列的最小值
             */</span>
            <span class="token keyword">long</span> cqMinOffset <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getMinOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> cqMinOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                failScheduleOffset <span class="token operator">=</span> cqMinOffset<span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;schedule CQ offset invalid. offset=&quot;</span> <span class="token operator">+</span> offset <span class="token operator">+</span> <span class="token string">&quot;, cqMinOffset=&quot;</span>
                    <span class="token operator">+</span> cqMinOffset <span class="token operator">+</span> <span class="token string">&quot;, queueId=&quot;</span> <span class="token operator">+</span> cq<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token comment">// end of if (cq != null)</span>

    <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeliverDelayedMessageTimerTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span>
        failScheduleOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-更多思考" tabindex="-1"><a class="header-anchor" href="#_5-更多思考" aria-hidden="true">#</a> 5. 更多思考</h2><h3 id="_5-1-为什么不实现任意时间的定时消息" tabindex="-1"><a class="header-anchor" href="#_5-1-为什么不实现任意时间的定时消息" aria-hidden="true">#</a> 5.1 为什么不实现任意时间的定时消息？</h3><ol><li>实现有一定难度 <ul><li>受到 CommitLog 保存时间限制：现在的延迟消息机制基于 CommitLog，消息到期之后会从 CommitLog 把定时消息查出来重新投递，如果 CommitLog 被删除，那么无法重新投递。</li></ul></li><li>不愿意开源 <ul><li>为了提供差异化服务（云服务竞争力体现）</li></ul></li></ol><h3 id="_5-2-任意时间定时消息实现" tabindex="-1"><a class="header-anchor" href="#_5-2-任意时间定时消息实现" aria-hidden="true">#</a> 5.2 任意时间定时消息实现？</h3><p>社区有一个PR，可以实现在 CommitLog 保存时间之内任意时间的延迟消息实现。其实现了一个新的定时消息 Index 文件，用来根据投递时间查询该时间需要投递的消息，解决了定时消息排序的问题。</p>`,20),w={href:"https://github.com/apache/rocketmq/pull/2290",target:"_blank",rel:"noopener noreferrer"},T=n("hr",null,null,-1),M=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),S=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function C(x,Q){const p=c("ExternalLinkIcon"),e=c("router-link");return u(),i("div",null,[n("p",null,[s("原文地址："),n("a",d,[s("http://hscarb.github.io/rocketmq/20220313-rocketmq-scheduled-message.html"),a(p)])]),r,n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#_1-概述"},{default:t(()=>[s("1. 概述")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-1-定时消息概念"},{default:t(()=>[s("1.1 定时消息概念")]),_:1})]),n("li",null,[a(e,{to:"#_1-2-rocketmq中的定时消息支持"},{default:t(()=>[s("1.2 RocketMQ中的定时消息支持")]),_:1})])])]),n("li",null,[a(e,{to:"#_2-概要流程"},{default:t(()=>[s("2. 概要流程")]),_:1})]),n("li",null,[a(e,{to:"#_3-详细流程"},{default:t(()=>[s("3. 详细流程")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_3-1-定时消息涉及到的类"},{default:t(()=>[s("3.1 定时消息涉及到的类")]),_:1})]),n("li",null,[a(e,{to:"#_3-2-定时消息时序图"},{default:t(()=>[s("3.2 定时消息时序图")]),_:1})]),n("li",null,[a(e,{to:"#_3-3-每个类关于定时消息的具体逻辑"},{default:t(()=>[s("3.3 每个类关于定时消息的具体逻辑")]),_:1})])])]),n("li",null,[a(e,{to:"#_4-源码解析"},{default:t(()=>[s("4. 源码解析")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_4-1-commitlog"},{default:t(()=>[s("4.1 CommitLog")]),_:1})]),n("li",null,[a(e,{to:"#_4-2-schedulemessageservice"},{default:t(()=>[s("4.2 ScheduleMessageService")]),_:1})])])]),n("li",null,[a(e,{to:"#_5-更多思考"},{default:t(()=>[s("5. 更多思考")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_5-1-为什么不实现任意时间的定时消息"},{default:t(()=>[s("5.1 为什么不实现任意时间的定时消息？")]),_:1})]),n("li",null,[a(e,{to:"#_5-2-任意时间定时消息实现"},{default:t(()=>[s("5.2 任意时间定时消息实现？")]),_:1})])])])])]),v,n("ul",null,[f,n("li",null,[g,s("：最初 RocketMQ 使用 Java 的 "),b,s(" 来执行定时任务，但是由于 Timer 内部只有一个线程同步执行，无法同时投递多个延迟等级的消息。在 "),n("a",h,[s("PR#3287"),a(p)]),s(" 中替换成了 "),y,s("，用以提高定时消息重投递的性能。")])]),_,n("p",null,[n("a",w,[s("PR#2290"),a(p)])]),T,M,S])}const L=l(k,[["render",C],["__file","20220313-rocketmq-scheduled-message.html.vue"]]);export{L as default};
