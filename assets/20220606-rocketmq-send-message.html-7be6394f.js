import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as s,d as a,w as e,e as u}from"./app-eaa093f0.js";const k={},r={href:"http://hscarb.github.io/rocketmq/20220606-rocketmq-send-message.html",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"rocketmq-消息发送设计和原理详解-源码剖析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rocketmq-消息发送设计和原理详解-源码剖析","aria-hidden":"true"},"#"),s(" RocketMQ 消息发送设计和原理详解 源码剖析")],-1),m={class:"table-of-contents"},v=n("h2",{id:"_1-背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-背景","aria-hidden":"true"},"#"),s(" 1. 背景")],-1),b=n("p",null,[s("发送消息是 MQ 最基础的操作之一。RocketMQ 官方提供了多语言客户端支持消息的发送和消费操作。"),n("br"),s(" 当然，消息发送并不仅仅牵扯到客户端操作。客户端做的是向 Broker 发送请求，请求中包含了消息的全部信息。而 Broker 需要处理客户端发送来的生产请求，将消息存储起来。"),n("br"),s(" 在这篇文章中我将解析消息发送流程中生产者和 Broker 的处理流程，揭秘 RocketMQ 消息发送高性能、高可靠的原理。")],-1),f=n("h2",{id:"_2-概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-概述","aria-hidden":"true"},"#"),s(" 2. 概述")],-1),g=n("br",null,null,-1),h=n("br",null,null,-1),y={href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/RocketMQ_Example.md",target:"_blank",rel:"noopener noreferrer"},w=u(`<h3 id="_2-1-消息发送方式和特殊消息" tabindex="-1"><a class="header-anchor" href="#_2-1-消息发送方式和特殊消息" aria-hidden="true">#</a> 2.1 消息发送方式和特殊消息</h3><h4 id="_2-1-1-三种消息发送方式" tabindex="-1"><a class="header-anchor" href="#_2-1-1-三种消息发送方式" aria-hidden="true">#</a> 2.1.1 三种消息发送方式</h4><p>RocketMQ 支持 3 种消息发送方式：同步、异步和单向。</p><ol><li>同步（Sync） <ul><li>发送消息时，同步等待，直到 Broker 返回发送结果。</li><li>这种方式最为可靠，但是发送性能最差。</li><li>在一些可靠性要求非常高的场景下，推荐使用同步方式。比如：重要的消息通知，短信通知。</li></ul></li><li>异步（Async） <ul><li>发送消息时，无需等待 Broker 返回发送结果，发送线程不阻塞。执行发送 API 时指定消息发送成功后的回调函数。</li><li>这种方式相比于同步发送，性能可以提升多个数量级，但可靠性不如同步发送。</li><li>在对响应时间敏感、流量较大的场景下，推荐使用异步方式。异步发送是使用最广泛的发送方式。</li></ul></li><li>单向（One-way） <ul><li>发送消息时，直接返回，不等待 Broker 返回发送结果，也不注册回调函数。</li><li>这种发送方式性能最高，可靠性最差。它不关心发送结果，不在乎消息是否成功存储在 Broker 中。</li><li>适用于消息丢失也没有太大影响的场景，例如发送日志。</li></ul></li></ol><p>这三种发送方式中，异步发送是最为广泛使用的发送方式。配合一些重试和补偿机制，可以达成较高的可靠性和很高的性能。</p><h4 id="_2-1-2-特殊消息类型" tabindex="-1"><a class="header-anchor" href="#_2-1-2-特殊消息类型" aria-hidden="true">#</a> 2.1.2 特殊消息类型</h4><p>下面简单介绍一下几种特殊消息类型。</p><ol><li>普通消息：发送效率最高、使用场景最广泛的消息类型。普通消息可以由客户端并发发送。不保证普通消息消费的顺序。单 Broker 性能可以达到十万级别。（视 Broker 配置而变）</li><li>队列级别顺序消息：RocketMQ 将一个 Topic 分为多个队列，以提高消费速度。每隔分区内的消息遵循先生产先消费的顺序。</li><li>Topic 级别顺序消息：如果把一个 Topic 的队列数量设为 1，那么该 Topic 中的消息也遵循先生产先消费。</li><li>延迟消息：消息发送后，消费者并不马上收到消息，而是等待一段指定的时间之后才能消费到该消息。</li><li>事务消息：提供分布式事务功能，可以保证发送消息和另外的操作同时成功或者同时失败。</li><li>批量消息：将多个消息包装成一个批量消息，一起发送。降低网络传输次数，提升传输效率。</li></ol><h3 id="_2-2-路由机制" tabindex="-1"><a class="header-anchor" href="#_2-2-路由机制" aria-hidden="true">#</a> 2.2 路由机制</h3><p>RocketMQ 的 Topic 可以分为多个队列，每个队列可能分布在不同 Broker 上。</p><p>消息的路由指的是发送消息时需要先获取 Topic 的路由信息（其中包含每个 Topic 的队列和它们所在的 Broker 地址），然后选择一个队列进行发送。</p><p>具体选择队列的方式是轮询，但是如果上一次发送失败，下一次选择队列时会避开发送失败队列所在的 Broker。此外有一个<strong>故障延迟机制</strong>，它默认关闭，如果开启则会在一段时间内都规避发送失败的 Broker。</p><p>消息发送的 API 提供了参数，可以传入要发送的队列信息，或者传入队列选择方法，以供用户选择发往某个 Broker 的具体队列。</p><h3 id="_2-3-消息发送流程" tabindex="-1"><a class="header-anchor" href="#_2-3-消息发送流程" aria-hidden="true">#</a> 2.3 消息发送流程</h3><p>消息发送的流程涉及到 RocketMQ 的三个组件：生产者、Broker、NameServer。<br> 其中生产者负责发送消息，Broker 负责处理消息发送请求，NameServer 负责更新和提供路由信息。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778577.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图所示</p><ul><li>生产者每 30 秒向 NameServer 拉取路由信息，Broker 每 30 秒向 NameServer 发送路由信息。</li><li>生产者发送消息时，会先在本地查询 Topic 路由信息。</li><li>如果查询不到，会请求 NameServer 查询。</li><li>随后将消息发送给 Broker。</li><li>Broker 也会在本地查询 Topic 路由信息来检查消息的 Topic 是否存在。</li><li>随后保存消息，如果是异步发送则直接返回，如果同步发送则等待消息保存成功后返回。</li></ul><h3 id="_2-4-高可用设计" tabindex="-1"><a class="header-anchor" href="#_2-4-高可用设计" aria-hidden="true">#</a> 2.4 高可用设计</h3><h4 id="_2-4-1-生产者高可用" tabindex="-1"><a class="header-anchor" href="#_2-4-1-生产者高可用" aria-hidden="true">#</a> 2.4.1 生产者高可用</h4><ul><li>消息发送重试机制：生产者在消息发送时如果出现失败，默认会重试 2 次。</li><li>故障规避机制：如果重试的消息仍发往同一个 Broker，发送大概率还是会失败，所以在重试时会尽量避开刚刚发送失败的 Broker。 <ul><li>可以通过配置故障延迟机制来指定是在本次消息发送时暂时避开发送失败的 Broker，还是在之后一段时间都避开该 Broker</li></ul></li></ul><h4 id="_2-4-2-broker-端高可用" tabindex="-1"><a class="header-anchor" href="#_2-4-2-broker-端高可用" aria-hidden="true">#</a> 2.4.2 Broker 端高可用</h4><p>Broker 端的高可用是用数据同步的方式，将消息同步到备 Broker 上，当主 Broker 发生故障时，可以从备 Broker 上恢复数据。</p><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><h3 id="_3-1-消息" tabindex="-1"><a class="header-anchor" href="#_3-1-消息" aria-hidden="true">#</a> 3.1 消息</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778594.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>RocketMQ 中的消息类主要有 3 个</p><ul><li><code>Message</code> 为客户端需要使用的消息类。</li><li><code>MessageExt</code> 为消息扩展属性类，它扩展了 <code>Message</code>，在 Broker 上产生此对象。</li><li><code>MessageExtBrokerInner</code> 是存储内部使用的 Message 对象，在 rocketmq-store 模块使用。</li></ul><p>在发送消息时，用到的是 <code>Message</code>，可以指定消息的属性、消息体和 flag。</p><h3 id="_3-2-生产者类图" tabindex="-1"><a class="header-anchor" href="#_3-2-生产者类图" aria-hidden="true">#</a> 3.2 生产者类图</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778622.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>DefaultMQProducer</code> 是 RocketMQ 中默认的生产者实现，它实现了 MQAdmin 接口。</li><li><code>DefaultMQProducer</code> 内部包装了一个 <code>DefaultMQProducerImpl</code> 字段，它是生产者的具体实现类，<code>DefaultMQProducer</code> 调用它内部的 <code>DefaultMQProducerImpl</code> 来发送命令。</li><li><code>DefaultMQProducerImpl</code> 内部注册了一个 <code>MQClientInstance</code> 字段。<code>MQClientInstance</code> 是与 NameServer 和 Broker 通信的中介。 <code>MQClientInstance</code> 与 <code>ClientId</code> 一一对应，<code>ClientId</code> 由 <code>clientIp</code>、<code>instanceName</code>、<code>unitName</code> 组成。如果不手动修改，一般来说一个启动的客户端进程只有一个 <code>MQClientInstance</code> 实例，这样可以节省客户端资源。</li><li><code>MQClientInstnace</code> 内部的 <code>producerTable</code> 注册了 ClientId 和 <code>DefaultMQProducerImpl</code> 的对应关系</li><li><code>MQClientAPIImpl</code> 提供了发送消息的 API，它调用 <code>RemotingClient</code> 执行发送。</li></ul><h3 id="_3-3-生产者启动" tabindex="-1"><a class="header-anchor" href="#_3-3-生产者启动" aria-hidden="true">#</a> 3.3 生产者启动</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778639.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>构造 <code>DefaultMQProducer</code> 实例，<code>start()</code> 启动</li><li>初始化 <code>DefaultMQProducerImpl</code>，设置状态为 <code>CREATE_JUST</code></li><li>启动 <code>DefaultMQProducerImpl</code></li><li>检查配置</li><li>根据 <code>ClientId</code> 获取或创建 <code>MQClientInstance</code></li><li>将 <code>DefaultMQProducerImpl</code> 注册到 <code>MQClientInstance</code></li><li>启动 <code>MQClientInstance</code>，<code>MQClientInstance</code> 启动定时任务，包括从 NameServer 拉取 Topic 路由信息、向 Broker 发送心跳</li><li><code>MQClientInstance</code> 启动 <code>PullMessageService</code> 和 <code>RebalanceService</code></li><li>设置服务状态为 <code>RUNNING</code></li></ol><h3 id="_3-4-消息发送" tabindex="-1"><a class="header-anchor" href="#_3-4-消息发送" aria-hidden="true">#</a> 3.4 消息发送</h3><p>RocketMQ 的消息发送流程图如下图所示：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778665.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中 <code>MQProducerImpl</code> 负责执行核心的消息发送方法 <code>sendDefaultImpl</code></p><p>这个方法中包含了消息发送的核心逻辑</p><ol><li>查找 Topic 路由信息</li><li>选择消息队列</li><li>发送消息</li></ol><h4 id="_3-4-1-查找-topic-路由信息" tabindex="-1"><a class="header-anchor" href="#_3-4-1-查找-topic-路由信息" aria-hidden="true">#</a> 3.4.1 查找 Topic 路由信息</h4><p>指定 Topic 发送消息后，生产者需要知道消息要发往哪个 Broker 地址。于是需要获取 Topic 路由信息，查询 Topic 所在的 Broker，随后选择一个 Broker 进行发送。该逻辑在 <code>DefaultMQProducerImpl#tryToFindTopicPublishInfo()</code> 中执行。</p><p>在第一次发送消息时，本地没有缓存 Topic 路由信息，所以需要主动从 NameServer 拉取，然后更新到本地路由表缓存。随后生产者会启动定时任务，每隔 30s 重新从 NameServer 拉取路由信息。</p><p>注意，第一次查询 NameServer 时，如果没有拉取到 Topic 路由信息，则会使用默认 Topic（<code>AUTO_CREATE_TOPIC_KEY_TOPIC</code>）再次查询。</p><blockquote><p>默认 Topic 在 Broker 启动时创建，是为自动创建主题运用的。<br> 它的目的是在主题没有被创建时，让生产者发送消息时也能够查询到 Broker 地址。<br> 然后等消息真正发送到 Broker 时，会根据消息的 Topic 创建主题。</p></blockquote><p>如果最终都没有拉取到 Topic 路由信息，则会抛出异常。</p><h4 id="_3-4-2-重试机制" tabindex="-1"><a class="header-anchor" href="#_3-4-2-重试机制" aria-hidden="true">#</a> 3.4.2 重试机制</h4><p>同步发送和异步发送的重试次数分别由 <code>retryTimesWhenSendFailed</code> 和 <code>retryTimesWhenSendAsyncFailed</code> 指定，默认都为 2 次（发送 1 次，重试 1 次）。</p><ul><li>同步发送的重试逻辑即在 <code>sendDefaultImpl()</code> 方法中循环发送执行发送逻辑。</li><li>异步发送的重试逻辑在 <code>MQClientAPIIpml()</code> 的<code>sendMessageAsync()</code> 构造的回调方法中指定。它调用 <code>onExceptionImpl()</code> 方法，如果当前发送次数小于异步发送重试次数，则再次执行 <code>sendMessageAsync()</code> 重试发送。</li></ul><h4 id="_3-4-3-选择消息队列-故障延迟机制" tabindex="-1"><a class="header-anchor" href="#_3-4-3-选择消息队列-故障延迟机制" aria-hidden="true">#</a> 3.4.3 选择消息队列：故障延迟机制</h4><p>获取到 Topic 路由信息后，需要从中选择一个队列进行发送。选择队列的逻辑由 <code>MQFaultStrategy#selectOneMessageQueue()</code>处理，在正常情况下，会轮询所有队列进行发送；上一次发送异常的情况下它将执行 Broker 规避和<strong>故障延迟机制</strong>。</p><p><strong>默认机制</strong></p><p>默认机制下，按照<strong>轮询</strong>的方式选择队列。如果上一次发送成功，选择下一个队列。如果上一次发送失败，会规避上一次发送的 <code>MessageQueue </code> 所在的 Broker。</p><p><strong>故障延迟机制</strong></p><p>故障延迟机制是为了能够在消息发送的时候尽量避开上次发送失败的 Broker，它由 <code>sendLatencyFaultEnable</code> 参数来设置开启，默认为关闭状态。</p><ul><li>关闭：发送一次消息失败后，会在本次消息发送过程中避开该 Broker，但<strong>下次发送消息时还会继续尝试</strong>。</li><li>开启：发送一次消息失败后，会悲观地认为 Broker 不可用，在<strong>接下来一段时间内都不再向其发送消息</strong>。随着发送失败次数的增多，规避时间将越来越长。</li></ul><h4 id="_3-4-4-发送消息" tabindex="-1"><a class="header-anchor" href="#_3-4-4-发送消息" aria-hidden="true">#</a> 3.4.4 发送消息</h4><p>消息发送逻辑由 <code>DefaultMQProducerImpl#sendKernelImpl()</code> 处理。</p><ol><li>先根据上一步选择的队列，查询 <code>MQClientInstance</code> 获取对应的 Broker 地址（先查本地缓存，如果没有则从 NameServer 拉取）。</li><li>设置消息的全局唯一 ID，然后对于超过 4KB （默认）的消息执行 zip 压缩。</li><li>执行发送之前的钩子函数 <code>executeSendMessageHookBefore()</code>，如消息轨迹的处理逻辑就在这里进行处理。</li><li>构建消息请求（头）</li><li>根据消息发送方式调用 <code>MQClientAPIImpl</code> 进行网络传输</li><li>执行消息发送后的钩子函数</li></ol><p><code>MQClientAPIImpl</code> 负责调用 <code>NettyRemotingClient</code> 将生产消息的请求发往 Broker。</p><h3 id="_3-5-broker-处理发送请求" tabindex="-1"><a class="header-anchor" href="#_3-5-broker-处理发送请求" aria-hidden="true">#</a> 3.5 Broker 处理发送请求</h3><p>Broker 通过 <code>SendMessageProcessor</code> 处理生产者发来的消息生产请求。当前使用 <code>asyncSendMessage()</code> 异步处理生产者发送过来的请求。</p><p>RocketMQ 的 Netty 请求处理机制会按照业务逻辑进行处理器的拆分。具体地说，RocketMQ 为不同的请求类型（请求码）注册不同的业务处理器和线程池去处理。比如消息生产的请求由 <code>sendMessageExecutor</code> 线程池处理，消费请求由 <code>pullMessageExecutor</code> 处理……</p><p>Broker 处理消息生产请求逻辑如下：</p><ol><li>检查消息合理性</li><li>如果消息重试次数超过允许的最大重试次数，将进入死信队列。</li><li>调用存储模块将消息存储</li></ol><h3 id="_3-6-batch-消息-批量消息" tabindex="-1"><a class="header-anchor" href="#_3-6-batch-消息-批量消息" aria-hidden="true">#</a> 3.6 Batch 消息（批量消息）</h3><p>为了减少网络请求次数，RocketMQ 支持将统一主题的一批消息打包发送。对于每条消息较小且消息较多的场景，使用批量发送可以提升发送效率。</p><p>批量消息 <code>MessageBatch</code> 类继承普通消息类 <code>Message</code>，内部仅仅多了消息列表 <code>List&lt;Message&gt; messages</code>。这样就可以像发送普通消息一样发送批量消息。发送前需要做的就是将多条普通消息体编码，放到 <code>MessageBatch</code> 的消息体中。</p><p>服务端接收到后，按照相同规则对批量消息进行解码，即可解码出多条消息。</p><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-生产者启动" tabindex="-1"><a class="header-anchor" href="#_4-1-生产者启动" aria-hidden="true">#</a> 4.1 生产者启动</h3><h4 id="_4-1-1-defaultmqproducerimpl-start" tabindex="-1"><a class="header-anchor" href="#_4-1-1-defaultmqproducerimpl-start" aria-hidden="true">#</a> 4.1.1 DefaultMQProducerImpl#start</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DefaultMQProducerImpl.java</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> startFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果状态为 CREATE_JUST，执行启动逻辑。该对象创建时默认状态为 CREATE_JUST</span>
        <span class="token keyword">case</span> <span class="token constant">CREATE_JUST</span><span class="token operator">:</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">START_FAILED</span><span class="token punctuation">;</span>

            <span class="token comment">// 检查 producerGroup 是否合法</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 改变生产者的 instanceName 为进程 ID，避免同一个服务器上的多个生产者实例名相同</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">CLIENT_INNER_PRODUCER_GROUP</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">changeInstanceNameToPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 创建 MQClientInstance 实例</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory <span class="token operator">=</span> <span class="token class-name">MQClientManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreateMQClientInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 向 MQClientInstance 注册服务，将当前生产者加入 MQClientInstance 管理（加入 MQClientInstance.producerTable）</span>
            <span class="token comment">// 方便后续调用网络请求、进行心跳检测等</span>
            <span class="token keyword">boolean</span> registerOK <span class="token operator">=</span> mQClientFactory<span class="token punctuation">.</span><span class="token function">registerProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registerOK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">CREATE_JUST</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;The producer group[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                            <span class="token operator">+</span> <span class="token string">&quot;] has been created before, specify another name please.&quot;</span> <span class="token operator">+</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">GROUP_NAME_DUPLICATE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                            <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getCreateTopicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 启动 MQClientInstance，如果已经启动，则不会执行</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>startFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mQClientFactory<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;the producer [{}] start OK. sendMessageWithVIPChannel={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isSendMessageWithVIPChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置服务状态为 RUNNING</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">RUNNING</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">START_FAILED</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">SHUTDOWN_ALREADY</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;The producer service state not OK, maybe started once, &quot;</span>
                                        <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState
                                        <span class="token operator">+</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SERVICE_NOT_OK</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 启动后马上向 NameServer 发送心跳</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">sendHeartbeatToAllBrokerWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">RequestFutureHolder</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-mqclientexception" tabindex="-1"><a class="header-anchor" href="#_4-1-2-mqclientexception" aria-hidden="true">#</a> 4.1.2 MQClientException</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 启动客户端代理
 *
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">MQClientException</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>

    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">CREATE_JUST</span><span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">START_FAILED</span><span class="token punctuation">;</span>
                <span class="token comment">// If not specified,looking address from name server</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">fetchNameServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// Start request-response channel</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Start various schedule tasks</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Start pull service</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>pullMessageService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Start rebalance service</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>rebalanceService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Start push service</span>
                <span class="token comment">// 当消费失败的时候，需要把消息发回去</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getDefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;the client factory [{}] start OK&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">START_FAILED</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;The Factory object[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] has been created before, and failed.&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 启动定时任务
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">fetchNameServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask fetchNameServerAddr exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 默认每30s从nameserver获取Topic路由信息
     * 包括 生产者和消费者
     */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask updateTopicRouteInfoFromNameServer exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getPollNameServerInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 每30s向Broker端发送心跳
     * 1. 清除离线的Broker
     * 2. 汇报心跳给broker
     */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanOfflineBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendHeartbeatToAllBrokerWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask sendHeartbeatToAllBroker exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getHeartbeatBrokerInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 每5s把消费者的offset持久化
     */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">persistAllConsumerOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask persistAllConsumerOffset exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getPersistConsumerOffsetInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 每60s调整线程池
     */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">adjustThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask adjustThreadPool exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-消息发送" tabindex="-1"><a class="header-anchor" href="#_4-2-消息发送" aria-hidden="true">#</a> 4.2 消息发送</h3><h4 id="_4-2-1-消息发送实现" tabindex="-1"><a class="header-anchor" href="#_4-2-1-消息发送实现" aria-hidden="true">#</a> 4.2.1 消息发送实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DefaultMQProducerImpl.java</span>
<span class="token doc-comment comment">/**
 * 发送消息实现
 * - 验证合法性 checkMessage
 * - 查找主题路由信息 tryToFindTopicPublishInfo
 * - 选择消息队列 selectOneMessageQueue
 * - 发送消息 sendKernelImpl
 *
 * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
 * <span class="token keyword">@param</span> <span class="token parameter">communicationMode</span>
 * <span class="token keyword">@param</span> <span class="token parameter">sendCallback</span>
 * <span class="token keyword">@param</span> <span class="token parameter">timeout</span>
 * <span class="token keyword">@return</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">MQClientException</span></span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RemotingException</span></span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">MQBrokerException</span></span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendDefaultImpl</span><span class="token punctuation">(</span>
    <span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">CommunicationMode</span> communicationMode<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">SendCallback</span> sendCallback<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> timeout
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查生产者处于运行状态</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeSureStateOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 验证消息是否符合规范</span>
    <span class="token class-name">Validators</span><span class="token punctuation">.</span><span class="token function">checkMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> invokeID <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> beginTimestampFirst <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> beginTimestampPrev <span class="token operator">=</span> beginTimestampFirst<span class="token punctuation">;</span>
    <span class="token keyword">long</span> endTimestamp <span class="token operator">=</span> beginTimestampFirst<span class="token punctuation">;</span>
    <span class="token comment">// 获取主题的路由信息</span>
    <span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>topicPublishInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> callTimeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Exception</span> exception <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> timesTotal <span class="token operator">=</span> communicationMode <span class="token operator">==</span> <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> brokersSent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>timesTotal<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 循环执行发送，处理同步发送重试。同步发送共重试timesTotal次，默认为2次，异步发送只执行一次</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> times <span class="token operator">&lt;</span> timesTotal<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> lastBrokerName <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> mq <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 选择消息队列</span>
            <span class="token class-name">MessageQueue</span> mqSelected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSelected <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mq <span class="token operator">=</span> mqSelected<span class="token punctuation">;</span>
                brokersSent<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    beginTimestampPrev <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">//Reset topic with namespace during resend.</span>
                        msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">long</span> costTime <span class="token operator">=</span> beginTimestampPrev <span class="token operator">-</span> beginTimestampFirst<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        callTimeout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 发送消息</span>
                    sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 处理发送异常，更新失败条目</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">SendStatus</span><span class="token punctuation">.</span><span class="token constant">SEND_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isRetryAnotherBrokerWhenNotStoreOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>

                            <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
                        <span class="token keyword">default</span><span class="token operator">:</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// catch ...</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 发送成功，返回发送结果</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 发送失败，抛出异常</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// mqClientException.setResponseCode(...)</span>
        <span class="token keyword">throw</span> mqClientException<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">validateNameServerSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;No route info of this topic: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token function">suggestTodo</span><span class="token punctuation">(</span><span class="token class-name">FAQUrl</span><span class="token punctuation">.</span><span class="token constant">NO_TOPIC_ROUTE_INFO</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">ClientErrorCode</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND_TOPIC_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-查找路由信息" tabindex="-1"><a class="header-anchor" href="#_4-2-2-查找路由信息" aria-hidden="true">#</a> 4.2.2 查找路由信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DefaultMQProducerImpl.java</span>
<span class="token keyword">private</span> <span class="token class-name">TopicPublishInfo</span> <span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试获取缓存的路由信息</span>
    <span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果路由信息没有找到，则从NameServer上获取</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> topicPublishInfo <span class="token operator">||</span> <span class="token operator">!</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">isHaveTopicRouterInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> topicPublishInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果第一次没有查询到，第二次使用默认主题查询</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> topicPublishInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-选择消息队列" tabindex="-1"><a class="header-anchor" href="#_4-2-3-选择消息队列" aria-hidden="true">#</a> 4.2.3 选择消息队列</h4><p><strong>默认机制</strong>，故障延迟机制关闭</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// TopicPublishInfo.java</span>
<span class="token doc-comment comment">/**
 * 选择队列
 * 上一次发送成功则选择下一个队列，上一次发送失败会规避上次发送的 MessageQueue 所在的 Broker
 *
 * <span class="token keyword">@param</span> <span class="token parameter">lastBrokerName</span> 上次发送的 Broker 名称，如果为空表示上次发送成功
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastBrokerName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 轮询队列，选择下一个队列</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 上次发送失败，规避上次发送的 MessageQueue 所在的 Broker</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>故障延迟机制</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// MQFaultStrategy.java</span>
<span class="token doc-comment comment">/**
 * 选择发送的队列，根据是否启用 Broker 故障延迟机制走不同逻辑
 *
 * sendLatencyFaultEnable=false，默认不启用 Broker 故障延迟机制
 * sendLatencyFaultEnable=true，启用 Broker 故障延迟机制
 *
 * <span class="token keyword">@param</span> <span class="token parameter">tpInfo</span>
 * <span class="token keyword">@param</span> <span class="token parameter">lastBrokerName</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TopicPublishInfo</span> tpInfo<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 启用 Broker 故障延迟机制</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 轮询获取一个消息队列</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">%</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 验证该消息队列是否可用，规避注册过不可用的 Broker。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 如果没有可用的 Broker，尝试从规避的 Broker 中选择一个可用的 Broker，如果没有找到，返回 null</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> notBestBroker <span class="token operator">=</span> latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">pickOneAtLeast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> writeQueueNums <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getQueueIdByBroker</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>writeQueueNums <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>notBestBroker <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mq<span class="token punctuation">.</span><span class="token function">setBrokerName</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mq<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> writeQueueNums<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred when selecting message queue&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不启用 Broker 故障延迟机制</span>
    <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-4-发送消息-api-核心入口" tabindex="-1"><a class="header-anchor" href="#_4-2-4-发送消息-api-核心入口" aria-hidden="true">#</a> 4.2.4 发送消息 API 核心入口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DefaultMQProducerImpl.java</span>
<span class="token doc-comment comment">/**
 * 消息发送 API 核心入口
 * 1. 根据 MessageQueue 获取 Broker 地址
 * 2. 为消息分配全局唯一 ID，执行消息压缩和事务
 * 3. 如果注册了发送钩子函数，则执行发送之前的钩子函数
 * 4. 构建消息发送请求包
 * 5. 根据消息发送方式（同步、异步、单项）进行网络传输
 * 6. 如果注册了发送钩子函数，执行发送之后的钩子函数
 *
 * <span class="token keyword">@param</span> <span class="token parameter">msg</span> 待发送消息
 * <span class="token keyword">@param</span> <span class="token parameter">mq</span> 发送的消息队列
 * <span class="token keyword">@param</span> <span class="token parameter">communicationMode</span> 消息发送模式：SYNC、ASYNC、ONEWAY
 * <span class="token keyword">@param</span> <span class="token parameter">sendCallback</span> 异步发送回调函数
 * <span class="token keyword">@param</span> <span class="token parameter">topicPublishInfo</span> 主题路由信息
 * <span class="token keyword">@param</span> <span class="token parameter">timeout</span> 消息发送超时时间
 * <span class="token keyword">@return</span> 消息发送结果
 */</span>
<span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendKernelImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
                                  <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">,</span>
                                  <span class="token keyword">final</span> <span class="token class-name">CommunicationMode</span> communicationMode<span class="token punctuation">,</span>
                                  <span class="token keyword">final</span> <span class="token class-name">SendCallback</span> sendCallback<span class="token punctuation">,</span>
                                  <span class="token keyword">final</span> <span class="token class-name">TopicPublishInfo</span> topicPublishInfo<span class="token punctuation">,</span>
                                  <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> beginStartTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据 MessageQueue 获取 Broker 的网络地址</span>
    <span class="token class-name">String</span> brokerAddr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findBrokerAddressInPublish</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> brokerAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果 MQClientInstance 的 brokerAddrTable 未缓存该 Broker 信息，则从 NameServer 主动拉取 topic 路由信息</span>
        <span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brokerAddr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findBrokerAddressInPublish</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">SendMessageContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到 topic 的路由信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerAddr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        brokerAddr <span class="token operator">=</span> <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">brokerVIPChannel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isSendMessageWithVIPChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> brokerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prevBody <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置消息的全局唯一 ID（UNIQUE_ID），对于批量消息，在生成过程中已经设置了 ID</span>
            <span class="token comment">//for MessageBatch,ID has been set in the generating process</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">MessageBatch</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">MessageClientIDSetter</span><span class="token punctuation">.</span><span class="token function">setUniqID</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 处理命名空间逻辑</span>
            <span class="token keyword">boolean</span> topicWithNamespace <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                msg<span class="token punctuation">.</span><span class="token function">setInstanceId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                topicWithNamespace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 处理压缩，默认消息体超过 4KB 的消息进行 zip 压缩，并设置压缩标识</span>
            <span class="token keyword">int</span> sysFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> msgBodyCompressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToCompressMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sysFlag <span class="token operator">|=</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">COMPRESSED_FLAG</span><span class="token punctuation">;</span>
                msgBodyCompressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 处理事务 Prepared 消息，并设置事务标识</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> tranMsg <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>tranMsg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sysFlag <span class="token operator">|=</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_PREPARED_TYPE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// CheckForbiddenHook ...</span>

            <span class="token comment">// 执行消息发送前的钩子函数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasSendMessageHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setCommunicationMode</span><span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setBornHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setBrokerAddr</span><span class="token punctuation">(</span>brokerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setMq</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">setNamespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> isTrans <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrans <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> isTrans<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    context<span class="token punctuation">.</span><span class="token function">setMsgType</span><span class="token punctuation">(</span><span class="token class-name">MessageType<span class="token punctuation">.</span>Trans_Msg_Half</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;__STARTDELIVERTIME&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_DELAY_TIME_LEVEL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    context<span class="token punctuation">.</span><span class="token function">setMsgType</span><span class="token punctuation">(</span><span class="token class-name">MessageType<span class="token punctuation">.</span>Delay_Msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 执行所有 before 钩子函数</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeSendMessageHookBefore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 构建消息发送请求</span>
            <span class="token class-name">SendMessageRequestHeader</span> requestHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setDefaultTopic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getCreateTopicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setDefaultTopicQueueNums</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getDefaultTopicQueueNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setSysFlag</span><span class="token punctuation">(</span>sysFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setBornTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">messageProperties2String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setReconsumeTimes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setUnitMode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isUnitMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">setBatch</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">MessageBatch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">RETRY_GROUP_TOPIC_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> reconsumeTimes <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">getReconsumeTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>reconsumeTimes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    requestHeader<span class="token punctuation">.</span><span class="token function">setReconsumeTimes</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>reconsumeTimes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">clearProperty</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_RECONSUME_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">String</span> maxReconsumeTimes <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">getMaxReconsumeTimes</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxReconsumeTimes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    requestHeader<span class="token punctuation">.</span><span class="token function">setMaxReconsumeTimes</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>maxReconsumeTimes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">clearProperty</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_MAX_RECONSUME_TIMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 根据消息发送方式进行网络传输</span>
            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
                    <span class="token class-name">Message</span> tmpMessage <span class="token operator">=</span> msg<span class="token punctuation">;</span>
                    <span class="token keyword">boolean</span> messageCloned <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>msgBodyCompressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">//If msg body was compressed, msgbody should be reset using prevBody.</span>
                        <span class="token comment">//Clone new message using commpressed message body and recover origin massage.</span>
                        <span class="token comment">//Fix bug:https://github.com/apache/rocketmq-externals/issues/66</span>
                        tmpMessage <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">cloneMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        messageCloned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        msg<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>prevBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>topicWithNamespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageCloned<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            tmpMessage <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">cloneMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            messageCloned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">long</span> costTimeAsync <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTimeAsync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQClientAPIImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
                        brokerAddr<span class="token punctuation">,</span>
                        mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        tmpMessage<span class="token punctuation">,</span>
                        requestHeader<span class="token punctuation">,</span>
                        timeout <span class="token operator">-</span> costTimeAsync<span class="token punctuation">,</span>
                        communicationMode<span class="token punctuation">,</span>
                        sendCallback<span class="token punctuation">,</span>
                        topicPublishInfo<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        context<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
                <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
                    <span class="token keyword">long</span> costTimeSync <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTimeSync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;sendKernelImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 执行客户端同步发送方法</span>
                    sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQClientAPIImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
                        brokerAddr<span class="token punctuation">,</span>
                        mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        msg<span class="token punctuation">,</span>
                        requestHeader<span class="token punctuation">,</span>
                        timeout <span class="token operator">-</span> costTimeSync<span class="token punctuation">,</span>
                        communicationMode<span class="token punctuation">,</span>
                        context<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">assert</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasSendMessageHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">setSendResult</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeSendMessageHookAfter</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// catch ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            msg<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>prevBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
            msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 主动更新后还是找不到路由信息，则抛出异常</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;The broker[&quot;</span> <span class="token operator">+</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] not exist&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-broker-处理发送请求" tabindex="-1"><a class="header-anchor" href="#_4-3-broker-处理发送请求" aria-hidden="true">#</a> 4.3 Broker 处理发送请求</h3><h4 id="_4-3-1-broker-注册发送消息处理器" tabindex="-1"><a class="header-anchor" href="#_4-3-1-broker-注册发送消息处理器" aria-hidden="true">#</a> 4.3.1 Broker 注册发送消息处理器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 创建和注册Broker请求处理类
 * RocketMQ按照业务逻辑区分请求处理器，每个类型的请求码对应一个业务处理器（NettyRequestProcessor）
 * 这样就实现了为不同请求码设置对应线程池，实现不同请求线程池的隔离
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
    * SendMessageProcessor
    */</span>
    <span class="token class-name">SendMessageProcessor</span> sendProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendProcessor<span class="token punctuation">.</span><span class="token function">registerSendMessageHook</span><span class="token punctuation">(</span>sendMessageHookList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendProcessor<span class="token punctuation">.</span><span class="token function">registerConsumeMessageHook</span><span class="token punctuation">(</span>consumeMessageHookList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE_V2</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_BATCH_MESSAGE</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">CONSUMER_SEND_MSG_BACK</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>sendMessageExecutor</code> 是发送消息处理线程池，默认有 4 个线程。每个线程执行 <code>SendMessageProcessor#processRequest()</code> 方法</p><h4 id="_4-3-2-发送消息处理器处理" tabindex="-1"><a class="header-anchor" href="#_4-3-2-发送消息处理器处理" aria-hidden="true">#</a> 4.3.2 发送消息处理器处理</h4><p><code>SendMessageProcessor#processRequest()</code> 最终调用 <code>asyncSendMessage()</code> 方法处理发送请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// SendMessageProcessor.java</span>
<span class="token doc-comment comment">/**
 * 处理客户端的发送消息请求
 * 1. 检查消息合法性检查
 * 2. 如果消息重试次数超过最大重试次数，消息将进入 DLQ 死信队列。
 * 3. 将消息保存到存储
 *
 * <span class="token keyword">@param</span> <span class="token parameter">ctx</span>
 * <span class="token keyword">@param</span> <span class="token parameter">request</span>
 * <span class="token keyword">@param</span> <span class="token parameter">mqtraceContext</span>
 * <span class="token keyword">@param</span> <span class="token parameter">requestHeader</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncSendMessage</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span>
                                                            <span class="token class-name">SendMessageContext</span> mqtraceContext<span class="token punctuation">,</span>
                                                            <span class="token class-name">SendMessageRequestHeader</span> requestHeader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 构造Response，包含消息合法性检查</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token function">preSend</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">SendMessageResponseHeader</span> responseHeader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SendMessageResponseHeader</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> queueIdInt <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TopicConfig</span> topicConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTopicConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectTopicConfig</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>queueIdInt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queueIdInt <span class="token operator">=</span> <span class="token function">randomQueueId</span><span class="token punctuation">(</span>topicConfig<span class="token punctuation">.</span><span class="token function">getWriteQueueNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 构造存储用的Message对象</span>
    <span class="token class-name">MessageExtBrokerInner</span> msgInner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageExtBrokerInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>queueIdInt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断发过来的消息是否已经到达重新消费的重试最大次数，进入死信队列</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">handleRetryAndDLQ</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">,</span> response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> msgInner<span class="token punctuation">,</span> topicConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    msgInner<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> origProps <span class="token operator">=</span> <span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">string2messageProperties</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> origProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setBornTimestamp</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getBornTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setBornHost</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setStoreHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStoreHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setReconsumeTimes</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> requestHeader<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> clusterName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_CLUSTER</span><span class="token punctuation">,</span> clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origProps<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_WAIT_STORE_MSG_OK</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// There is no need to store &quot;WAIT=true&quot;, remove it from propertiesString to save 9 bytes for each message.</span>
        <span class="token comment">// It works for most case. In some cases msgInner.setPropertiesString invoked later and replace it.</span>
        <span class="token class-name">String</span> waitStoreMsgOKValue <span class="token operator">=</span> origProps<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_WAIT_STORE_MSG_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        msgInner<span class="token punctuation">.</span><span class="token function">setPropertiesString</span><span class="token punctuation">(</span><span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">messageProperties2String</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Reput to properties, since msgInner.isWaitStoreMsgOK() will be invoked later</span>
        origProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_WAIT_STORE_MSG_OK</span><span class="token punctuation">,</span> waitStoreMsgOKValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        msgInner<span class="token punctuation">.</span><span class="token function">setPropertiesString</span><span class="token punctuation">(</span><span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">messageProperties2String</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 保存到消息存储</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> putMessageResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> transFlag <span class="token operator">=</span> origProps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>transFlag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>transFlag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRejectTransactionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_PERMISSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span>
                <span class="token string">&quot;the broker[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerIP1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">+</span> <span class="token string">&quot;] sending transaction message is forbidden&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPrepareMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">handlePutMessageResultFuture</span><span class="token punctuation">(</span>putMessageResult<span class="token punctuation">,</span> response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> msgInner<span class="token punctuation">,</span> responseHeader<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> queueIdInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,96),M={href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/RocketMQ_Example.md",target:"_blank",rel:"noopener noreferrer"},I={href:"https://kunzhao.org/docs/rocketmq/rocketmq-send-message-flow/",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,"《RocketMQ 技术内幕 第二版》",-1),_=n("li",null,"《RocketMQ 分布式消息中间件 核心原理与最佳实践》",-1),S=n("hr",null,null,-1),P=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),C=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function Q(R,x){const p=o("ExternalLinkIcon"),t=o("router-link");return l(),i("div",null,[n("p",null,[s("原文地址："),n("a",r,[s("http://hscarb.github.io/rocketmq/20220606-rocketmq-send-message.html"),a(p)])]),d,n("nav",m,[n("ul",null,[n("li",null,[a(t,{to:"#_1-背景"},{default:e(()=>[s("1. 背景")]),_:1})]),n("li",null,[a(t,{to:"#_2-概述"},{default:e(()=>[s("2. 概述")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_2-1-消息发送方式和特殊消息"},{default:e(()=>[s("2.1 消息发送方式和特殊消息")]),_:1})]),n("li",null,[a(t,{to:"#_2-2-路由机制"},{default:e(()=>[s("2.2 路由机制")]),_:1})]),n("li",null,[a(t,{to:"#_2-3-消息发送流程"},{default:e(()=>[s("2.3 消息发送流程")]),_:1})]),n("li",null,[a(t,{to:"#_2-4-高可用设计"},{default:e(()=>[s("2.4 高可用设计")]),_:1})])])]),n("li",null,[a(t,{to:"#_3-详细设计"},{default:e(()=>[s("3. 详细设计")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_3-1-消息"},{default:e(()=>[s("3.1 消息")]),_:1})]),n("li",null,[a(t,{to:"#_3-2-生产者类图"},{default:e(()=>[s("3.2 生产者类图")]),_:1})]),n("li",null,[a(t,{to:"#_3-3-生产者启动"},{default:e(()=>[s("3.3 生产者启动")]),_:1})]),n("li",null,[a(t,{to:"#_3-4-消息发送"},{default:e(()=>[s("3.4 消息发送")]),_:1})]),n("li",null,[a(t,{to:"#_3-5-broker-处理发送请求"},{default:e(()=>[s("3.5 Broker 处理发送请求")]),_:1})]),n("li",null,[a(t,{to:"#_3-6-batch-消息-批量消息"},{default:e(()=>[s("3.6 Batch 消息（批量消息）")]),_:1})])])]),n("li",null,[a(t,{to:"#_4-源码解析"},{default:e(()=>[s("4. 源码解析")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_4-1-生产者启动"},{default:e(()=>[s("4.1 生产者启动")]),_:1})]),n("li",null,[a(t,{to:"#_4-2-消息发送"},{default:e(()=>[s("4.2 消息发送")]),_:1})]),n("li",null,[a(t,{to:"#_4-3-broker-处理发送请求"},{default:e(()=>[s("4.3 Broker 处理发送请求")]),_:1})])])]),n("li",null,[a(t,{to:"#参考资料"},{default:e(()=>[s("参考资料")]),_:1})])])]),v,b,f,n("p",null,[s("RocketMQ 的 Java 客户端提供了丰富的消息发送 API，支持多种消息发送的方式和特殊消息的发送。"),g,s(" 包括 3 种发送方式（同步、异步、单向）和多种特殊消息（顺序消息、延时消息、批量消息、过滤消息、事务消息）。"),h,s(" 对于客户端消息发送 API 的具体使用方式，可以参考官方文档："),n("a",y,[s("https://github.com/apache/rocketmq/blob/develop/docs/cn/RocketMQ_Example.md"),a(p)]),s("。")]),w,n("ul",null,[n("li",null,[n("a",M,[s("生产消息样例——官方文档"),a(p)])]),n("li",null,[n("a",I,[s("RocketMQ 消息发送流程"),a(p)])]),T,_]),S,P,C])}const E=c(k,[["render",Q],["__file","20220606-rocketmq-send-message.html.vue"]]);export{E as default};
