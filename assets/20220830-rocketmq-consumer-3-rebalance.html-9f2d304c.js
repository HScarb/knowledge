import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-eaa093f0.js";const u={},i={href:"http://hscarb.github.io/rocketmq/20220830-rocketmq-consumer-3-rebalance.html",target:"_blank",rel:"noopener noreferrer"},k=t('<h1 id="rocketmq-消费者-3-重平衡-流程详解-源码解析" tabindex="-1"><a class="header-anchor" href="#rocketmq-消费者-3-重平衡-流程详解-源码解析" aria-hidden="true">#</a> RocketMQ 消费者（3）重平衡 流程详解 &amp; 源码解析</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>本文是 RocketMQ 消费者系列的第三篇，介绍消费者重平衡。</p><p>我把 RocketMQ 消费分成如下几个步骤</p><ol><li>重平衡</li><li>消费者拉取消息</li><li>Broker 接收拉取请求后从存储中查询消息并返回</li><li>消费者消费消息</li></ol><p>其中重平衡是消费者开始消费的起点。</p><h3 id="_1-1-重平衡的含义" tabindex="-1"><a class="header-anchor" href="#_1-1-重平衡的含义" aria-hidden="true">#</a> 1.1 重平衡的含义</h3><p>RocketMQ 的 Topic 设计成有多个 Queue，被多个消费者同时消费来加快消费速率。</p><p>在多个消费者同时消费一个 Topic 时，其中的每个 Queue 只能同时被一个消费者消费。在消费者数量变化时，将 Queue 分配给消费者进行消费的动作即重平衡。</p><h2 id="_2-概要设计" tabindex="-1"><a class="header-anchor" href="#_2-概要设计" aria-hidden="true">#</a> 2. 概要设计</h2><p>RocketMQ 的重平衡大致实现方式为：在消费者端用一个固定的分配策略将所有的消费队列分配给所有的消费者。通过将每个消费者的分配策略设置成一致，并且将消费者和消费队列排序的方法，保证每个消费者的分配的结果幂等。</p><h3 id="_2-1-重平衡的触发" tabindex="-1"><a class="header-anchor" href="#_2-1-重平衡的触发" aria-hidden="true">#</a> 2.1 重平衡的触发</h3><p>RocketMQ 的重平衡在消费端完成。唯一的触发点是一个重平衡线程，触发方式分主动触发和定时触发。</p><ul><li><p>主动触发：消费者数量发生变化</p><ol><li>推模式消费者启动或恢复时，唤醒本地的重平衡线程，立即重平衡。在这之前还上报心跳让 Broker 感知到新消费者启动，发送请求让所有消费者重平衡。</li><li>消费者关机时，向 Broker 发请求解除注册。Broker 收到请求后发送请求让其他消费者重平衡。</li></ol><ul><li>主动触发模式可以通过以下配置来关闭，当消费者数量很多，或者频繁上下线时，为了防止频繁进行重平衡，建议关闭主动触发。 <ul><li>Broker 级别配置：<code>notifyConsumerIdsChangedEnable</code>（broker.conf）</li><li>消费组级别配置：<code>notifyConsumerIdsChangedEnable</code>（通过 <code>updateSubGroup</code> 命令设置）</li><li>只要有一个为 false，就不会进行对应消费组的重平衡主动触发。</li></ul></li></ul></li><li><p>定时触发：重平衡线程每 20s 触发一次重平衡。</p></li></ul><h3 id="_2-2-重平衡类设计" tabindex="-1"><a class="header-anchor" href="#_2-2-重平衡类设计" aria-hidden="true">#</a> 2.2 重平衡类设计</h3><p>重平衡主要涉及两个类：重平衡实现 <code>RebalanceImpl</code> 和重平衡线程 <code>RebalanceService</code></p><ul><li>重平衡线程：客户端实例持有，每个客户端进程一般只有一个，负责定时或者立即触发重平衡。但它只负责触发，重平衡的实际逻辑在实现类中。</li><li>重平衡实现： <ul><li><code>RebalanceImpl</code> 中保存了消费者负载的消息队列、重分配策略，并实现了重分配的方法（调用重平衡策略）。</li><li>每个消费者持有一个重平衡实现，根据推和拉模式的不同，分别在 <code>RebalanceImpl</code> 的基础上新实现了推模式和拉模式的重平衡实现。</li></ul></li></ul><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/09/1662312698813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-3-重平衡流程" tabindex="-1"><a class="header-anchor" href="#_2-3-重平衡流程" aria-hidden="true">#</a> 2.3 重平衡流程</h3><p>消费者按 Topic 维度进行重平衡。</p><ol><li>从本地缓存中获取 Topic 的所有 Queue</li><li>向 Broker 获取所有消费者</li><li>按预设的策略将队列分配给消费者</li><li>判断自己分配到的队列是否变化 <ul><li>如果变化则丢弃老队列，开始拉取新队列，并将订阅关系上报到 Broker</li></ul></li></ol><p>RocketMQ 的重平衡流程在消费者端完成，但是由 Broker 端发送信号给所有消费者触发。</p><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><p>RocketMQ 的重平衡在客户端（即消费者端）完成。</p>',24),r={href:"https://github.com/apache/rocketmq/pull/2867/files",target:"_blank",rel:"noopener noreferrer"},d=t(`<h3 id="_3-1-重平衡实现类-rebalanceimpl" tabindex="-1"><a class="header-anchor" href="#_3-1-重平衡实现类-rebalanceimpl" aria-hidden="true">#</a> 3.1 重平衡实现类 RebalanceImpl</h3><p><code>RebalanceImpl</code> 类中实现了整个重平衡流程。</p><h4 id="_3-1-1-域" tabindex="-1"><a class="header-anchor" href="#_3-1-1-域" aria-hidden="true">#</a> 3.1.1 域</h4><p>RabalanceImpl 类保存一些重平衡需要的基本信息。</p><ol><li><code>subscriptionInner</code>：消费者订阅的所有 Topic。重平衡时遍历这些 Topic 进行重平衡。</li><li><code>topicSubscribeInfoTable</code>：Topic 下的所有队列。重平衡时对这些队列应用重分配策略进行分配。</li><li><code>processQueueTable</code>：该消费者负载的所有消息队列。重平衡完成后，对比之前的负载来判断是否要改变队列进行消息拉取。</li></ol><p>此外还有一个重要的域即重分配策略类 <code>allocateMessageQueueStrategy</code>，同一消费组中的每个消费者应保持一致，以保证重分配的结果一致。</p><h4 id="_3-1-2-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-2-方法" aria-hidden="true">#</a> 3.1.2 方法</h4><p>重平衡实现类中包含重平衡的一系列逻辑，由抽象类直接实现。</p><ul><li>重平衡方法 <code>doRebalance</code><ul><li>重平衡方法会可以细分为对每个 Topic 进行重平衡的方法 <code>rebalanceByTopic</code><ul><li>对 Topic 进行重平衡后需要判断并更新消费者的负载，方法为 <code>updateProcessQueueTableInRebalance</code></li></ul></li></ul></li></ul><p>此外还包含了一些抽象方法，根据消费者类型不同有着不同的实现。</p><ul><li><code>messageQueueChange</code>：负载的消息队列发生变化时调用</li><li><code>dispatchPullRequest</code>：分发拉取请求到消息拉取服务，开始拉取消息</li><li><code>removeUnnecessaryMessageQueue</code>：将重平衡后丢弃的消费队列移除</li></ul><h3 id="_3-2-重平衡流程" tabindex="-1"><a class="header-anchor" href="#_3-2-重平衡流程" aria-hidden="true">#</a> 3.2 重平衡流程</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/09/1662312699594.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-1-重平衡触发" tabindex="-1"><a class="header-anchor" href="#_3-2-1-重平衡触发" aria-hidden="true">#</a> 3.2.1 重平衡触发</h4><p>我把重平衡的触发分为主动触发和被动触发，主动触发是由消费者的启动和停止触发的；而被动触发一般是其他消费者每 20s 进行检查或者是收到 Broker 发送的重平衡请求时触发。</p><p>上图中标识了 4 个触发点。黄色为主动触发，蓝色为被动触发。</p><ol><li>消费者启动时（ <code>start()</code> ）先向 Broker 发送心跳（触发点 4），然后调用 <code>rebalanceImmediately()</code> 方法，立即唤醒重平衡线程执行本地重平衡。</li><li>消费者停止时（<code>shutdown()</code>） <ol><li>Broker 发送请求解除注册</li><li>Broker 处理之后再向每个消费者发送消费者数量变化消息</li><li>所有消费者收到后唤醒重平衡线程进行重平衡</li></ol></li><li>被动触发，重平衡线程 <code>RebalanceService</code> 每等待 20s 进行一次重平衡</li><li>其他消费者收到消费者数量变化请求时进行重平衡。与触发点 2 类似，都是消费者收到 Broker 请求后触发。</li></ol><p>RocketMQ 中主要有 3 种消费者实现，它们的重平衡触发也不太相同。上面主要讲的是推模式消费者 <code>DefaultMQPushConsumer</code> 的重平衡触发流程。此外还有两个拉模式消费者。</p><ul><li><p><code>DefaultMQPullConsumer</code>：封装很原始的消费者，已经被标记为 <code>@Deprecated</code>。只有指定队列进行拉取的接口。</p><ul><li>它没有订阅 Topic 的方法，在启动和停止时也不会向 Broker 发送心跳标识消费者的数量变化。</li><li>在每次拉取消息时（<code>pull()</code>）会更新订阅的 Topic，也会启动重平衡线程每 20s 进行重平衡。也就是说在第一次拉取消息之后的 20s 内可能会进行重平衡。</li><li>一般不会用到该消费者的重平衡机制。</li></ul></li><li><p><code>DefaultLitePullConsumer</code>：仿照 kafka 消费者的 API 实现的新消费者，后台有线程拉取消息进行缓存，可以做到比推模式消费者更高的拉取效率。</p><ul><li>在订阅 Topic 时（<code>subscribe()</code>）会向 Broker 发送心跳请求，此时就开始重平衡。</li><li>在停止时（<code>shutdown()</code>）向 Broker 发送注销请求，此时也会触发重平衡。</li><li>重平衡线程每 20s 进行重平衡的检查。</li><li>可以看出该拉模式消费者与推模式消费者的重平衡机制比较类似，可以进行重平衡。</li></ul></li></ul><h4 id="_3-2-2-重平衡流程" tabindex="-1"><a class="header-anchor" href="#_3-2-2-重平衡流程" aria-hidden="true">#</a> 3.2.2 重平衡流程</h4><p>重平衡线程调用客户端实例的重平衡方法 <code>doRebalance</code> 进行重平衡，客户端实例的该方法没有具体逻辑，仅仅是遍历客户端上注册的所有消费者，获取它们的重平衡实现并且调用 <code>RebalanceImpl#doRebalance</code> 方法。</p><p>该方法逻辑如下：</p><ul><li><code>rebalanceByTopic</code>：从本地缓存中获取该消费者订阅的所有 Topic，对每个 Topic 进行重平衡 <ul><li>从本地缓存中获取该 Topic 的所有消息队列</li><li>发送请求到 Broker，获取该消费组下所有的消费者（ID）</li><li>将消息队列和消费者 ID 排序（用来保证每个消费者执行同样的重平衡流程得到的结果一致，刚好能完全分配队列给所有消费者）</li><li>执行分配策略的重分配方法，获取自己分配到的消息队列</li><li><code>updateProcessQueueTableInRebalance</code>：更新自己需要拉取的处理队列 <ul><li>遍历本地缓存的消费者分到的消息队列，判断要丢弃的队列并丢弃</li><li><code>computePullFromWhereWithException</code>：计算并从偏移量存储中读取下次拉取的偏移量</li><li>遍历新分配的消息队列，对于新分配的，添加处理队列并创建 <code>PullRequest</code> 启动拉取</li><li><code>dispatchPullRequest</code>：将新建的 <code>PullRequest</code> 加入消息拉取线程 <code>PullMessageService</code>，开始拉取</li></ul></li><li><code>messageQueueChanged</code>：将新的队列订阅关系通过发送心跳请求上报给 Broker <ul><li>更新订阅数据版本号</li><li>设置 Topic 维度拉取流控</li><li>发送心跳给 Broker 更新队列订阅关系</li><li>重新分配之后，移除不再属于当前实例的消息队列和处理队列</li></ul></li></ul></li></ul><p>这里的处理队列指 <code>ProcessQueue</code>，用来临时存放拉取到待消费的消息，与消息队列一一对应。</p><p>拉取请求 <code>PullRequest</code>，每个队列只会新建一个，重复使用。每次拉取完一次后将拉取请求重新放入拉取服务的等待队列 <code>pullRequestQueue</code>，进行下一次拉取。初始化 <code>PullRequest</code> 的地方只有一个，就是重平衡实现 <code>RebalanceImpl</code>，也就是说重平衡是消息拉取唯一的起点。</p><h3 id="_3-3-重平衡队列分配策略" tabindex="-1"><a class="header-anchor" href="#_3-3-重平衡队列分配策略" aria-hidden="true">#</a> 3.3 重平衡队列分配策略</h3><p>RocketMQ 提供了 6 中重平衡策略（队列分配策略）</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202208302336879.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/09/1662312699654.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>AllocateMessageQueueAveragely：（默认）平均分配，推荐使用。</li><li>AllocateMessageQueueAveragelyByCircle：环形寻论平均分配，推荐使用。</li><li>AllocateMessageQueueConsistentHash：一致性哈希。</li><li>AllocateMessageQueueByConfig：根据配置，为每个消费者配置固定的消息队列。</li><li>AllocateMessageQueueByMachineRoom：根据 Broker 配置的机房名，对每隔消费者负载不同 Broker 上的队列。</li></ul><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-rebalanceservice-重平衡线程" tabindex="-1"><a class="header-anchor" href="#_4-1-rebalanceservice-重平衡线程" aria-hidden="true">#</a> 4.1 <code>RebalanceService</code> 重平衡线程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RebalanceService</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceThread</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 等待 20s，调用 ServiceThread#wakeup() 方法可以直接跳过等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span>waitInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 每隔 20s 对所有消费者执行一次重平衡检查</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>mqClientFactory<span class="token punctuation">.</span><span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-rebalanceimpl-重平衡实现" tabindex="-1"><a class="header-anchor" href="#_4-2-rebalanceimpl-重平衡实现" aria-hidden="true">#</a> 4.2 <code>RebalanceImpl</code> 重平衡实现</h3><h4 id="_4-2-1-dorebalance-重平衡入口" tabindex="-1"><a class="header-anchor" href="#_4-2-1-dorebalance-重平衡入口" aria-hidden="true">#</a> 4.2.1 <code>doRebalance</code> 重平衡入口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 消费者重平衡
 * 获取全部的订阅信息，从订阅信息中找到所有的 Topic，每一个 Topic 的队列进行重平衡
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> subTable <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSubscriptionInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subTable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历每个 Topic 的订阅信息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> subTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> topic <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 对每个主题的队列进行重平衡</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rebalanceByTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>topic<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">RETRY_GROUP_TOPIC_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;rebalanceByTopic Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重新分配之后，移除不再属于当前实例的MessageQueue和ProcessQueue</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">truncateMessageQueueNotMyTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-rebalancebytopic-对-topic-进行重平衡" tabindex="-1"><a class="header-anchor" href="#_4-2-2-rebalancebytopic-对-topic-进行重平衡" aria-hidden="true">#</a> 4.2.2 <code>rebalanceByTopic</code> 对 Topic 进行重平衡</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据 Topic 重新进行 MessageQueue 负载（重平衡）
 *
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span>
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rebalanceByTopic</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>messageModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">BROADCASTING</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicSubscribeInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> mqSet<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messageQueueChanged</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> mqSet<span class="token punctuation">,</span> mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;messageQueueChanged {} {} {} {}&quot;</span><span class="token punctuation">,</span>
                             consumerGroup<span class="token punctuation">,</span>
                             topic<span class="token punctuation">,</span>
                             mqSet<span class="token punctuation">,</span>
                             mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, but the topic[{}] not exist.&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token constant">CLUSTERING</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从客户端缓存表中获取 Topic 对应的队列信息</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicSubscribeInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从 Broker 获取当前消费组内所有消费者的客户端 ID</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cidAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findConsumerIdList</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mqSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>topic<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">RETRY_GROUP_TOPIC_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, but the topic[{}] not exist.&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> cidAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {} {}, get consumer id list failed&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSet <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cidAll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Topic 下的所有队列</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqAll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mqAll<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 对该 Topic 下的所有队列和消费者列表进行排序，保证所有消费者分配的结果一致</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mqAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 分配策略</span>
                <span class="token class-name">AllocateMessageQueueStrategy</span> strategy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMessageQueueStrategy<span class="token punctuation">;</span>

                <span class="token comment">// 按策略分配，得到分配给当前消费者实例的队列列表</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> allocateResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    allocateResult <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token comment">//</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup<span class="token punctuation">,</span> <span class="token comment">// 消费组</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 当前消费者ID</span>
                        mqAll<span class="token punctuation">,</span><span class="token comment">// Topic下所有的MessageQueue</span>
                        cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前Topic下，当前消费组中所有的消费者ID</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName={}&quot;</span><span class="token punctuation">,</span> strategy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 得到重平衡后的该消费者分到的消息队列 Set</span>
                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> allocateResultSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>allocateResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    allocateResultSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>allocateResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 对比分配给自己的消息队列是否发生变化</span>
                <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> allocateResultSet<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;rebalanced result changed. allocateMessageQueueStrategyName={}, group={}, topic={}, clientId={}, mqAllSize={}, cidAllSize={}, rebalanceResultSize={}, rebalanceResultSet={}&quot;</span><span class="token punctuation">,</span>
                        strategy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> topic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mqSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        allocateResultSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allocateResultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 回调 MessageQueue 变化事件，</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messageQueueChanged</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> mqSet<span class="token punctuation">,</span> allocateResultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-updateprocessqueuetableinrebalance-重平衡后更新订阅的队列和处理队列表" tabindex="-1"><a class="header-anchor" href="#_4-2-3-updateprocessqueuetableinrebalance-重平衡后更新订阅的队列和处理队列表" aria-hidden="true">#</a> 4.2.3 <code>updateProcessQueueTableInRebalance</code> 重平衡后更新订阅的队列和处理队列表</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 重平衡后更新 ProcessQueue 表
 * 丢弃不再消费的队列，为新增的队列新建 ProcessQueue 和 PullRequest
 *
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span> 主题
 * <span class="token keyword">@param</span> <span class="token parameter">mqSet</span> 重平衡后该消费者新分配到的的消息队列
 * <span class="token keyword">@param</span> <span class="token parameter">isOrder</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqSet<span class="token punctuation">,</span>
                                                   <span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// 遍历本地缓存的消费者分到的消息队列，判断要丢弃的队列并丢弃</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProcessQueue</span> pq <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果新分配到的消息队列集合中不含有老的消息队列，丢弃老的处理队列</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mqSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 该 ProcessQueue 中不会有消息被消费</span>
                pq<span class="token punctuation">.</span><span class="token function">setDropped</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 移除消费队列，移除前持久化</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeUnnecessaryMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, remove unnecessary mq, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">isPullExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                     * 如果Reblance之后的mq集合包含该MessageQueue,但是ProcessQueue已经太久没有拉取数据（上次拉取消息的时间距离现在超过设置时间）
                     */</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">consumeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> <span class="token constant">CONSUME_ACTIVELY</span><span class="token operator">:</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token constant">CONSUME_PASSIVELY</span><span class="token operator">:</span>
                        <span class="token doc-comment comment">/**
                             * PushConsumer为被动消费
                             * 如果是PUSH，则丢弃ProcessQueue
                             * 同时删除MessageQueue
                             */</span>
                        pq<span class="token punctuation">.</span><span class="token function">setDropped</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeUnnecessaryMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG]doRebalance, {}, remove unnecessary mq, {}, because pull is pause, so try to fixed it&quot;</span><span class="token punctuation">,</span>
                                      consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">default</span><span class="token operator">:</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 遍历新分配的 MessageQueue，对于新分配的，创建 PullRequest 启动拉取</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> pullRequestList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 为每个 MessageQueue 新建一个 PullRequest</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageQueue</span> mq <span class="token operator">:</span> mqSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 本地缓存的 ProcessQueue 中不包含，表示新增队列</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isOrder <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, add a new mq failed, {}, because lock failed&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 从内存中移除该 MessageQueue 的消费进度（老的进度不需要）</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeDirtyOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ProcessQueue</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 计算当前 MessageQueue 应该从哪里开始拉取消息</span>
            <span class="token keyword">long</span> nextOffset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 计算并从偏移量存储中读取下次拉取的偏移量</span>
                nextOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computePullFromWhereWithException</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, compute offset failed, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextOffset <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 添加 MessageQueue 和 ProcessQueue 的映射关系</span>
                <span class="token class-name">ProcessQueue</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, mq already exists, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 添加成功，创建新的 PullRequest</span>
                    <span class="token comment">// 唯一的创建 PullRequest 的地方</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, add a new mq, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setNextOffset</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setProcessQueue</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequestList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, add new mq failed, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 将新建的 PullRequest 加入消息拉取线程 PullMessageService，开始拉取</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchPullRequest</span><span class="token punctuation">(</span>pullRequestList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> changed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-4-messagequeuechanged" tabindex="-1"><a class="header-anchor" href="#_4-2-4-messagequeuechanged" aria-hidden="true">#</a> 4.2.4 <code>MessageQueueChanged</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RebalancePushImpl.java</span>
<span class="token doc-comment comment">/**
 * 如果消费的 MessageQueue 变化，上报 Broker，将订阅关系发送给 Broker
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span>
 * <span class="token keyword">@param</span> <span class="token parameter">mqAll</span>
 * <span class="token keyword">@param</span> <span class="token parameter">mqDivided</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">messageQueueChanged</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqAll<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqDivided<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
         * When rebalance result changed, should update subscription&#39;s version to notify broker.
         * Fix: inconsistency subscription may lead to consumer miss messages.
         */</span>
    <span class="token class-name">SubscriptionData</span> subscriptionData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptionInner<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> newVersion <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} Rebalance changed, also update version: {}, {}&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> subscriptionData<span class="token punctuation">.</span><span class="token function">getSubVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    subscriptionData<span class="token punctuation">.</span><span class="token function">setSubVersion</span><span class="token punctuation">(</span>newVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> currentQueueCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentQueueCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Topic 维度流控，默认为 -1，即不流控</span>
        <span class="token keyword">int</span> pullThresholdForTopic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPullThresholdForTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pullThresholdForTopic <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> newVal <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pullThresholdForTopic <span class="token operator">/</span> currentQueueCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The pullThresholdForQueue is changed from {} to {}&quot;</span><span class="token punctuation">,</span>
                     <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPullThresholdForQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置每个队列的拉取流控</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPullThresholdForQueue</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Topic 维度拉取大小流控</span>
        <span class="token keyword">int</span> pullThresholdSizeForTopic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPullThresholdSizeForTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pullThresholdSizeForTopic <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> newVal <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pullThresholdSizeForTopic <span class="token operator">/</span> currentQueueCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The pullThresholdSizeForQueue is changed from {} to {}&quot;</span><span class="token punctuation">,</span>
                     <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPullThresholdSizeForQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPullThresholdSizeForQueue</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// notify broker</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getmQClientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendHeartbeatToAllBrokerWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,45);function m(v,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("原文地址："),n("a",i,[s("http://hscarb.github.io/rocketmq/20220830-rocketmq-consumer-3-rebalance.html"),e(a)])]),k,n("blockquote",null,[n("p",null,[n("a",r,[s("RocketMQ 5.0 中的 POP 消费者特性"),e(a)]),s(" 支持将重平衡流程在服务端实现，解决了消费端异常 Hang 住时其负载的队列可能会堆积的问题。")])]),d])}const f=p(u,[["render",m],["__file","20220830-rocketmq-consumer-3-rebalance.html.vue"]]);export{f as default};
