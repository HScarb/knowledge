import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as u,a as n,b as s,d as t,e as p}from"./app-eaa093f0.js";const l={},i={href:"http://hscarb.github.io/rocketmq/20230304-rocketmq-light-message-queue.html",target:"_blank",rel:"noopener noreferrer"},k=p('<h1 id="rocketmq-轻量级队列-light-message-queue-rip-28-原理详解-源码解析" tabindex="-1"><a class="header-anchor" href="#rocketmq-轻量级队列-light-message-queue-rip-28-原理详解-源码解析" aria-hidden="true">#</a> RocketMQ 轻量级队列 Light Message Queue（RIP-28）原理详解 &amp; 源码解析</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><h3 id="_1-1-引入原因" tabindex="-1"><a class="header-anchor" href="#_1-1-引入原因" aria-hidden="true">#</a> 1.1 引入原因</h3><p>在 RocketMQ 4.9.3 版本中，引入了轻量级队列（以下简称 LMQ）特性。</p>',4),r={href:"https://github.com/apache/rocketmq/pull/3694",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"这个特性主要是为了支持在一些消息场景下可能存在的大量队列场景。比如 MQTT 的多级主题和 AMQP 的队列，这些队列的数量可能非常多。而 RocketMQ 的 Topic 资源密集，很难支持百万级别甚至更多数量。Light Message Queue 特性就是为了解决 IOT 设备和 AMQP 协议可能需要的海量队列的场景。",-1),m={href:"https://github.com/apache/rocketmq-mqtt",target:"_blank",rel:"noopener noreferrer"},v=p(`<h3 id="_1-2-使用方法" tabindex="-1"><a class="header-anchor" href="#_1-2-使用方法" aria-hidden="true">#</a> 1.2 使用方法</h3><h4 id="_1-2-1-broker-启动配置" tabindex="-1"><a class="header-anchor" href="#_1-2-1-broker-启动配置" aria-hidden="true">#</a> 1.2.1 Broker 启动配置</h4><p>broker.conf 文件需要增加以下的配置项，开启 LMQ 开关和多队列转发开关，这样才能识别 LMQ 相关消息属性，分发消息到 LMQ。</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>enableLmq = true
enableMultiDispatch = true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-生产消息" tabindex="-1"><a class="header-anchor" href="#_1-2-2-生产消息" aria-hidden="true">#</a> 1.2.2 生产消息</h4><p>发送消息的时候通过设置 <code>INNER_MULTI_DISPATCH</code> 属性，分发消息到多个 LMQ，多个 LMQ 之间使用逗号分割，名称前缀必须是 %LMQ%，这样 broker 就可以识别 LMQ。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;name-server1-ip:9876;name-server2-ip:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/*
* Create a message instance, specifying topic, tag and message body.
*/</span>
<span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span> <span class="token comment">/* Topic */</span><span class="token punctuation">,</span>
                          <span class="token string">&quot;TagA&quot;</span> <span class="token comment">/* Tag */</span><span class="token punctuation">,</span>
                          <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span> <span class="token comment">/* Message body */</span>
                         <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
* INNER_MULTI_DISPATCH property and PREFIX must start as &quot;%LMQ%&quot;,
* If it is multiple LMQ, need to use “,” split
*/</span>
message<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">&quot;INNER_MULTI_DISPATCH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%LMQ%123,%LMQ%456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
* Call send message to deliver message to one of brokers.
*/</span>
<span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-消费消息" tabindex="-1"><a class="header-anchor" href="#_1-2-3-消费消息" aria-hidden="true">#</a> 1.2.3 消费消息</h4><p>LMQ 在每个 broker 上只有一个 queue，queueId 为 0， 指明要消费的 LMQ 名称，就可以拉取消息进行消费。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQPullConsumer</span> defaultMQPullConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPullConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;name-server1-ip:9876;name-server2-ip:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setVipChannelEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span><span class="token string">&quot;CID_RMQ_SYS_LMQ_TEST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setInstanceName</span><span class="token punctuation">(</span><span class="token string">&quot;CID_RMQ_SYS_LMQ_TEST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setRegisterTopics</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setBrokerSuspendMaxTimeMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">setConsumerTimeoutMillisWhenSuspend</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> brokerName <span class="token operator">=</span> <span class="token string">&quot;set broker Name&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token string">&quot;%LMQ%123&quot;</span><span class="token punctuation">,</span> brokerName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">getDefaultMQPullConsumerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRebalanceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getmQClientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> offset <span class="token operator">=</span> defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">maxOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>

defaultMQPullConsumer<span class="token punctuation">.</span><span class="token function">pullBlockIfNotFound</span><span class="token punctuation">(</span>
                mq<span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">PullCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">PullResult</span> pullResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> pullResult<span class="token punctuation">.</span><span class="token function">getMsgFoundList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>    
                    <span class="token punctuation">}</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       
                    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-概要设计" tabindex="-1"><a class="header-anchor" href="#_2-概要设计" aria-hidden="true">#</a> 2. 概要设计</h2><h3 id="_2-1-当前痛点" tabindex="-1"><a class="header-anchor" href="#_2-1-当前痛点" aria-hidden="true">#</a> 2.1 当前痛点</h3><p>在 AMQP 协议中，消息发送到 Exchange，由 Exchange 将消息分发到一个或多个 Queue 中。在 RocketMQ 实现 AMQP 协议时，如果将 Topic 与 Queue 对应，就意味着同一条消息会保存到多个 Topic，在磁盘上存储多份。</p><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202302050005953.png" style="zoom:67%;"><p>MQTT 协议的 Topic 则可以看作类似文件路径的字符串，可以有多个层级，如 <code>home/kitchen/coffeemaker</code>。订阅 Topic 时可以进行通配，以订阅一组路径的 Topic。在 IOT 场景下，Topic 数量可能会非常多。</p><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202302050055405.png" style="zoom:50%;"><p>RocketMQ 原本的 Topic 是资源密集型的，并不适合海量 Topic 的场景。这体现在消息数据的存储和 Topic 元数据上。</p><ol><li>Topic 中的每个消息数据都会在磁盘上存储。</li><li>所有 Topic 的元数据会上报到 NameServer，存储在内存中。</li></ol><p>当存在大量 Topic 时就会有严重的数据放大，占用大量磁盘存储空间和内存。</p><h3 id="_2-1-实现思想" tabindex="-1"><a class="header-anchor" href="#_2-1-实现思想" aria-hidden="true">#</a> 2.1 实现思想</h3><p>对于上面两个痛点，LMQ 的实现思想是减少数据的重复存储，也减少元数据的内存占用。</p><p>对于队列数据重复保存的问题，可以想到消费者消费时实际是读取消费队列 ConsumeQueue 进行消费，ConsumeQueue 将消费者和消息存储的 CommitLog 分开。那么可以用消费队列来表示一个 Topic，不同的消费队列可以复用 CommitLog 中存储的数据，但是对消费者来说看到的是多个消费队列。</p><p>此外，用消费队列表示的好处还在于，它不会作为元数据上报到 NameServer。不过消费者需要在消费时指定拉取这个消费队列才可以消费。</p><p>那么轻量级队列的实现也就呼之欲出：用消费队列来表示轻量级队列，消息存到 CommitLog 后分发构建索引时，构建轻量级队列。这样，一个 Topic 构建的队列除了它本身的读写队列以外，还可以包含大量轻量级队列。这样的队列模型也有助于实现 MQTT 与 AMQP 协议的兼容。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202302030055437.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><h3 id="_3-1-消息生产和消费" tabindex="-1"><a class="header-anchor" href="#_3-1-消息生产和消费" aria-hidden="true">#</a> 3.1 消息生产和消费</h3><p>LMQ 依赖于一个父 Topic 存在，父 Topic 的消息分发构建消费索引时会构建 LMQ。LMQ 不需要提前创建，只需要在生产消息时带有需要分发的 LMQ 属性，就会在分发时构建。</p><p>在消费时，LMQ 不在对应 Topic 上报的元数据中，订阅 Topic 也无法消费到其 LMQ。要消费 LMQ，需要显式指定拉取或订阅的队列信息才可以。因为 LMQ 仅仅是一个队列，所以它的队列 ID 为 0。</p><h3 id="_3-2-commitlog-分发到-lmq" tabindex="-1"><a class="header-anchor" href="#_3-2-commitlog-分发到-lmq" aria-hidden="true">#</a> 3.2 CommitLog 分发到 LMQ</h3><p>LMQ 实现的重点就是 CommitLog 在生成消费索引时一并生成 LMQ。生成 LMQ 消息的主要步骤有两步</p><ol><li>在消息存入 CommitLog 前，解析消息属性中是否有需要分发的 LMQ 属性，如果有则解析该属性，查询要分发的 LMQ 当前的逻辑偏移量。然后把这些属性封装放入消息属性中，以便构建 LMQ 时使用。</li><li>消息存入 CommitLog 后，索引构建线程 <code>ReputMessageService</code> 为每个消息构建消费队列时，会检查消息属性，判断是否需要分发构建 LMQ。如果属性中有 LMQ 和其逻辑偏移量，则从该偏移量开始构建 LMQ。</li></ol><p>处理 LMQ 消息分发的逻辑主要在 <code>MultiDispatch</code> 类中（4.9.x 版本），最新的 5.x 版本引入了 <code>ConsumeQueueInterface</code> 将这部分代码重构，放到 <code>ConsumeQueue</code> 中。</p><hr><p>分发 LMQ 逻辑如下：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2023/03/1678106673815.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>消息存到 CommitLog 之前，先调用 <code>MultiDispatch.wrapMultiDispatch()</code> （5.x 中 <code>ConsumeQueue#assignQueueOffset()</code>）方法，获取消息属性中需要分发的 LMQ 信息，然后查询 LMQ 当前的偏移量，把 LMQ 消息需要分发的新偏移量也放入消息属性。</li><li>消息分发，生成消费索引</li><li>生成消息的消费索引之后，如果需要分发到 LMQ，则执行 <code>ConsumeQueue.multiDispatchLmqQueue()</code> 方法进行分发。</li></ol><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><p>（以 5.0.x 的源码为例）</p><h3 id="_4-1-查询-lmq-偏移量" tabindex="-1"><a class="header-anchor" href="#_4-1-查询-lmq-偏移量" aria-hidden="true">#</a> 4.1 查询 LMQ 偏移量</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// CommitLog.java</span>
<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncPutMessages</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageExtBatch</span> messageExtBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        defaultMessageStore<span class="token punctuation">.</span><span class="token function">assignOffset</span><span class="token punctuation">(</span>messageExtBatch<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> putMessageContext<span class="token punctuation">.</span><span class="token function">getBatchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
        result <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">appendMessages</span><span class="token punctuation">(</span>messageExtBatch<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appendMessageCallback<span class="token punctuation">,</span> putMessageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 查询要分发的队列的逻辑偏移量，放入消息属性
 * 
 * <span class="token keyword">@param</span> <span class="token parameter">queueOffsetAssigner</span> the delegated queue offset assigner
 * <span class="token keyword">@param</span> <span class="token parameter">msg</span> message itself
 * <span class="token keyword">@param</span> <span class="token parameter">messageNum</span> message number
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assignQueueOffset</span><span class="token punctuation">(</span><span class="token class-name">QueueOffsetAssigner</span> queueOffsetAssigner<span class="token punctuation">,</span> <span class="token class-name">MessageExtBrokerInner</span> msg<span class="token punctuation">,</span>
    <span class="token keyword">short</span> messageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> topicQueueKey <span class="token operator">=</span> <span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> queueOffset <span class="token operator">=</span> queueOffsetAssigner<span class="token punctuation">.</span><span class="token function">assignQueueOffset</span><span class="token punctuation">(</span>topicQueueKey<span class="token punctuation">,</span> messageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg<span class="token punctuation">.</span><span class="token function">setQueueOffset</span><span class="token punctuation">(</span>queueOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 轻量级队列分发准备，为消息添加多队列分发属性</span>
    <span class="token comment">// For LMQ</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableMultiDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> multiDispatchQueue <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_INNER_MULTI_DISPATCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>multiDispatchQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从原始消息属性中获取分发的队列列表</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queues <span class="token operator">=</span> multiDispatchQueue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MULTI_DISPATCH_QUEUE_SPLITTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从队列偏移量表中查询当前队列偏移量</span>
    <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queueOffsets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span>queues<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queues<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">queueKey</span><span class="token punctuation">(</span>queues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableLmq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">isLmq</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            queueOffsets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> queueOffsetAssigner<span class="token punctuation">.</span><span class="token function">assignLmqOffset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将队列偏移量作为属性存入消息</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_INNER_MULTI_QUEUE_OFFSET</span><span class="token punctuation">,</span>
        <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>queueOffsets<span class="token punctuation">,</span> <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MULTI_DISPATCH_QUEUE_SPLITTER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移除消息的 WAIT_STORE 属性，节省存储空间</span>
    <span class="token function">removeWaitStorePropertyString</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-分发-lmq" tabindex="-1"><a class="header-anchor" href="#_4-2-分发-lmq" aria-hidden="true">#</a> 4.2 分发 LMQ</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putMessagePositionInfoWrapper</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> maxRetries <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> canWrite <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getRunningFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCQWriteable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写入ConsumeQueue，重试最多30次</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxRetries <span class="token operator">&amp;&amp;</span> canWrite<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> tagsCode <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExtWriteEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span> cqExtUnit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cqExtUnit<span class="token punctuation">.</span><span class="token function">setFilterBitMap</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cqExtUnit<span class="token punctuation">.</span><span class="token function">setMsgStoreTime</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cqExtUnit<span class="token punctuation">.</span><span class="token function">setTagsCode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> extAddr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>consumeQueueExt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cqExtUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExtAddr</span><span class="token punctuation">(</span>extAddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tagsCode <span class="token operator">=</span> extAddr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Save consume queue extend fail, So just save tagsCode! {}, topic:{}, queueId:{}, offset:{}&quot;</span><span class="token punctuation">,</span> cqExtUnit<span class="token punctuation">,</span>
                    topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 写入ConsumeQueue，注意这里还未强制刷盘</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putMessagePositionInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            request<span class="token punctuation">.</span><span class="token function">getMsgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tagsCode<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getConsumeQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是SLAVE，在写入成功后更新CheckPoint中的最新写入时间。是为了修复在SLAVE中ConsumeQueue异常恢复慢的问题</span>
            <span class="token comment">// 因为在当前的设计中，没有更新SLAVE的消费队列时间戳到CheckPoint中的逻辑，所以在SLAVE中在doReput()逻辑中更新该时间戳</span>
            <span class="token comment">// https://github.com/apache/rocketmq/pull/1455</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">||</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPhysicMsgTimestamp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLogicsMsgTimestamp</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkMultiDispatchQueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">multiDispatchLmqQueue</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> maxRetries<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 只有一种情况会失败，创建新的MapedFile时报错或者超时</span>
            <span class="token comment">// 写入失败，等待1s继续写入，直到30次都失败</span>
            <span class="token comment">// XXX: warn and notify me</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG]put commit log position info to &quot;</span> <span class="token operator">+</span> topic <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> queueId <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">+</span> <span class="token string">&quot; failed, retry &quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// XXX: warn and notify me</span>
    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG]consume queue can not write, {} {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getRunningFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeLogicsQueueError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 判断消息是否需要执行多队列分发
 *
 * <span class="token keyword">@param</span> <span class="token parameter">dispatchRequest</span> 投递请求
 * <span class="token keyword">@return</span> 是否需要分发
 */</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkMultiDispatchQueue</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> dispatchRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableMultiDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prop <span class="token operator">=</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> prop<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> multiDispatchQueue <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_INNER_MULTI_DISPATCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> multiQueueOffset <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_INNER_MULTI_QUEUE_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>multiDispatchQueue<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>multiQueueOffset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Light message queue 分发到多个队列
 *
 * <span class="token keyword">@param</span> <span class="token parameter">request</span> 分发请求
 * <span class="token keyword">@param</span> <span class="token parameter">maxRetries</span> 最大重试次数，默认 30
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">multiDispatchLmqQueue</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRetries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prop <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> multiDispatchQueue <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_INNER_MULTI_DISPATCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> multiQueueOffset <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_INNER_MULTI_QUEUE_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queues <span class="token operator">=</span> multiDispatchQueue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MULTI_DISPATCH_QUEUE_SPLITTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queueOffsets <span class="token operator">=</span> multiQueueOffset<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MULTI_DISPATCH_QUEUE_SPLITTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queues<span class="token punctuation">.</span>length <span class="token operator">!=</span> queueOffsets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[bug] queues.length!=queueOffsets.length &quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queues<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> queueName <span class="token operator">=</span> queues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> queueOffset <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>queueOffsets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> queueId <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Light message queue 在每个 broker 上只有一个 queue，queueId 为 0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableLmq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">isLmq</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            queueId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">doDispatchLmqQueue</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> maxRetries<span class="token punctuation">,</span> queueName<span class="token punctuation">,</span> queueOffset<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 分发消息到消费索引
 *
 * <span class="token keyword">@param</span> <span class="token parameter">request</span>
 * <span class="token keyword">@param</span> <span class="token parameter">maxRetries</span>
 * <span class="token keyword">@param</span> <span class="token parameter">queueName</span>
 * <span class="token keyword">@param</span> <span class="token parameter">queueOffset</span>
 * <span class="token keyword">@param</span> <span class="token parameter">queueId</span>
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doDispatchLmqQueue</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRetries<span class="token punctuation">,</span> <span class="token class-name">String</span> queueName<span class="token punctuation">,</span> <span class="token keyword">long</span> queueOffset<span class="token punctuation">,</span>
                                <span class="token keyword">int</span> queueId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查找 ConsumeQueue</span>
    <span class="token class-name">ConsumeQueueInterface</span> cq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">findConsumeQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> canWrite <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getRunningFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCQWriteable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxRetries <span class="token operator">&amp;&amp;</span> canWrite<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 向 ConsumeQueue 写入索引项</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConsumeQueue</span><span class="token punctuation">)</span> cq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putMessagePositionInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMsgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                request<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                queueOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG]put commit log position info to &quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> queueId <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot; failed, retry &quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,45),g={href:"https://docs.google.com/document/d/1wq7crKF67fWv5h13TPHtCpHs-B9X8ZmaA-RM6yVbVbY",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/Example_LMQ.md",target:"_blank",rel:"noopener noreferrer"},f=n("hr",null,null,-1),h=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),q=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function M(y,Q){const a=o("ExternalLinkIcon");return c(),u("div",null,[n("p",null,[s("原文地址："),n("a",i,[s("http://hscarb.github.io/rocketmq/20230304-rocketmq-light-message-queue.html"),t(a)])]),k,n("p",null,[s("合入PR："),n("a",r,[s("https://github.com/apache/rocketmq/pull/3694"),t(a)])]),d,n("p",null,[n("a",m,[s("rocketmq-mqtt"),t(a)]),s(" 项目就应用了 LMQ，实现了 RocketMQ 对 MQTT 协议的兼容。")]),v,n("ul",null,[n("li",null,[n("a",g,[s("RIP28-Llight message queue (LMQ)"),t(a)])]),n("li",null,[n("a",b,[s("RocketMQ LMQ 官方文档"),t(a)])])]),f,h,q])}const L=e(l,[["render",M],["__file","20230304-rocketmq-light-message-queue.html.vue"]]);export{L as default};
