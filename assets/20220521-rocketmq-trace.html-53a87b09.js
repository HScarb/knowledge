import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-eaa093f0.js";const i={},u={href:"http://hscarb.github.io/rocketmq/20220521-rocketmq-trace.html",target:"_blank",rel:"noopener noreferrer"},k=p('<h1 id="rocketmq-消息轨迹" tabindex="-1"><a class="header-anchor" href="#rocketmq-消息轨迹" aria-hidden="true">#</a> RocketMQ 消息轨迹</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>发往消息队列中的消息存在一些可观测性上的问题。由于消息队列需要高性能、大量地处理消息，而在 Broker 端记录消息的方式（使用日志等）势必会对性能造成非常大的损耗，所以对于消息是否成功发送到 Broker、Broker 又是否成功将消息投递给消费者这些动作，缺乏观测手段。这样就会造成生产方和消费方互相“扯皮”的现象：一条消息没有被成功消费，到底是生产方没有发送，还是消费方没有消费成功。</p><p>RocketMQ 在 4.4.0 版本正式引入了消息轨迹功能，它可以用来记录消息发送、消息消费的信息，详细记录消息各个处理环节的日志。</p><h2 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例" aria-hidden="true">#</a> 2. 使用示例</h2>',5),r={href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/msg_trace/user_guide.md",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/apache/rocketmq-spring/wiki/%E6%B6%88%E6%81%AF%E8%BD%A8%E8%BF%B9",target:"_blank",rel:"noopener noreferrer"},m=p(`<ul><li>物理 IO 隔离模式</li></ul><p>对于消息轨迹数据量较大的场景，可以在RocketMQ集群中选择其中一个Broker节点专用于存储消息轨迹，使得用户普通的消息数据与消息轨迹数据的物理IO完全隔离，互不影响。在该模式下，RockeMQ集群中至少有两个Broker节点，其中一个Broker节点定义为存储消息轨迹数据的服务端。</p><h3 id="_2-1-broker-端配置" tabindex="-1"><a class="header-anchor" href="#_2-1-broker-端配置" aria-hidden="true">#</a> 2.1 Broker 端配置</h3><p>在 broker.conf 中启用消息轨迹功能，该功能默认关闭。</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>### if msg tracing is open,the flag will be true
traceTopicEnable=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意需要重启 Broker 才可以应用改动。</p><h3 id="_2-2-生产者开启消息轨迹" tabindex="-1"><a class="header-anchor" href="#_2-2-生产者开启消息轨迹" aria-hidden="true">#</a> 2.2 生产者开启消息轨迹</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 构建生产者。第二个参数即启用消息轨迹，第三个参数（可选）可以指定保存消息轨迹的 Topic</span>
<span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;ProducerGroupName&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;XX.XX.XX.XX1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 建议为消息指定 Key，便于对消息进行高性能查询。这里的 OrderID188 即消息的 Key</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;OrderID188&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-消费者开启消息轨迹" tabindex="-1"><a class="header-anchor" href="#_2-3-消费者开启消息轨迹" aria-hidden="true">#</a> 2.3 消费者开启消息轨迹</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 构建消费者。第二个参数即启用消息轨迹，第三个参数（可选）可以指定保存消息轨迹的 Topic</span>
<span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;CID_JODIE_1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span><span class="token constant">CONSUME_FROM_FIRST_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">setConsumeTimestamp</span><span class="token punctuation">(</span><span class="token string">&quot;20181109221800&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s Receive New Messages: %s %n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer Started.%n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-使用-mqadmin-查看消息轨迹" tabindex="-1"><a class="header-anchor" href="#_2-4-使用-mqadmin-查看消息轨迹" aria-hidden="true">#</a> 2.4 使用 mqadmin 查看消息轨迹</h3><ul><li>查询轨迹</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./mqadmin QueryMsgTraceById <span class="token parameter variable">-n</span> <span class="token number">127.0</span>.0.1:9876 <span class="token parameter variable">-i</span> <span class="token string">&quot;message-id&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查询轨迹结果</li></ul><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>RocketMQLog<span class="token operator">:</span><span class="token level warning important">WARN</span> No appenders could be found for logger <span class="token operator">(</span>io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>PlatformDependent0<span class="token operator">)</span><span class="token punctuation">.</span>
RocketMQLog<span class="token operator">:</span><span class="token level warning important">WARN</span> Please initialize the logger system properly<span class="token punctuation">.</span>
<span class="token operator">#</span>Type      <span class="token operator">#</span>ProducerGroup       <span class="token operator">#</span>ClientHost          <span class="token operator">#</span>SendTime            <span class="token operator">#</span>CostTimes <span class="token operator">#</span>Status
Pub        <span class="token number">1623305799667</span>        <span class="token domain constant">xxx.xxx.xxx.xxx</span>       <span class="token date number">2021-06-10</span> <span class="token time number">14:16:40</span>  <span class="token number">131ms</span>      success
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-使用-rocketmq-dashboard-查看消息轨迹" tabindex="-1"><a class="header-anchor" href="#_2-5-使用-rocketmq-dashboard-查看消息轨迹" aria-hidden="true">#</a> 2.5 使用 rocketmq-dashboard 查看消息轨迹</h3><p>RocketMQ 的官方 DashBoard 支持消息轨迹的查询</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205212211781.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205212235754.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-概要设计" tabindex="-1"><a class="header-anchor" href="#_3-概要设计" aria-hidden="true">#</a> 3. 概要设计</h2><p>在设计消息轨迹功能时，能想到的要点主要有如下几点</p><ol><li>如何采集轨迹数据</li><li>采集的轨迹数据要包含哪些数据</li><li>如何存储轨迹数据</li><li>如何将轨迹数据发送至存储，而尽可能不影响正常消息发送的性能</li></ol><p>首先是如何采集数据。消息轨迹关注是否被生产和消费，以及消息生产、消费相关的数据，所以需要在消息生产和消费时采集一些数据。</p><p>RocketMQ 提供了消息生产和消费的钩子，可以在消息生产、消费前后添加自定义的逻辑，于是轨迹数据的采集可以放在钩子函数中进行。</p><p>对于消息的存储，处于不添加额外依赖的考虑，存储在 Broker 是最佳的选择。消息轨迹的数据可以封装成消息，与普通消息公用存储，存在 Broker 中。</p><p>那么如何在发送普通消息的同时发送消息轨迹消息？为了保证普通消息发送的性能，势必使用异步发送。此外，由于消息轨迹数据没有普通消息那样强的实时性要求，所以可以通过批量发送的方式减少性能损耗。</p><h3 id="_3-1-主要流程" tabindex="-1"><a class="header-anchor" href="#_3-1-主要流程" aria-hidden="true">#</a> 3.1 主要流程</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778556.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里以生产者为例，生产者在发送消息前后的钩子函数中分别添加消息轨迹采集逻辑，随后将轨迹信息交给一个异步线程池处理。</p><p>这个异步线程池批量将轨迹信息打包发送给 Broker，完成消息轨迹的保存。</p><h3 id="_3-2-存储设计" tabindex="-1"><a class="header-anchor" href="#_3-2-存储设计" aria-hidden="true">#</a> 3.2 存储设计</h3><p>默认情况下，消息轨迹保存在一个默认的 Topic 中，<code>RMQ_SYS_TRACE_TOPIC</code>，这个 Topic 只有一个队列，所以只会存在一个 Broker。在使用时可以在生产者和消费者上指定消息轨迹发送的自定义 Topic。</p><p>官方将消息轨迹存储的模式分为两种：普通模式和物理 IO 隔离模式。</p><ul><li><p>普通模式即集群中每个 Broker 都可以存储消息轨迹数据。</p></li><li><p>物理 IO 隔离模式即单独选一个 Broker 只作为消息轨迹接收的节点，这样就不会增加其他 Broker 的负载。</p></li></ul><h2 id="_4-详细设计" tabindex="-1"><a class="header-anchor" href="#_4-详细设计" aria-hidden="true">#</a> 4. 详细设计</h2><h3 id="_4-1-轨迹数据采集" tabindex="-1"><a class="header-anchor" href="#_4-1-轨迹数据采集" aria-hidden="true">#</a> 4.1 轨迹数据采集</h3><p>前面说到，采集消息轨迹数据的最佳方法就是在发送和消费时在钩子函数中进行。</p><p>所以如果客户端创建时开启了消息轨迹功能，那么将新建处理轨迹的钩子，注册到生产者或消费者实例中去。</p><p>生产者的钩子类是 <code>SendMessageTraceHookImpl</code>，消费者的钩子类是 <code>ConsumeMessageTraceHookImpl</code>。</p><p>在 before 方法中，会构建一个轨迹上下文，将数据采集到该上下文中。</p><p>在 after 方法中，采集数据并将该上下文信息交给轨迹数据异步发送线程池 <code>AsyncTraceDispatcher</code> 处理，将会保存到一个 BlockingQueue 中由工作线程消费。</p><h3 id="_4-2-轨迹数据发送" tabindex="-1"><a class="header-anchor" href="#_4-2-轨迹数据发送" aria-hidden="true">#</a> 4.2 轨迹数据发送</h3><p>发送逻辑采用生产-消费模式，由 <code>AsyncTraceDispatcher</code>处理。 一个工作线程负责消费客户端实例提交过来的轨迹数据。</p><p>工作线程每次消费一批轨迹数据，将轨迹数据打包后提交给发送线程池。发送线程池将这些轨迹消息发送给指定的 Broker。</p><h2 id="_5-源码解析" tabindex="-1"><a class="header-anchor" href="#_5-源码解析" aria-hidden="true">#</a> 5. 源码解析</h2><h3 id="_5-1-消息轨迹数据模型" tabindex="-1"><a class="header-anchor" href="#_5-1-消息轨迹数据模型" aria-hidden="true">#</a> 5.1 消息轨迹数据模型</h3><p>消息轨迹的模型类是 <code>TraceContext</code>，其中的 <code>traceBeans</code> 列表保存着具体消息的轨迹信息。</p><p>该列表在消息生产时永远只有 1 条数据，即生产发送的消息。</p><p>在消费时可能由多条数据，因为消费者每次会消费多条消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * The context of Trace
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceContext</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceContext</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 轨迹类型。Pub：消息发送，SubBefore：消费者消费前，SubAfter：消费者消费后</span>
    <span class="token keyword">private</span> <span class="token class-name">TraceType</span> traceType<span class="token punctuation">;</span>
    <span class="token comment">// 时间戳</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Broker 所在区域 ID，取自 BrokerConfig#regionId</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> regionId <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> regionName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 生产者或消费者组名称</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> groupName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 耗时</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> costTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送/消费成功</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 在消费时使用，消费端的请求 ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> requestId <span class="token operator">=</span> <span class="token class-name">MessageClientIDSetter</span><span class="token punctuation">.</span><span class="token function">createUniqID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消费状态码</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> contextCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息的轨迹数据</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceBean</span><span class="token punctuation">&gt;</span></span> traceBeans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCAL_ADDRESS</span> <span class="token operator">=</span> <span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">ipToIPv4Str</span><span class="token punctuation">(</span><span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">getIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msgId <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息偏移量 ID，包含了 Broker 的 IP 和消息存储在 Broker 上的偏移量</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> offsetMsgId <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tags <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> keys <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 生产者采集时为 Broker 的 IP，消费者采集时为消费者 IP</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> storeHost <span class="token operator">=</span> <span class="token constant">LOCAL_ADDRESS</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端 IP。生产者采集时为生产者的 IP，消费者采集时为消费者 IP</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> clientHost <span class="token operator">=</span> <span class="token constant">LOCAL_ADDRESS</span><span class="token punctuation">;</span>
    <span class="token comment">// 存储时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> storeTime<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> retryTimes<span class="token punctuation">;</span>
    <span class="token comment">// 消息体长度</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> bodyLength<span class="token punctuation">;</span>
    <span class="token comment">// 消息类型</span>
    <span class="token keyword">private</span> <span class="token class-name">MessageType</span> msgType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalTransactionState</span> transactionState<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> transactionId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> fromTransactionCheck<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-消息轨迹数据采集" tabindex="-1"><a class="header-anchor" href="#_5-2-消息轨迹数据采集" aria-hidden="true">#</a> 5.2 消息轨迹数据采集</h3><p>这里以消费者为例</p><h4 id="_5-2-1-注册消息轨迹采集钩子" tabindex="-1"><a class="header-anchor" href="#_5-2-1-注册消息轨迹采集钩子" aria-hidden="true">#</a> 5.2.1 注册消息轨迹采集钩子</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> namespace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">,</span>
                             <span class="token class-name">AllocateMessageQueueStrategy</span> allocateMessageQueueStrategy<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableMsgTrace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> customizedTraceTopic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup <span class="token operator">=</span> consumerGroup<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMessageQueueStrategy <span class="token operator">=</span> allocateMessageQueueStrategy<span class="token punctuation">;</span>
    defaultMQPushConsumerImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果开启消息轨迹</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableMsgTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建消息轨迹异步发送者</span>
            <span class="token class-name">AsyncTraceDispatcher</span> dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncTraceDispatcher</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> <span class="token class-name">TraceDispatcher<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">CONSUME</span><span class="token punctuation">,</span> customizedTraceTopic<span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dispatcher<span class="token punctuation">.</span><span class="token function">setHostConsumer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            traceDispatcher <span class="token operator">=</span> dispatcher<span class="token punctuation">;</span>
            <span class="token comment">// 注册消息轨迹采集钩子</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDefaultMQPushConsumerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerConsumeMessageHook</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">ConsumeMessageTraceHookImpl</span><span class="token punctuation">(</span>traceDispatcher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;system mqtrace hook init failed ,maybe can&#39;t send msg trace data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-2-钩子方法中采集消息轨迹数据" tabindex="-1"><a class="header-anchor" href="#_5-2-2-钩子方法中采集消息轨迹数据" aria-hidden="true">#</a> 5.2.2 钩子方法中采集消息轨迹数据</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ConsumeMessageTraceHookImpl.java</span>
<span class="token doc-comment comment">/**
 * 消息消费前调用
 * 收集将要消费消息的轨迹信息，存入调用上下文
 *
 * <span class="token keyword">@param</span> <span class="token parameter">context</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumeMessageBefore</span><span class="token punctuation">(</span><span class="token class-name">ConsumeMessageContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getMsgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getMsgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建消息轨迹上下文</span>
    <span class="token class-name">TraceContext</span> traceContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setMqTraceContext</span><span class="token punctuation">(</span>traceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置消息轨迹类型</span>
    traceContext<span class="token punctuation">.</span><span class="token function">setTraceType</span><span class="token punctuation">(</span><span class="token class-name">TraceType<span class="token punctuation">.</span>SubBefore</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    <span class="token comment">// 设置消费组名</span>
    traceContext<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    <span class="token comment">// 将消费到的消息构建 TraceBean 列表，采集每条消息的轨迹数据</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceBean</span><span class="token punctuation">&gt;</span></span> beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceBean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getMsgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> regionId <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_MSG_REGION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> traceOn <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRACE_SWITCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>traceOn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> traceOn<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// If trace switch is false ,skip it</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">TraceBean</span> traceBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setMsgId</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setStoreTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setBodyLength</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getStoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceBean<span class="token punctuation">.</span><span class="token function">setRetryTimes</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        traceContext<span class="token punctuation">.</span><span class="token function">setRegionId</span><span class="token punctuation">(</span>regionId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
        beans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>traceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将消息轨迹交给异步发送者处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        traceContext<span class="token punctuation">.</span><span class="token function">setTraceBeans</span><span class="token punctuation">(</span>beans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        traceContext<span class="token punctuation">.</span><span class="token function">setTimeStamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localDispatcher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>traceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 消息消费后调用
 * 采集消费完成的消息轨迹数据，存入轨迹上下文，然后发送
 *
 * <span class="token keyword">@param</span> <span class="token parameter">context</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumeMessageAfter</span><span class="token punctuation">(</span><span class="token class-name">ConsumeMessageContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getMsgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getMsgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从轨迹上下文获取消费前的轨迹数据</span>
    <span class="token class-name">TraceContext</span> subBeforeContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TraceContext</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getMqTraceContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>subBeforeContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> subBeforeContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// If subBefore bean is null ,skip it</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 构建消费后的轨迹数据</span>
    <span class="token class-name">TraceContext</span> subAfterContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setTraceType</span><span class="token punctuation">(</span><span class="token class-name">TraceType<span class="token punctuation">.</span>SubAfter</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setRegionId</span><span class="token punctuation">(</span>subBeforeContext<span class="token punctuation">.</span><span class="token function">getRegionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>subBeforeContext<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setRequestId</span><span class="token punctuation">(</span>subBeforeContext<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>

    <span class="token comment">// Calculate the cost time for processing messages</span>
    <span class="token keyword">int</span> costTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> subBeforeContext<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> context<span class="token punctuation">.</span><span class="token function">getMsgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setCostTime</span><span class="token punctuation">(</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    subAfterContext<span class="token punctuation">.</span><span class="token function">setTraceBeans</span><span class="token punctuation">(</span>subBeforeContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> contextType <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">CONSUME_CONTEXT_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contextType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subAfterContext<span class="token punctuation">.</span><span class="token function">setContextCode</span><span class="token punctuation">(</span><span class="token class-name">ConsumeReturnType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>contextType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 发给异步发送者处理</span>
    localDispatcher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subAfterContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-消息轨迹数据发送" tabindex="-1"><a class="header-anchor" href="#_5-3-消息轨迹数据发送" aria-hidden="true">#</a> 5.3 消息轨迹数据发送</h3><p><code>AsyncTraceDispatcher</code> 是专门用来异步发送轨迹消息的异步转发器，负责消息轨迹消息的转发。前面说到消息轨迹数据也以消息的形式发送到 Broker 中进行存储。</p><p><code>AsyncTraceDispatcher</code> 中有 1 个线程池 <code>traceExecutor</code>，负责异步发送轨迹数据，消息生产者 <code>traceProducer</code> 处理生产逻辑，1 个工作线程 <code>worker</code> 负责将 客户端采集到的轨迹上下文提交给线程池处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 消息轨迹异步转发器，异步实现消息轨迹数据的发送
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTraceDispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">TraceDispatcher</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步转发队列长度，默认 2048</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">;</span>
    <span class="token comment">// 一次发送的请求包含数据条数，默认 100</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">;</span>
    <span class="token comment">// 一次发送最大消息大小，默认 128k</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxMsgSize<span class="token punctuation">;</span>
    <span class="token comment">// 发送消息轨迹的消息生产者</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> traceProducer<span class="token punctuation">;</span>
    <span class="token comment">// 异步发送线程池</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> traceExecutor<span class="token punctuation">;</span>
    <span class="token comment">// 丢弃的消息个数</span>
    <span class="token comment">// The last discard number of log</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> discardCount<span class="token punctuation">;</span>
    <span class="token comment">// 工作线程，从追加队列中获取一批待发送的消息轨迹数据，提交到线程池中执行</span>
    <span class="token keyword">private</span> <span class="token class-name">Thread</span> worker<span class="token punctuation">;</span>
    <span class="token comment">// 消息轨迹待发送数据队列，存储每个消息轨迹的上下文</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceContext</span><span class="token punctuation">&gt;</span></span> traceContextQueue<span class="token punctuation">;</span>
    <span class="token comment">// 线程池内部队列，存储线程池发送任务</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> appenderQueue<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> shutDownHook<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DefaultMQProducerImpl</span> hostProducer<span class="token punctuation">;</span>
    <span class="token comment">// 消费者信息，记录消费时的轨迹</span>
    <span class="token keyword">private</span> <span class="token class-name">DefaultMQPushConsumerImpl</span> hostConsumer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ThreadLocalIndex</span> sendWhichQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dispatcherId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息轨迹存放的 Topic</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> traceTopicName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicBoolean</span> isStarted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AccessChannel</span> accessChannel <span class="token operator">=</span> <span class="token class-name">AccessChannel</span><span class="token punctuation">.</span><span class="token constant">LOCAL</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> group<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Type</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>worker 工作线程用一个死循环，不停地尝试从消息轨迹队列中获取一批数据，封装成一个发送任务提交给消息发送线程池处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 批量从待处理消息轨迹队列中取数据，封装成一个 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AsyncAppenderRequest</span></span><span class="token punctuation">}</span> 异步发送请求，提交给发送线程池执行
 * 批量发送机制是为了提高效率
 */</span>
<span class="token keyword">class</span> <span class="token class-name">AsyncRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> stopped<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceContext</span><span class="token punctuation">&gt;</span></span> contexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 批量从等待处理的消息轨迹队列中获取数据，将一批数据封装成一个发送请求，提交给异步发送线程池执行</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>traceContextQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> batchSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TraceContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token comment">//get trace data element from blocking Queue - traceContextQueue</span>
                        context <span class="token operator">=</span> traceContextQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        contexts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>contexts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">AsyncAppenderRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncAppenderRequest</span><span class="token punctuation">(</span>contexts<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    traceExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AsyncTraceDispatcher</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>stopped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 同步 AsyncTraceDispatcher 的停止状态</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而真正的发送逻辑则在 <code>AsyncAppenderRequest#run()</code> 中执行的 <code>sendTraceData</code> 方法中执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 一次发送一批消息轨迹数据
 *
 * <span class="token keyword">@param</span> <span class="token parameter">contextList</span> 消息轨迹数据列表，本次要发送的数据
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTraceData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceContext</span><span class="token punctuation">&gt;</span></span> contextList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 按 Topic 区分的消息轨迹数据表</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TraceTransferBean</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> transBeanMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TraceTransferBean</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TraceContext</span> context <span class="token operator">:</span> contextList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Topic value corresponding to original message entity content</span>
        <span class="token class-name">String</span> topic <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> regionId <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRegionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 用原 Topic 和 regionId 组成 key</span>
        <span class="token comment">// Use  original message entity&#39;s topic as key</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> topic<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>regionId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            key <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span> <span class="token operator">+</span> regionId<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 根据 Key 将消息轨迹数据分类，存入 map</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceTransferBean</span><span class="token punctuation">&gt;</span></span> transBeanList <span class="token operator">=</span> transBeanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>transBeanList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            transBeanList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceTransferBean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            transBeanMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> transBeanList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 按消息轨迹存储协议进行编码，当前为字符串拼接模式</span>
        <span class="token class-name">TraceTransferBean</span> traceData <span class="token operator">=</span> <span class="token class-name">TraceDataEncoder</span><span class="token punctuation">.</span><span class="token function">encoderFromContextBean</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        transBeanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>traceData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 按 Topic 分批将消息发送到 Broker 中</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TraceTransferBean</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> transBeanMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dataTopic <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> regionId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dataTopic <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            regionId <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">flushData</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataTopic<span class="token punctuation">,</span> regionId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,66),v={href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/msg_trace/user_guide.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/prestigeding/article/details/95922489",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/prestigeding/article/details/98376981",target:"_blank",rel:"noopener noreferrer"},y=n("hr",null,null,-1),f=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),h=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function w(T,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("原文地址："),n("a",u,[s("http://hscarb.github.io/rocketmq/20220521-rocketmq-trace.html"),t(a)])]),k,n("p",null,[s("要使用消息轨迹，在 Broker 端和客户端都需要进行一些配置。更详细的消息轨迹使用方法请参考"),n("a",r,[s("官方文档"),t(a)]),s("。")]),n("p",null,[s("rocketmq-spring 开启消息轨迹的"),n("a",d,[s("文档"),t(a)]),s("。")]),m,n("ul",null,[n("li",null,[n("a",v,[s("消息轨迹——官方文档"),t(a)])]),n("li",null,[n("a",b,[s("RocketMQ消息轨迹-设计篇"),t(a)])]),n("li",null,[n("a",g,[s("源码分析RocketMQ消息轨迹"),t(a)])])]),y,f,h])}const S=e(i,[["render",w],["__file","20220521-rocketmq-trace.html.vue"]]);export{S as default};
