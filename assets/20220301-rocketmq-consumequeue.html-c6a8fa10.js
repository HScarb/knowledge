import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as n,b as s,d as a,w as t,e as c}from"./app-eaa093f0.js";const r={},k={href:"http://hscarb.github.io/rocketmq/20220301-rocketmq-consumequeue.html",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"rocketmq-consumequeue-消费队列文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rocketmq-consumequeue-消费队列文件","aria-hidden":"true"},"#"),s(" RocketMQ ConsumeQueue 消费队列文件")],-1),m={class:"table-of-contents"},v=c(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><h3 id="_1-1-consumequeue-是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-consumequeue-是什么" aria-hidden="true">#</a> 1.1 ConsumeQueue 是什么</h3><p>ConsumeQueue，又称作消费队列，是 RocketMQ 存储系统的一部分，保存在磁盘中。</p><p>该文件可以看作 CommitLog 关于消息消费的“索引”文件。</p><p>ConsumeQueue 是一个 MappedFileQueue，即每个文件大小相同的内存映射文件队列。每个文件由大小和格式相同的索引项构成。</p><p>每一个 Topic 的 Queue，都对应一个 ConsumeQueue。</p><h3 id="_1-2-consumequeue-的作用" tabindex="-1"><a class="header-anchor" href="#_1-2-consumequeue-的作用" aria-hidden="true">#</a> 1.2 ConsumeQueue 的作用</h3><p>引入 ConsumeQueue 的目的主要是适应消息的检索需求，提高消息消费的性能。</p><p>Broker 中所有 Topic 的消息都保存在 CommitLog 中，所以同一 Topic 的消息在 CommitLog 中不是连续存储的。消费某一 Topic 消息时去遍历 CommitLog 是非常低效的，所以引入了 ConsumeQueue。</p><p>一个 ConsumeQueue 保存了一个 Topic 的某个 Queue 下所有消息在 CommitLog 中的起始物理偏移量offset，消息大小size和消息Tag的HashCode值。当需要消费这个 Topic 时，只需要找到对应的 ConsumeQueue 开始遍历，根据消息在 CommitLog 中的偏移量即可找到消息保存的位置。</p><h2 id="_2-概要设计" tabindex="-1"><a class="header-anchor" href="#_2-概要设计" aria-hidden="true">#</a> 2. 概要设计</h2><h3 id="_2-1-文件结构" tabindex="-1"><a class="header-anchor" href="#_2-1-文件结构" aria-hidden="true">#</a> 2.1 文件结构</h3><p>ConsumeQueue 文件保存在 store 目录下的 <code>consumequeue</code> 目录中。</p><p>会为每个 Topic 单独创建一个目录，随后为这个 Topic 中的每个 Queue 单独创建一个目录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>storepath
├─commitlog
│      00000000000000000000
│      00000000000000102400
│      00000000000000204800
│      00000000000000307200
│
├─consumequeue
│  └─b4b690a3-63b0-42b7-9c52-9e01a24a24d4
│      └─0
│              00000000000000000000
│              00000000000000001040
│              00000000000000002080
│              00000000000000003120
│              00000000000000004160
│              00000000000000005200
│              00000000000000006240
│              00000000000000007280
......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ConsumeQueue 是数量可无限扩展的映射文件，每个文件大小固定。</p><p>文件中的最小单元是索引项，包含</p><ul><li>消息在 CommitLog 中的物理偏移量</li><li>消息大小</li><li>消息的 Tag Hash 码</li></ul><p>可以把 ConsumeQueue 看作是索引项组成的数组</p><h3 id="_2-2-构建" tabindex="-1"><a class="header-anchor" href="#_2-2-构建" aria-hidden="true">#</a> 2.2 构建</h3><p>消息保存到 CommitLog 之后，会进行重投递。重投递消息的过程就是为了建立消息的索引文件（包括 ConsumeQueue 和 IndexFile）。</p><p>重投递线程会扫描是否有新消息被保存到 CommitLog，如果有则将这条消息查出来，执行重投递逻辑，构建该消息的索引。</p><h3 id="_2-3-查询消息" tabindex="-1"><a class="header-anchor" href="#_2-3-查询消息" aria-hidden="true">#</a> 2.3 查询消息</h3><p>由于每个索引项的大小是固定的，所以只要知道消息在 Queue 中的逻辑偏移量，可以马上算出索引在 ConsumeQueue 中的位置。</p><p>根据消费的 Topic 和 QueueId 查询出相应的 ConsumeQueue 消费队列。</p><p>然后根据位置获取 ConsumeQueue 中的索引项，其中保存有消息在 CommitLog 中的偏移量和消息大小，进而到 CommitLog 中查询出消息。</p><p>同时 ConsumeQueue 还支持通过消息存储时间来查询具体消息，内部使用二分查找算法。</p><h3 id="_2-4-刷盘" tabindex="-1"><a class="header-anchor" href="#_2-4-刷盘" aria-hidden="true">#</a> 2.4 刷盘</h3><p>由一个单独的线程进行持久化，每隔 1s 进行一次判断。</p><p>当写入的索引数超过阈值，或刷盘间隔时间超过 60s，则进行一次刷盘。</p><h3 id="_2-5-恢复" tabindex="-1"><a class="header-anchor" href="#_2-5-恢复" aria-hidden="true">#</a> 2.5 恢复</h3><ol><li>Broker启动时，遍历所有ConsumeQueue目录下的文件，加载这些文件。</li><li>对每个ConsumeQueue执行恢复操作。</li><li>从倒数第三个文件开始往后遍历，遍历文件的每个索引项进行校验，更新最大可用偏移量。</li></ol><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><h3 id="_3-1-文件结构" tabindex="-1"><a class="header-anchor" href="#_3-1-文件结构" aria-hidden="true">#</a> 3.1 文件结构</h3><p>ConsumeQueue 的文件结构可以看作是一个可以无限扩展的数组，每个数组元素是一个索引项，其格式和大小是固定的。</p><figure><img src="https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/store/rocketmq_consume_queue_item.drawio.svg" alt="Consume queue index item structure" tabindex="0" loading="lazy"><figcaption>Consume queue index item structure</figcaption></figure><p>Consume queue index item structure</p><p>索引项的结构很简单，如上图所示。其中 Tag HashCode 用作消息过滤。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152217708.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure>`,39),f={href:"http://mp.weixin.qq.com/profile?src=3&timestamp=1643967524&ver=1&signature=L5ju94P7rRWmLJItwD8ajYAsvtj30i4-lUs0DufOdsYPxkXVknG7rDTxRyqDi2xoVQFLKFidOz3We*H5bb5JZw==",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"可以看到，对于同一个 Topic 的消息，首先保存到 CommitLog 中。每个 Topic 的 Queue 都会创建一个 ConsumeQueue，内部保存该 Queue 中所有消息的索引项。",-1),g=n("h3",{id:"_3-2-构建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-构建","aria-hidden":"true"},"#"),s(" 3.2 构建")],-1),h=n("img",{src:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/store/rocketmq_consume_queue_build_sequence.drawio.svg",alt:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/store/rocketmq_consume_queue_build_sequence.drawio.svg",tabindex:"0",loading:"lazy"},null,-1),y={href:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/store/rocketmq_consume_queue_build_sequence.drawio.svg",target:"_blank",rel:"noopener noreferrer"},_=c(`<p>消息会被先保存到 CommitLog 中，随后由一个独立线程<code>DefaultMessageStore.ReputMessageService#doreput()</code>对 CommitLog 进行扫描。</p><p>当扫描到新消息被保存到 CommitLog 时，会执行 dispatch（转发） 操作，运行所有消息 Dispatcher，来构建 ConsumeQueue 和 IndexFile。</p><p>其中 <code>DefaultMessageStore.CommitLogDispatcherBuildConsumeQueue</code> 就是用来创建 ConsumeQueue 的。其 <code>dispatch()</code> 方法将刚刚保存的消息存入 ConsumeQueue 中。</p><p>内部调用了 <code>ConsumeQueue#putMessagePositionInfo()</code> 方法，写内存映射文件，将消息真正存入 ConsumeQueue。</p><h3 id="_3-3-查询消息" tabindex="-1"><a class="header-anchor" href="#_3-3-查询消息" aria-hidden="true">#</a> 3.3 查询消息</h3><p>客户端发起消息消费请求，请求码为<code>RequestCode.PULL_MESSAGE</code>，对应的处理类为<code>PullMessageProcessor</code>。Broker 在收到客户端的请求之后，会根据topic和queueId定位到对应的 ConsumeQueue。然后根据这条请求传入的offset消费队列偏移量，定位到对应消息。</p><p>在存储层面查询消息的入口是 <code>DefaultMessageStore#getMessage()</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GetMessageResult</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> maxMsgNums<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">MessageFilter</span> messageFilter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法中根据<code>topic</code>和<code>queueId</code>查询相应的ConsumeQueue，然后使用<code>offset</code>从ConsumeQueue中获取相应位置的索引信息。</p><p>随后使用查出来的<code>phyOffset</code>和<code>size</code>到CommitLog中查询消息并返回。</p><h3 id="_3-4-刷盘" tabindex="-1"><a class="header-anchor" href="#_3-4-刷盘" aria-hidden="true">#</a> 3.4 刷盘</h3><p>由一个单独的线程<code>FlushConsumeQueueService</code>周期性检查和刷盘，检查周期<code>flushIntervalConsumeQueue</code>可配置，默认为 1s。</p><p>执行刷盘有两个阈值</p><ol><li><code>flushConsumeQueueThoroughInterval</code>（默认 60s）内如果没有执行过刷盘操作，则会执行一次刷盘</li><li>需要刷盘的数据超过<code>getFlushConsumeQueueLeastPages</code>（默认2）个操作系统页</li></ol><h3 id="_3-5-恢复" tabindex="-1"><a class="header-anchor" href="#_3-5-恢复" aria-hidden="true">#</a> 3.5 恢复</h3><ol><li>Broker启动时，调用<code>DefaultMessageStore#loadConsumeQueue()</code>遍历所有ConsumeQueue目录下的文件，加载这些文件。</li><li>随后进行恢复操作<code>recoverConsumeQueue()</code>遍历每个ConsumeQueue执行恢复recover()。</li><li>从倒数第三个文件开始往后遍历，遍历文件的每个索引项进行校验，校验成功则更新当前文件的最大可用偏移量，否则直接退出。最后更新整个队列的可用偏移量，删除多余的文件。</li></ol><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><p>与 ConsumeQueue 相关的类有</p><ul><li>ConsumeQueue</li><li>ConsumeQueueExt</li><li>DefaultMessageStore</li></ul><p>下面分析 ConsumeQueue 相关操作的源码实现</p><h3 id="_4-1-构建" tabindex="-1"><a class="header-anchor" href="#_4-1-构建" aria-hidden="true">#</a> 4.1 构建</h3><p>ConsumeQueue 的构建入口是<code>ReputMessageService#doReput()</code>方法，它会从 CommitLog 中扫描新的消息，然后转发和构建 ConsumeQueue。</p><h4 id="_4-1-1-reputmessageservice-doreput" tabindex="-1"><a class="header-anchor" href="#_4-1-1-reputmessageservice-doreput" aria-hidden="true">#</a> 4.1.1 ReputMessageService#doReput</h4><ul><li>当 CommitLog 可用，一直从上一条消息末尾位置开始循环扫描新消息</li><li>如找到消息，将消息封装成<code>DispatchRequest</code>，分发给各个处理器（<code>CommitLogDispatcher</code>）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>

    <span class="token comment">// CommitLog可用则一直进行循环扫描</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> doNext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isCommitLogAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> doNext<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 从上一条消息的结束位置开始获取下一条消息</span>
        <span class="token class-name">SelectMappedBufferResult</span> result <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>reputFromOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 更新分发的偏移量为当前分发消息的起始偏移量</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>reputFromOffset <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getStartOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> readSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> readSize <span class="token operator">&lt;</span> result<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> doNext<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 检查消息，查询并解析消息，构建消息的DispatchRequest</span>
                    <span class="token class-name">DispatchRequest</span> dispatchRequest <span class="token operator">=</span>
                        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">checkMessageAndReturnSize</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> size <span class="token operator">=</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getMsgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 将DispatchRequest分发给所有注册dispatcherList中的CommitLogDispatcher进行处理</span>
                            <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doDispatch</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">// 通知消息消费长轮询线程，有新的消息落盘，立即唤醒挂起的消息拉取请求</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">!=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    <span class="token operator">&amp;&amp;</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    <span class="token operator">&amp;&amp;</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener<span class="token punctuation">.</span><span class="token function">arriving</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    dispatchRequest<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getConsumeQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                    dispatchRequest<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    dispatchRequest<span class="token punctuation">.</span><span class="token function">getBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
		<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-defaultmessagestore-dodispatch" tabindex="-1"><a class="header-anchor" href="#_4-1-2-defaultmessagestore-dodispatch" aria-hidden="true">#</a> 4.1.2 DefaultMessageStore#doDispatch</h4><ul><li>在<code>doReput</code>方法中被调用</li><li>内部遍历所有<code>dispatcherList</code>中的分发器，执行每个分发器的<code>dispatch</code>方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CommitLogDispatcher</span> dispatcher <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dispatcher<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-3-commitlogdispatcherbuildconsumequeue-dispatch" tabindex="-1"><a class="header-anchor" href="#_4-1-3-commitlogdispatcherbuildconsumequeue-dispatch" aria-hidden="true">#</a> 4.1.3 CommitLogDispatcherBuildConsumeQueue#dispatch</h4><ul><li>判断消息的事务属性</li><li>根据 Topic 和 queueId 查找 ConsumeQueue</li><li>调用 ConsumeQueue 的保存方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> tranType <span class="token operator">=</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token function">getTransactionValue</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>tranType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 非事务消息或Commit类型的事务消息才执行分发</span>
        <span class="token keyword">case</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_NOT_TYPE</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_COMMIT_TYPE</span><span class="token operator">:</span>
            <span class="token comment">// 将请求分发到 ConsumeQueue</span>
            <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putMessagePositionInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_PREPARED_TYPE</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_ROLLBACK_TYPE</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 将请求分发到具体的 ConsumeQueue
 *
 * <span class="token keyword">@param</span> <span class="token parameter">dispatchRequest</span> 消息的分发请求
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putMessagePositionInfo</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> dispatchRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConsumeQueue</span> cq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findConsumeQueue</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cq<span class="token punctuation">.</span><span class="token function">putMessagePositionInfoWrapper</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-4-consumequeue-putmessageposiitoninfo" tabindex="-1"><a class="header-anchor" href="#_4-1-4-consumequeue-putmessageposiitoninfo" aria-hidden="true">#</a> 4.1.4 ConsumeQueue#putMessagePosiitonInfo</h4><ul><li>被<code>putMessagePositionInfoWrapper</code>调用</li><li>用于往ConsumeQueue中写入索引项</li></ul><p>该函数的大致逻辑如下</p><ol><li>将索引项的三个参数写入 ByteBuffer</li><li>计算应该写入 ConsumeQueue 的物理偏移量</li><li>将 ByteBuffer 中的数据写入 ConsumeQueue 文件</li></ol><hr><p>注意该函数的入参中有一个<code>cqOffset</code>，表示消息在该 ConsumeQueue 中的逻辑偏移量。那么消息索引都还没有被存入 ConsumeQueue，它在 ConsumeQueue 里的逻辑偏移量怎么已经被计算出来了？</p><p>其实这个值在消息被保存到 CommitLog 时就已经计算出来并保存到 CommitLog 中了，计算的逻辑在 <code>CommitLog#doAppend</code> 方法中。</p><p>具体的实现方法是：CommitLog 中的 <code>topicQueueTable</code> 变量保存着每个 ConsumeQueue 当前的最新逻辑偏移量。当应当保存在该 ConsumeQueue 的新消息被保存到 CommitLog，会从 topicQueueTable 获取最新的偏移量，并且将该偏移量加一。源码不在此处展示。</p><hr><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 往ConsumeQueue中写入索引项，putMessagePositionInfo只有一个线程调用，所以不需要加锁
 *
 * <span class="token keyword">@param</span> <span class="token parameter">offset</span> CommitLog offset
 * <span class="token keyword">@param</span> <span class="token parameter">size</span> 消息在CommitLog存储的大小
 * <span class="token keyword">@param</span> <span class="token parameter">tagsCode</span> 过滤tag的hashcode
 * <span class="token keyword">@param</span> <span class="token parameter">cqOffset</span> 消息在ConsumeQueue中的逻辑偏移量。在 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CommitLog</span><span class="token punctuation">#</span><span class="token field">doAppend</span></span><span class="token punctuation">}</span> 方法中已经生成并保存
 * <span class="token keyword">@return</span> 是否成功
 */</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">putMessagePositionInfo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> tagsCode<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> cqOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// CommitLog offset + size 小于ConsumeQueue中保存的最大CommitLog物理偏移量，说明这个消息重复生成ConsumeQueue，直接返回</span>
    <span class="token comment">// 多见于关机恢复的场景。关机恢复从倒数第3个CommitLog文件开始重新转发消息生成ConsumeQueue</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> size <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPhysicOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Maybe try to build consume queue repeatedly maxPhysicOffset={} phyOffset={}&quot;</span><span class="token punctuation">,</span> maxPhysicOffset<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// NIO ByteBuffer 写入三个参数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算本次期望写入ConsumeQueue的物理偏移量</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> expectLogicOffset <span class="token operator">=</span> cqOffset <span class="token operator">*</span> <span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">;</span>

    <span class="token comment">// 根据期望的偏移量找到对应的内存映射文件</span>
    <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span>expectLogicOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 纠正MappedFile逻辑队列索引顺序</span>
        <span class="token comment">// 如果MappedFileQueue中的MappedFile列表被删除</span>
        <span class="token comment">// 这时需要保证消息队列的逻辑位置和ConsumeQueue文件的起始文件的偏移量一致，要补充空的消息索引</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedFile<span class="token punctuation">.</span><span class="token function">isFirstCreateInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cqOffset <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mappedFile<span class="token punctuation">.</span><span class="token function">getWrotePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>minLogicOffset <span class="token operator">=</span> expectLogicOffset<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">setFlushedWhere</span><span class="token punctuation">(</span>expectLogicOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">setCommittedWhere</span><span class="token punctuation">(</span>expectLogicOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 填充空的消息索引</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fillPreBlank</span><span class="token punctuation">(</span>mappedFile<span class="token punctuation">,</span> expectLogicOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;fill pre blank space &quot;</span> <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> expectLogicOffset <span class="token operator">+</span> <span class="token string">&quot; &quot;</span>
                <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getWrotePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cqOffset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当前ConsumeQueue被写过的物理offset = 该MappedFile被写过的位置 + 该MappedFile起始物理偏移量</span>
            <span class="token comment">// 注意：此时消息还没从内存刷到磁盘，如果是异步刷盘，Broker断电就会存在数据丢失的情况</span>
            <span class="token comment">// 此时消费者消费不到，所以在重要业务中使用同步刷盘确保数据不丢失</span>
            <span class="token keyword">long</span> currentLogicOffset <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">getWrotePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 如果期望写入的位置 &lt; 当前ConsumeQueue被写过的位置，说明是重复写入，直接返回</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>expectLogicOffset <span class="token operator">&lt;</span> currentLogicOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Build  consume queue repeatedly, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}&quot;</span><span class="token punctuation">,</span>
                    expectLogicOffset<span class="token punctuation">,</span> currentLogicOffset<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queueId<span class="token punctuation">,</span> expectLogicOffset <span class="token operator">-</span> currentLogicOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">// 期望写入的位置应该等于被写过的位置</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>expectLogicOffset <span class="token operator">!=</span> currentLogicOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">LOG_ERROR</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;[BUG]logic queue order maybe wrong, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}&quot;</span><span class="token punctuation">,</span>
                    expectLogicOffset<span class="token punctuation">,</span>
                    currentLogicOffset<span class="token punctuation">,</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>queueId<span class="token punctuation">,</span>
                    expectLogicOffset <span class="token operator">-</span> currentLogicOffset
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPhysicOffset <span class="token operator">=</span> offset <span class="token operator">+</span> size<span class="token punctuation">;</span>
        <span class="token comment">// 将一个ConsumeQueue数据写盘，此时并未刷盘</span>
        <span class="token keyword">return</span> mappedFile<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-查询消息" tabindex="-1"><a class="header-anchor" href="#_4-2-查询消息" aria-hidden="true">#</a> 4.2 查询消息</h3><p>客户端发起消息消费请求，请求码为<code>RequestCode.PULL_MESSAGE</code>，对应的处理类为<code>PullMessageProcessor</code>，服务器在收到客户端的请求之后，会根据topic和queueId定位到对应的消费队列。然后根据这条请求传入的offset消费队列偏移量，定位到对应的消费队列文件。</p><p>存储层查询消息的入口是 <code>DefaultMessageStore#getMessage</code>。</p><h4 id="_4-2-1-defaultmessagestore-getmessage" tabindex="-1"><a class="header-anchor" href="#_4-2-1-defaultmessagestore-getmessage" aria-hidden="true">#</a> 4.2.1 DefaultMessageStore#getMessage</h4><p>该方法的调用关系如下图所示</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152217709.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><ol><li>根据 Topic 和 QueueId 查询 ConsumeQueue</li><li>根据逻辑偏移量从 ConsumeQueue 中查出索引项</li><li>使用索引项中的 CommitLog 物理 offset 和消息的 size，从 CommitLog 查询消息</li><li>使用索引项中的 Tag HashCode 处理消息过滤的逻辑</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取消息
 *
 * <span class="token keyword">@param</span> <span class="token parameter">group</span> Consumer group that launches this query. 消费者组
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span> Topic to query. 主题
 * <span class="token keyword">@param</span> <span class="token parameter">queueId</span> Queue ID to query. 队列ID
 * <span class="token keyword">@param</span> <span class="token parameter">offset</span> Logical offset to start from. 消息在队列中的逻辑偏移量
 * <span class="token keyword">@param</span> <span class="token parameter">maxMsgNums</span> Maximum count of messages to query. 查询的最大消息数量
 * <span class="token keyword">@param</span> <span class="token parameter">messageFilter</span> Message filter used to screen desired messages. 消息过滤器
 * <span class="token keyword">@return</span> 查询消息结果
 */</span>
<span class="token keyword">public</span> <span class="token class-name">GetMessageResult</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> maxMsgNums<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">MessageFilter</span> messageFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
    <span class="token class-name">ConsumeQueue</span> consumeQueue <span class="token operator">=</span> <span class="token function">findConsumeQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>consumeQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
						<span class="token comment">// 根据逻辑偏移量从 ConsumeQueue 中查出索引项</span>
            <span class="token class-name">SelectMappedBufferResult</span> bufferConsumeQueue <span class="token operator">=</span> consumeQueue<span class="token punctuation">.</span><span class="token function">getIndexBuffer</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferConsumeQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// ...</span>
										<span class="token comment">// 从消费队列中读取消息，直到读完或者读到查询消息数的最大值</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> maxFilterMessageCount<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">long</span> offsetPy <span class="token operator">=</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> sizePy <span class="token operator">=</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">long</span> tagsCode <span class="token operator">=</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        maxPhyOffsetPulling <span class="token operator">=</span> offsetPy<span class="token punctuation">;</span>

                        <span class="token comment">// ...</span>

                        <span class="token comment">// 消息过滤</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageFilter <span class="token operator">!=</span> <span class="token keyword">null</span>
                            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>messageFilter<span class="token punctuation">.</span><span class="token function">isMatchedByConsumeQueue</span><span class="token punctuation">(</span>isTagsCodeLegal <span class="token operator">?</span> tagsCode <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> extRet <span class="token operator">?</span> cqExtUnit <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>getResult<span class="token punctuation">.</span><span class="token function">getBufferTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">NO_MATCHED_MESSAGE</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token comment">// 根据消息的偏移量和消息的大小从 CommitLog 文件中取出一条消息</span>
                        <span class="token class-name">SelectMappedBufferResult</span> selectResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> selectResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>getResult<span class="token punctuation">.</span><span class="token function">getBufferTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_WAS_REMOVING</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                            nextPhyFileStartOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">rollNextFile</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
		<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-刷盘" tabindex="-1"><a class="header-anchor" href="#_4-3-刷盘" aria-hidden="true">#</a> 4.3 刷盘</h3><p>putMessagePositionInfo 中调用 MappedFile#appendMessage，但这并不表示消息会被立刻持久化到磁盘中。</p><p>持久化的过程是通过后台服务 FlushConsumeQueueService 来定时持久化的，每隔1s检查一次。</p><h4 id="_4-3-1-flushconsumequeueservice-doflush" tabindex="-1"><a class="header-anchor" href="#_4-3-1-flushconsumequeueservice-doflush" aria-hidden="true">#</a> 4.3.1 FlushConsumeQueueService#doFlush</h4><p>该方法每隔 1s 执行一次。</p><ol><li>比较上次刷盘时间与当前时间差距，如果小于等于 60s，则执行刷盘</li><li>遍历 ConsumeQueue 执行刷盘，每隔 ConsumeQueue 至少刷 2 个操作系统页</li><li>更新 StoreCheckpoint 中的最新刷盘时间</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFlush</span><span class="token punctuation">(</span><span class="token keyword">int</span> retryTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 变量含义：如果大于0，则标识这次刷盘必须刷多少个page，如果=0，则有多少刷多少。</span>
    <span class="token comment">// 默认为2，表示每次至少刷2个操作系统page</span>
    <span class="token keyword">int</span> flushConsumeQueueLeastPages <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushConsumeQueueLeastPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 程序退出时强制刷盘</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">==</span> <span class="token constant">RETRY_TIMES_OVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flushConsumeQueueLeastPages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">long</span> logicsMsgTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 一定时间内未执行刷盘，会强制刷盘，默认60s</span>
    <span class="token keyword">int</span> flushConsumeQueueThoroughInterval <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushConsumeQueueThoroughInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTimeMillis <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastFlushTimestamp <span class="token operator">+</span> flushConsumeQueueThoroughInterval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当时间满足flushConsumeQueueThoroughInterval时，即使写入的数量不足flushConsumeQueueLeastPages，也进行flush</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastFlushTimestamp <span class="token operator">=</span> currentTimeMillis<span class="token punctuation">;</span>
        flushConsumeQueueLeastPages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        logicsMsgTimestamp <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogicsMsgTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ConcurrentMap</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>consumeQueueTable<span class="token punctuation">;</span>

    <span class="token comment">// 遍历ConsumeQueue刷盘</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">&gt;</span></span> maps <span class="token operator">:</span> tables<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumeQueue</span> cq <span class="token operator">:</span> maps<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> retryTimes <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span>flushConsumeQueueLeastPages<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 更新CheckPoint中ConsumeQueue最新刷盘时间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flushConsumeQueueLeastPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logicsMsgTimestamp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLogicsMsgTimestamp</span><span class="token punctuation">(</span>logicsMsgTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-恢复" tabindex="-1"><a class="header-anchor" href="#_4-4-恢复" aria-hidden="true">#</a> 4.4 恢复</h3><p>在Broker重新启动时会扫描ConsumeQueue的目录，尝试恢复这些文件。</p><h4 id="_4-4-1-consumequeue-recover" tabindex="-1"><a class="header-anchor" href="#_4-4-1-consumequeue-recover" aria-hidden="true">#</a> 4.4.1 ConsumeQueue#recover</h4><p>从倒数第三个文件开始往后遍历，遍历文件的每个索引项进行校验，校验成功则更新当前文件的最大可用偏移量，否则直接退出循环。</p><p>最后更新整个队列的可用偏移量，删掉不可用的部分。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    final List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MappedFile</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> mappedFiles = this.mappedFileQueue.getMappedFiles();
    if (!mappedFiles.isEmpty()) </span><span class="token punctuation">{</span>
        <span class="token comment">// 从倒数第三个文件开始恢复</span>
        int index <span class="token operator">=</span> mappedFiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        int mappedFileSizeLogics <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize<span class="token punctuation">;</span>
        MappedFile mappedFile <span class="token operator">=</span> mappedFiles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ByteBuffer byteBuffer <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">sliceByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        long processOffset <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        long mappedFileOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        long maxExtAddr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappedFileSizeLogics<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                long offset <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                int size <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                long tagsCode <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 说明当前存储单元有效</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mappedFileOffset <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>maxPhysicOffset <span class="token operator">=</span> offset <span class="token operator">+</span> size<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExtAddr</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        maxExtAddr <span class="token operator">=</span> tagsCode<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;recover current consume queue file over,  &quot;</span> <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span>
                        <span class="token operator">+</span> offset <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> tagsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 走到文件末尾，切换至下一个文件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedFileOffset <span class="token operator">==</span> mappedFileSizeLogics<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                index<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> mappedFiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 当前分支不可能发生</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;recover last consume queue file over, last mapped file &quot;</span>
                        <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    mappedFile <span class="token operator">=</span> mappedFiles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    byteBuffer <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">sliceByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processOffset <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mappedFileOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;recover next consume queue file, &quot;</span> <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;recover current consume queue queue over &quot;</span> <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span>
                    <span class="token operator">+</span> <span class="token punctuation">(</span>processOffset <span class="token operator">+</span> mappedFileOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        processOffset <span class="token operator">+=</span> mappedFileOffset<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">setFlushedWhere</span><span class="token punctuation">(</span>processOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">setCommittedWhere</span><span class="token punctuation">(</span>processOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">truncateDirtyFiles</span><span class="token punctuation">(</span>processOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExtReadEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>consumeQueueExt<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Truncate consume queue extend file by max {}&quot;</span><span class="token punctuation">,</span> maxExtAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>consumeQueueExt<span class="token punctuation">.</span><span class="token function">truncateByMaxAddress</span><span class="token punctuation">(</span>maxExtAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token plain-text">
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-更多思考" tabindex="-1"><a class="header-anchor" href="#_5-更多思考" aria-hidden="true">#</a> 5. 更多思考</h2><h3 id="_5-1-rocketmq-5-x-版本中新的-batch-consume-queue-index" tabindex="-1"><a class="header-anchor" href="#_5-1-rocketmq-5-x-版本中新的-batch-consume-queue-index" aria-hidden="true">#</a> 5.1 RocketMQ 5.x 版本中新的 <strong>Batch Consume Queue index</strong></h3>`,65),w={href:"https://github.com/apache/rocketmq/wiki/RIP-26-Improve-Batch-Message-Processing-Throughput",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"这种 ConsumeQueue 元素更多（每个索引的大小也更大），支持了 Batch Message，且方便扩展（留了8字节的保留字段）。",-1),q=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152217710.png",alt:"Untitled",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Untitled")],-1),Q=n("p",null,"不出意外的话 RocketMQ 5.0 中将采用这种 ConsumeQueue 的格式。",-1),x=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),M={href:"https://wuchanming.gitbooks.io/rocketmq/content/brokerchu-li-xiao-fei-qing-6c4228-534129.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://cana.space/rocketmq%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90_%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E4%B9%8B%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1/#consumequeue%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md",target:"_blank",rel:"noopener noreferrer"},S={href:"https://juejin.cn/post/6844903683382067208",target:"_blank",rel:"noopener noreferrer"},T=n("hr",null,null,-1),O=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),R=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function I(B,E){const p=o("ExternalLinkIcon"),e=o("router-link");return i(),l("div",null,[n("p",null,[s("原文地址："),n("a",k,[s("http://hscarb.github.io/rocketmq/20220301-rocketmq-consumequeue.html"),a(p)])]),d,n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#_1-概述"},{default:t(()=>[s("1. 概述")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-1-consumequeue-是什么"},{default:t(()=>[s("1.1 ConsumeQueue 是什么")]),_:1})]),n("li",null,[a(e,{to:"#_1-2-consumequeue-的作用"},{default:t(()=>[s("1.2 ConsumeQueue 的作用")]),_:1})])])]),n("li",null,[a(e,{to:"#_2-概要设计"},{default:t(()=>[s("2. 概要设计")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_2-1-文件结构"},{default:t(()=>[s("2.1 文件结构")]),_:1})]),n("li",null,[a(e,{to:"#_2-2-构建"},{default:t(()=>[s("2.2 构建")]),_:1})]),n("li",null,[a(e,{to:"#_2-3-查询消息"},{default:t(()=>[s("2.3 查询消息")]),_:1})]),n("li",null,[a(e,{to:"#_2-4-刷盘"},{default:t(()=>[s("2.4 刷盘")]),_:1})]),n("li",null,[a(e,{to:"#_2-5-恢复"},{default:t(()=>[s("2.5 恢复")]),_:1})])])]),n("li",null,[a(e,{to:"#_3-详细设计"},{default:t(()=>[s("3. 详细设计")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_3-1-文件结构"},{default:t(()=>[s("3.1 文件结构")]),_:1})]),n("li",null,[a(e,{to:"#_3-2-构建"},{default:t(()=>[s("3.2 构建")]),_:1})]),n("li",null,[a(e,{to:"#_3-3-查询消息"},{default:t(()=>[s("3.3 查询消息")]),_:1})]),n("li",null,[a(e,{to:"#_3-4-刷盘"},{default:t(()=>[s("3.4 刷盘")]),_:1})]),n("li",null,[a(e,{to:"#_3-5-恢复"},{default:t(()=>[s("3.5 恢复")]),_:1})])])]),n("li",null,[a(e,{to:"#_4-源码解析"},{default:t(()=>[s("4. 源码解析")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_4-1-构建"},{default:t(()=>[s("4.1 构建")]),_:1})]),n("li",null,[a(e,{to:"#_4-2-查询消息"},{default:t(()=>[s("4.2 查询消息")]),_:1})]),n("li",null,[a(e,{to:"#_4-3-刷盘"},{default:t(()=>[s("4.3 刷盘")]),_:1})]),n("li",null,[a(e,{to:"#_4-4-恢复"},{default:t(()=>[s("4.4 恢复")]),_:1})])])]),n("li",null,[a(e,{to:"#_5-更多思考"},{default:t(()=>[s("5. 更多思考")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_5-1-rocketmq-5-x-版本中新的-batch-consume-queue-index"},{default:t(()=>[s("5.1 RocketMQ 5.x 版本中新的 Batch Consume Queue index")]),_:1})])])]),n("li",null,[a(e,{to:"#参考资料"},{default:t(()=>[s("参考资料")]),_:1})])])]),v,n("p",null,[s("上图来自"),n("a",f,[s("艾瑞克的技术江湖"),a(p)])]),b,g,n("figure",null,[h,n("figcaption",null,[n("a",y,[s("https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/store/rocketmq_consume_queue_build_sequence.drawio.svg"),a(p)])])]),_,n("p",null,[s("在 "),n("a",w,[s("RIP-26"),a(p)]),s(" 中为了支持 Batch Message，引入了新的 ConsumeQueue 格式。")]),C,q,Q,x,n("ul",null,[n("li",null,[n("a",M,[s("1 消费队列ConsumeQueue——wuchanming.gitbook.com"),a(p)])]),n("li",null,[n("a",L,[s("rocketmq源码分析_消息存储之概要设计——迦南地"),a(p)])]),n("li",null,[n("a",F,[s("RocketMQ 设计(design)"),a(p)])]),n("li",null,[n("a",S,[s("RocketMQ高性能之底层存储设计"),a(p)])])]),T,O,R])}const z=u(r,[["render",I],["__file","20220301-rocketmq-consumequeue.html.vue"]]);export{z as default};
