import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a,b as e,d as n,w as s,e as r}from"./app-eaa093f0.js";const d={},u={href:"http://hscarb.github.io/rabbitmq/20220409-rabbitmq-mirror-queue.html",target:"_blank",rel:"noopener noreferrer"},h=a("h1",{id:"rabbitmq-镜像队列-使用和原理详解",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#rabbitmq-镜像队列-使用和原理详解","aria-hidden":"true"},"#"),e(" RabbitMQ 镜像队列 使用和原理详解")],-1),m={class:"table-of-contents"},b=r('<h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>单节点的 RabbitMQ 存在性能上限，可以通过垂直或者水平扩容的方式增加 RabbitMQ 的吞吐量。垂直扩容指的是提高 CPU 和内存的规格；水平扩容指部署 RabbitMQ 集群。</p><p>通过将单个节点的队列相对平均地分配到集群的不同节点，单节点的压力被分散，RabbitMQ 可以充分利用多个节点的计算和存储资源，以提升消息的吞吐量。</p><p>但是多节点的集群并不意味着有更好的可靠性——每个队列仍只存在于一个节点，当这个节点故障，这个节点上的所有队列都不再可用。</p><p>在 3.8 以前的版本，RabbitMQ 通过镜像队列（Classic Queue Mirroring）来提供高可用性。但镜像队列存在很大的局限性，在 3.8 之后的版本 RabbitMQ 推出了 Quorum queues 来替代镜像队列，在之后的版本中镜像队列将被移除。</p><p>镜像队列通过将一个队列镜像（消息广播）到其他节点的方式来提升消息的高可用性。当主节点宕机，从节点会提升为主节点继续向外提供服务。</p><p>本文将讲解镜像队列的使用方法和原理。</p><h2 id="_2-镜像队列概述" tabindex="-1"><a class="header-anchor" href="#_2-镜像队列概述" aria-hidden="true">#</a> 2. 镜像队列概述</h2><p>RabbitMQ 以队列维度提供高可用的解决方案——镜像队列。</p><p>配置镜像队列规则后，新创建的队列按照规则成为镜像队列。每个镜像队列都包含一个主节点（Leader）和若干个从节点（Follower），其中只有主节点向外提供服务（生产消息和消费消息），从节点仅仅接收主节点发送的消息。</p><p>从节点会准确地按照主节点执行命令的顺序执行动作，所以从节点的状态与主节点应是一致的。</p><h2 id="_3-使用方法和注意事项" tabindex="-1"><a class="header-anchor" href="#_3-使用方法和注意事项" aria-hidden="true">#</a> 3. 使用方法和注意事项</h2><h3 id="_3-1-配置方法" tabindex="-1"><a class="header-anchor" href="#_3-1-配置方法" aria-hidden="true">#</a> 3.1 配置方法</h3><h4 id="_3-1-1-管理界面配置" tabindex="-1"><a class="header-anchor" href="#_3-1-1-管理界面配置" aria-hidden="true">#</a> 3.1.1 管理界面配置</h4><p>使用策略（Policy）来配置镜像策略，策略使用正则表达式来配置需要应用镜像策略的队列名称，以及在参数中配置镜像队列的具体参数。</p><p>按此步骤创建镜像策略，该策略为所有 <code>mirror_</code> 开头的队列创建 3 副本镜像</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204091541498.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建完的策略如下图显示</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204091542205.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>参数解释：</p><ul><li><p>Name: policy的名称，用户自定义。</p></li><li><p>Pattern: queue的匹配模式（正则表达式）。<code>^</code>表示所有队列都是镜像队列。</p></li><li><p>Definition: 镜像定义，包括三个部分ha-sync-mode、ha-mode、ha-params。</p><ul><li>ha-mode: 指明镜像队列的模式，有效取值范围为all/exactly/nodes。 <ul><li>all：表示在集群所有的代理上进行镜像。</li><li>exactly：表示在指定个数的代理上进行镜像，代理的个数由ha-params指定。</li><li>nodes：表示在指定的代理上进行镜像，代理名称通过ha-params指定。</li></ul></li><li>ha-params: ha-mode模式需要用到的参数。</li><li>ha-sync-mode: 表示镜像队列中消息的同步方式，有效取值范围为：automatic，manually。 <ul><li>automatic：表示自动向master同步数据。</li><li>manually：表示手动向master同步数据。</li></ul></li></ul></li><li><p>Priority: 可选参数， policy的优先级。</p></li></ul><h4 id="_3-1-2-命令行" tabindex="-1"><a class="header-anchor" href="#_3-1-2-命令行" aria-hidden="true">#</a> 3.1.2 命令行</h4>',22),g={href:"https://www.rabbitmq.com/rabbitmqctl.8.html#set_policy",target:"_blank",rel:"noopener noreferrer"},_=a("strong",null,"set_policy",-1),f=a("strong",null,"-p",-1),k=a("strong",null,"--priority",-1),q=a("strong",null,"--apply-to",-1),y=r(`<p>例如，对队列名称以“queue_”开头的所有队列进行镜像，并在集群的两个节点上完成进行，policy的设置命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_policy <span class="token parameter variable">--priority</span> <span class="token number">0</span> --apply-to queues mirror_queue <span class="token string">&quot;^mirror_&quot;</span> <span class="token string">&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:3,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-3-http-api" tabindex="-1"><a class="header-anchor" href="#_3-1-3-http-api" aria-hidden="true">#</a> 3.1.3 HTTP API</h4>`,3),x={href:"https://www.rabbitmq.com/ha.html#examples",target:"_blank",rel:"noopener noreferrer"},w=r(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /api/policies/%2f/ha-two
<span class="token punctuation">{</span>
  <span class="token property">&quot;pattern&quot;</span><span class="token operator">:</span><span class="token string">&quot;^mirror_&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;definition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ha-mode&quot;</span><span class="token operator">:</span><span class="token string">&quot;exactly&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;ha-params&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token property">&quot;ha-sync-mode&quot;</span><span class="token operator">:</span><span class="token string">&quot;automatic&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-镜像队列配置观测" tabindex="-1"><a class="header-anchor" href="#_3-2-镜像队列配置观测" aria-hidden="true">#</a> 3.2 镜像队列配置观测</h3><p>配置完 Policy 后，创建新的队列，或者原有的的队列，如果队列名称符合 Policy 的匹配规则，则该队列会自动创建为镜像队列。</p><p>下图中 <code>mirror_queue</code> 匹配之前创建的镜像策略，为镜像队列。<code>normal_queue</code> 为普通队列</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204091544021.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>镜像队列显示的蓝色 <code>+2</code> 表示同步副本数为 2 个。此处如果用红色显示，则表示为同步副本数</p><p>显示的 <code>mirror-policy</code> 为该队列应用的镜像策略。</p><p>点击队列名称可以进入查看队列详细信息，从中可以看出队列的主节点、从节点和镜像策略</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204091547500.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-配置参数" tabindex="-1"><a class="header-anchor" href="#_3-3-配置参数" aria-hidden="true">#</a> 3.3 配置参数</h3><p>镜像队列有许多配置参数，表达了镜像队列的镜像策略和异常后的晋升策略。</p><p>下面来详细解释一下这些配置参数的意义</p><h4 id="_3-3-1-镜像策略" tabindex="-1"><a class="header-anchor" href="#_3-3-1-镜像策略" aria-hidden="true">#</a> 3.3.1 镜像策略</h4><table><thead><tr><th>ha-mode</th><th>ha-params</th><th>结果</th></tr></thead><tbody><tr><td>exactly</td><td>count</td><td>集群中队列副本的数量（主队列加上镜像）。count值为1表示一个副本：只有主节点。如果主节点不可用，则其行为取决于队列是否持久化。count值为2表示两个副本：一个队列主队列和一个队列镜像。换句话说:“镜像数=节点数-1”。如果运行队列主服务器的节点变得不可用，队列镜像将根据配置的镜像提升策略自动提升到主服务器。如果集群中的可用节点数少于count，则将队列镜像到所有节点。如果集群中有多个计数节点，并且一个包含镜像的节点宕机，那么将在另一个节点上创建一个新镜像。使用&#39; exactly &#39;模式和&#39; ha-promot-on-shutdown &#39;: &#39; always &#39;可能是危险的，因为队列可以跨集群迁移，并在停机时变得不同步。</td></tr><tr><td>all</td><td>不设置</td><td>队列跨集群中的所有节点镜像。当一个新节点被添加到集群中时，队列将被镜像到该节点。这个设置非常保守。建议设置的副本值为大多数节点<code>N / 2 + 1</code>。镜像到所有节点会给所有集群节点带来额外的负担，包括网络I/O、磁盘I/O和磁盘空间的使用。</td></tr><tr><td>nodes</td><td>节点名称</td><td>队列被镜像到节点名中列出的节点。节点名是在rabbitmqctl cluster_status中出现的Erlang节点名；它们的形式通常是“rabbit@hostname”。如果这些节点名中有任何一个不是集群的一部分，则不构成错误。如果在声明队列时列表中的节点都不在线，则将在声明客户机连接的节点上创建队列。</td></tr></tbody></table><h4 id="_3-3-2-新镜像同步策略" tabindex="-1"><a class="header-anchor" href="#_3-3-2-新镜像同步策略" aria-hidden="true">#</a> 3.3.2 新镜像同步策略</h4><table><thead><tr><th>ha-sync-mode</th><th>说明</th></tr></thead><tbody><tr><td>manual</td><td>这是默认模式。新队列镜像将不接收现有消息，它只接收新消息。一旦使用者耗尽了仅存在于主服务器上的消息，新的队列镜像将随着时间的推移成为主服务器的精确副本。如果主队列在所有未同步的消息耗尽之前失败，则这些消息将丢失。您可以手动完全同步队列，详情请参阅未同步的镜像部分。</td></tr><tr><td>automatic</td><td>当新镜像加入时，队列将自动同步。值得重申的是，队列同步是一个阻塞操作。如果队列很小，或者您在RabbitMQ节点和ha-sync-batch-size之间有一个快速的网络，那么这是一个很好的选择。</td></tr></tbody></table><h4 id="_3-3-3-从节点晋升策略" tabindex="-1"><a class="header-anchor" href="#_3-3-3-从节点晋升策略" aria-hidden="true">#</a> 3.3.3 从节点晋升策略</h4><p>镜像队列主节点出现故障时，最老的从节点会被提升为新的主节点。如果新提升为主节点的这个副本与原有的主节点并未完成数据的同步，那么就会出现数据的丢失，而实际应用中，出现数据丢失可能会导致出现严重后果。</p><p>rabbitmq 提供了 <code>ha-promote-on-shutdown</code>，<code>ha-promote-on-failure</code> 两个参数让用户决策是保证队列的可用性，还是保证队列的一致性；两个参数分别控制正常关闭、异常故障情况下从节点是否提升为主节点，其可设置的值为 <code>when-synced</code> 和 <code>always</code>。</p><table><thead><tr><th>ha-promote-on-shutdown/ha-promote-on-failure</th><th>说明</th></tr></thead><tbody><tr><td>when-synced</td><td>从节点与主节点完成数据同步，才会被提升为主节点</td></tr><tr><td>always</td><td>无论什么情况下从节点都将被提升为主节点</td></tr></tbody></table><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204082027040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>这里要注意的是ha-promote-on-failure设置为always，插拔网线模拟网络异常的两个测试场景：当网络恢复后，其中一个会重新变为mirror，具体是哪个变为mirror，受cluster_partition_handling处理策略的影响。</p></blockquote><blockquote><p>例如两台节点A，B组成集群，并且cluster_partition_handling设置为autoheal，队列的master位于节点A上，具有全量数据，mirror位于节点B上，并且还未完成消息的同步，此时出现网络异常，网络异常后两个节点交互决策：如果节点A节点成为赢家，此时B节点内部会重启，这样数据全部保留不会丢失；相反如果B节点成为赢家，A需要重启，那么由于ha-prromote-on-failure设置为always，B节点上的mirror提升为master，这样就出现了数据丢失。</p></blockquote><h4 id="_3-3-4-主队列选择策略" tabindex="-1"><a class="header-anchor" href="#_3-3-4-主队列选择策略" aria-hidden="true">#</a> 3.3.4 主队列选择策略</h4><p>RabbitMQ中的每个队列都有一个主队列。该节点称为队列主服务器。所有队列操作首先经过主队列，然后复制到镜像。这对于保证消息的FIFO排序是必要的。</p><p>通过在策略中设置 <code>queue-master-locator</code> 键的方法可以定义主队列选择策略，这是常用的方法。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204091552449.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外，也可以用队列参数 <code>x-queue-master-locator</code> 或配置文件中定义 <code>queue_master_locator</code> 的方式指定，此处不再赘述。</p><p>下面是该策略的可选参数列表</p><table><thead><tr><th>queue-master-locator</th><th>说明</th></tr></thead><tbody><tr><td>min-masters</td><td>选择承载最小绑定主机数量的节点</td></tr><tr><td>client-local</td><td>选择客户机声明队列连接到的节点</td></tr><tr><td>min-masters</td><td>随机选择一个节点</td></tr></tbody></table><h3 id="_3-4-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-4-注意事项" aria-hidden="true">#</a> 3.4 注意事项</h3><h4 id="_3-4-1-多少个镜像才是最优的" tabindex="-1"><a class="header-anchor" href="#_3-4-1-多少个镜像才是最优的" aria-hidden="true">#</a> 3.4.1 多少个镜像才是最优的</h4><p>镜像到所有节点会增加所有集群节点的负载，包括网络 I/O、磁盘 I/O 和磁盘空间的使用。</p><p>在大多数情况下，在每个节点上都有一个副本是不必要的。对于3个或更多节点的集群，建议复制到（N/2+1）个节点，例如 3 个节点集群中的 2 个节点或 5 个节点集群中的 3 个节点。</p><p>由于某些数据可能天生是短暂的或对时间非常敏感，因此对某些队列使用较少的镜像（甚至不使用任何镜像）是完全合理的。</p><h4 id="_3-4-2-生产者确认和事务" tabindex="-1"><a class="header-anchor" href="#_3-4-2-生产者确认和事务" aria-hidden="true">#</a> 3.4.2 生产者确认和事务</h4><p>镜像队列同时支持生产者确认和事务机制。在事务机制中，只有当前事务在全部镜像中执行之后，客户端才会收到 <code>Tx.Commit-OK</code> 的消息。</p><p>同样的，在生产者确认机制中，生产者进行当前消息确认的前提是该消息被全部镜像接收。</p><h4 id="_3-4-3-流控" tabindex="-1"><a class="header-anchor" href="#_3-4-3-流控" aria-hidden="true">#</a> 3.4.3 流控</h4>`,39),v={href:"https://www.rabbitmq.com/memory.html#per-connection",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.rabbitmq.com/nettick.html",target:"_blank",rel:"noopener noreferrer"},Q=r(`<h4 id="_3-4-4-主节点失效和消费者取消" tabindex="-1"><a class="header-anchor" href="#_3-4-4-主节点失效和消费者取消" aria-hidden="true">#</a> 3.4.4 主节点失效和消费者取消</h4><p>从镜像队列中消费的客户端可能希望知道他们所消费的队列已经失败转移。当镜像队列发生故障时，哪些消息被发送到哪个消费者的信息就丢失了，因此所有未被确认的消息都会被重新发送，并设置了 <code>redelivered</code> 的标志。消费者可能希望知道这将会发生。</p><p>如果是这样，他们可以使用参数 <code>x-cancel-on-ha-failover</code> 设置为 <code>true</code>。然后，它们的消费将在故障转移时被取消，并发送消费者取消通知。然后消费者就有责任重新发行基本版。消费来重新开始消费。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-cancel-on-ha-failover&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;my-queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将使用参数集创建一个新的消费者。</p><h2 id="_4-镜像队列原理" tabindex="-1"><a class="header-anchor" href="#_4-镜像队列原理" aria-hidden="true">#</a> 4. 镜像队列原理</h2><h3 id="_4-1-镜像队列的数据流" tabindex="-1"><a class="header-anchor" href="#_4-1-镜像队列的数据流" aria-hidden="true">#</a> 4.1 镜像队列的数据流</h3><h4 id="_4-1-1-客户端连接主节点" tabindex="-1"><a class="header-anchor" href="#_4-1-1-客户端连接主节点" aria-hidden="true">#</a> 4.1.1 客户端连接主节点</h4><p>首先看生产者消费者直接与主节点连接的情况。该情况下队列的主副本所在的节点与生产者/消费者直接连接，效率较高。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778220.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>生产者，消费者连接到 RabbitMQ 后，在 RabbitMQ 内部会创建对应的 Connection，Channel 进程。</p><p>Connecton 进程从 socket 上接收生产者发送的消息后投递到 Channel 进程。</p><p>在 Channel 进程中，根据消息发送的 exchange 与消息的 routing-key，在内部数据库的路由表中，查找所有匹配的 Queue 的进程 PID，然后将消息投递到Queue 的进程中。<strong>在镜像队列的情况下，Channel 进程除了将消息发送给队列的 Leader 进程外，还会将消息发送给队列所有的 Follower 进程</strong>，而 Follower 进程都在远端节点上，因此这里就多了一次集群间的网络交互。</p><p>镜像队列的 Leader 进程收到消息后，需要将消息同步给所有的 Follower 进程。RabbitMQ 采用 GM（组播）算法实现，镜像队列中的 Leader 和所有 Follower 都会发送一次消息和接收一次消息，同时还会发送一次对消息的 ACK，和接收一次消息的 ACK。</p><p>综上所述，<strong>生产者发送一条消息，队列 Leader 进程所在节点会收到两次：一次是生产者发送的，一次是队列 Follower 进程发送的；同样也会将消息对外发送两次：一次是生产者对应的 Channel 进程将消息发送给队列的 Follower 进程；一次是队列的 Leader 进程进行广播同步将消息发送给 Follower 进程</strong>。此外，镜像队列的GM算法实现 ，每条消息还会有额外的确认消息在集群间进行发送。</p><p>再结合图中的情况，一条消息从生产者到消费，Node1节点是<strong>2进3出</strong>的流量，Node2节点是<strong>2进1出</strong>的流量。</p><h4 id="_4-1-2-客户端连接从节点" tabindex="-1"><a class="header-anchor" href="#_4-1-2-客户端连接从节点" aria-hidden="true">#</a> 4.1.2 客户端连接从节点</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778239.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果生产者和消费者连接的是从节点，根据镜像队列的机制，只有主节点向外提供服务，所以镜像队列的消费需要由 node2 的队列消费消息。</p><p>一条消息从生产到消费，生产者消费者连接的节点是<strong>3进3出</strong>，队列master进程所在的节点是<strong>2进2出</strong>。</p><h3 id="_4-2-镜像队列的实现原理" tabindex="-1"><a class="header-anchor" href="#_4-2-镜像队列的实现原理" aria-hidden="true">#</a> 4.2 镜像队列的实现原理</h3><h4 id="_4-2-1-普通队列结构" tabindex="-1"><a class="header-anchor" href="#_4-2-1-普通队列结构" aria-hidden="true">#</a> 4.2.1 普通队列结构</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778258.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通常队列由两部分组成</p><ol><li>amqqueue_process ，负责协议相关的消息处理，即接收生产者发布的消息、向消费者投递消息、处理消息 confirm、acknowledge 等等</li><li>backing_queue，它提供了相关的接口供 amqqueue_process 调用，完成消息的存储以及可能的持久化工作等。</li></ol><h4 id="_4-2-2-镜像队列结构" tabindex="-1"><a class="header-anchor" href="#_4-2-2-镜像队列结构" aria-hidden="true">#</a> 4.2.2 镜像队列结构</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778276.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>镜像队列同样由这两部分组成，amqqueue_process 仍旧进行协议相关的消息处理，backing_queue 则是由 Leader 节点和 Follower 节点组成的一个特殊的 backing_queue。Leader 节点和 Follower 节点都由一组进程组成，一个负责消息广播的 GM，一个负责对 GM 收到的广播消息进行回调处理。</p><p>在 Leader 节点上回调处理是 coordinator，在 Follower 节点上则是 mirror_queue_slave。mirror_queue_slave 中包含了普通的 backing_queue 进行消息的存储，Leader 节点中 backing_queue 包含在 mirror_queue_master 中由 amqqueue_process 进行调用。</p><h4 id="_4-2-3-gm-guaranteed-multicast" tabindex="-1"><a class="header-anchor" href="#_4-2-3-gm-guaranteed-multicast" aria-hidden="true">#</a> 4.2.3 GM(Guaranteed Multicast)</h4><p>GM 模块实现的是一种可靠的组播通信协议，该协议能够保证组播消息的原子性，即保证组中活着的节点要么都收到消息要么都收不到。</p><p>它的实现大致为：将所有的节点形成一个<strong>循环链表</strong>，每个节点都会监控位于自己左右两边的节点，当有节点新增时，相邻的节点保证当前广播的消息会复制到新的节点上 : 当有节点失效时，相邻的节点会接管以保证本次广播的消息会复制到所有的节点。在 Leader 和 Follower 上的这些 GM 形成一个组 (gm_group) ，这个组的信息会记录在 Mnesia 中。不同的镜像队列形成不同的组。操作命令从 Leader 对应的 GM 发出后，顺着链表传送到所有的节点。由于所有节点组成了一个循环链表， Leader 对应的 GM 最终会收到自己发送的操作命令，这个时候 Leader 就知道该操作命令都同步到了所有的 Follower 上。</p><h4 id="_4-2-4-消息的广播" tabindex="-1"><a class="header-anchor" href="#_4-2-4-消息的广播" aria-hidden="true">#</a> 4.2.4 消息的广播</h4><p>消息从 Leader 节点发出，顺着节点链表发送。在这期间，所有的 Follower 节点都会对消息进行缓存，当 Leader 节点收到自己发送的消息后，会再次广播 ack 消息，同样 ack 消息会顺着节点链表经过所有的 Follower 节点，其作用是通知 Follower 节点可以清除缓存的消息，当 ack 消息回到 Leader 节点时对应广播消息的生命周期结束。</p><p>下图为一个简单的示意图，A 节点为 Leader 节点，广播一条内容为 <code>test</code> 的消息。<code>1</code> 表示消息为广播的第一条消息；<code>id=A</code>表示消息的发送者为节点 A。右边是Follower 节点记录的状态信息。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778294.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为什么所有的节点都需要缓存一份发布的消息呢？</p><p>master发布的消息是依次经过所有slave节点，在这期间的任何时刻，有可能有节点失效，那么相邻的节点可能需要重新发送给新的节点。例如，A-&gt;B-&gt;C-&gt;D-&gt;A形成的循环链表，A为master节点，广播消息发送给节点B，B再发送给C，如果节点C收到B发送的消息还未发送给D时异常结束了，那么节点B感知后节点C失效后需要重新将消息发送给D。同样，如果B节点将消息发送给C后，B,C节点中新增了E节点，那么B节点需要再将消息发送给新增的E节点。</p><h2 id="_5-镜像队列实践" tabindex="-1"><a class="header-anchor" href="#_5-镜像队列实践" aria-hidden="true">#</a> 5. 镜像队列实践</h2><p>在 RabbitMQ 3.8 中发布了新的 Quorum Queues，旨在完全代替原有的镜像队列。</p><blockquote><p>在许多情况下，仲裁队列将是比传统队列镜像更好的选择。鼓励读者熟悉仲裁队列，并考虑它们而不是经典的镜像队列</p></blockquote><h3 id="_5-1-镜像队列的缺点" tabindex="-1"><a class="header-anchor" href="#_5-1-镜像队列的缺点" aria-hidden="true">#</a> 5.1 镜像队列的缺点</h3><p>镜像队列最大的问题是其同步算法造成的低性能。镜像队列有如下几个设计缺陷</p><h4 id="_5-1-1-设计缺陷-1-broker-离线后重新上线" tabindex="-1"><a class="header-anchor" href="#_5-1-1-设计缺陷-1-broker-离线后重新上线" aria-hidden="true">#</a> 5.1.1 设计缺陷 1：broker 离线后重新上线</h4><p>基本的问题是，当 broker 离线并再次恢复时，它在镜像中的任何数据都将被丢弃。这是关键的设计缺陷。现在，镜像已恢复在线，但为空，管理员需要做出决定:是否同步镜像。“同步”意味着将当前消息从 leader 复制到镜像。</p><h4 id="_5-1-2-设计缺陷-2-同步阻塞" tabindex="-1"><a class="header-anchor" href="#_5-1-2-设计缺陷-2-同步阻塞" aria-hidden="true">#</a> 5.1.2 设计缺陷 2：同步阻塞</h4><p>此时第二个致命的设计缺陷显露了出来。如果要同步消息，会阻塞整个队列，让这个队列不可用。当队列比较短的时候这通常不是什么问题，但当队列很长或者消息总大小很大的时候，同步将会需要很长时间。不仅如此，同步会导致集群中与内存相关的问题，有时甚至会导致同步卡住，需要重新启动。</p><p>默认情况下，所有镜像队列都会自动同步，但也有人用户不同步镜像。这样，所有新消息都将被复制，老消息都不会被复制，这将减少冗余，会使消息丢失的概率加大。</p><p>这个问题也引发滚动升级的问题，因为重新启动的 broker 将丢弃其所有数据，并需要同步来恢复全部数据冗余。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,50),z={href:"https://www.rabbitmq.com/ha.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://my.oschina.net/hncscwc/blog/4672769",target:"_blank",rel:"noopener noreferrer"},L={href:"https://my.oschina.net/hncscwc/blog/186350",target:"_blank",rel:"noopener noreferrer"},R={href:"https://my.oschina.net/hncscwc/blog/4745863",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.erlang-solutions.com/blog/rabbitmq-mirrored-queues-gotchas/",target:"_blank",rel:"noopener noreferrer"},B=a("hr",null,null,-1),A=a("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),G=a("figure",null,[a("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1);function P(j,I){const o=i("ExternalLinkIcon"),t=i("router-link");return c(),p("div",null,[a("p",null,[e("原文地址："),a("a",u,[e("http://hscarb.github.io/rabbitmq/20220409-rabbitmq-mirror-queue.html"),n(o)])]),h,a("nav",m,[a("ul",null,[a("li",null,[n(t,{to:"#_1-背景"},{default:s(()=>[e("1. 背景")]),_:1})]),a("li",null,[n(t,{to:"#_2-镜像队列概述"},{default:s(()=>[e("2. 镜像队列概述")]),_:1})]),a("li",null,[n(t,{to:"#_3-使用方法和注意事项"},{default:s(()=>[e("3. 使用方法和注意事项")]),_:1}),a("ul",null,[a("li",null,[n(t,{to:"#_3-1-配置方法"},{default:s(()=>[e("3.1 配置方法")]),_:1})]),a("li",null,[n(t,{to:"#_3-2-镜像队列配置观测"},{default:s(()=>[e("3.2 镜像队列配置观测")]),_:1})]),a("li",null,[n(t,{to:"#_3-3-配置参数"},{default:s(()=>[e("3.3 配置参数")]),_:1})]),a("li",null,[n(t,{to:"#_3-4-注意事项"},{default:s(()=>[e("3.4 注意事项")]),_:1})])])]),a("li",null,[n(t,{to:"#_4-镜像队列原理"},{default:s(()=>[e("4. 镜像队列原理")]),_:1}),a("ul",null,[a("li",null,[n(t,{to:"#_4-1-镜像队列的数据流"},{default:s(()=>[e("4.1 镜像队列的数据流")]),_:1})]),a("li",null,[n(t,{to:"#_4-2-镜像队列的实现原理"},{default:s(()=>[e("4.2 镜像队列的实现原理")]),_:1})])])]),a("li",null,[n(t,{to:"#_5-镜像队列实践"},{default:s(()=>[e("5. 镜像队列实践")]),_:1}),a("ul",null,[a("li",null,[n(t,{to:"#_5-1-镜像队列的缺点"},{default:s(()=>[e("5.1 镜像队列的缺点")]),_:1})])])]),a("li",null,[n(t,{to:"#参考资料"},{default:s(()=>[e("参考资料")]),_:1})])])]),b,a("p",null,[e("rabbitmqctl "),a("a",g,[_,n(o)]),e(" ["),f,e(" vhost] ["),k,e(" priority] ["),q,e(" apply-to] name pattern definition")]),y,a("p",null,[a("a",x,[e("https://www.rabbitmq.com/ha.html#examples"),n(o)])]),w,a("p",null,[e("RabbitMQ 使用"),a("a",v,[e("信用证机制限制消息生产的速度"),n(o)]),e("。当生产者收到队列的所有镜像授予的信用时，才允许发送新的消息。（这里的信用指的时发送许可。）如果有镜像没有授予生产者信用，会导致生产者生产阻塞。生产者会一直被阻塞，直到所有镜像都授予它信用值，或者有的镜像从集群中断开。")]),a("p",null,[e("Erlang 通过定时向所有节点发送心跳的方式检测断开的情况。发送心跳的间隔可以用 "),a("a",M,[e("net_ticktime"),n(o)]),e(" 来控制。")]),Q,a("ul",null,[a("li",null,[a("a",z,[e("RabbitMQ Doc - Classic Queue Mirroring"),n(o)])]),a("li",null,[a("a",C,[e("RabbitMQ——镜像队列的数据流"),n(o)])]),a("li",null,[a("a",L,[e("rabbitmq——镜像队列"),n(o)])]),a("li",null,[a("a",R,[e("RabbitMQ——镜像队列Master故障后的处理"),n(o)])]),a("li",null,[a("a",F,[e("RabbitMQ Mirrored Queues Gotchas"),n(o)])])]),B,A,G])}const E=l(d,[["render",P],["__file","20220409-rabbitmq-mirror-queue.html.vue"]]);export{E as default};
