import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as s,c as d,a as e,b as o,d as r,w as l,e as n}from"./app-eaa093f0.js";const h={},p={href:"http://hscarb.github.io/rocketmq/20220820-rocketmq-consumer-1-summary.html",target:"_blank",rel:"noopener noreferrer"},u=e("h1",{id:"rocketmq-消费者-1-概念和消费流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rocketmq-消费者-1-概念和消费流程","aria-hidden":"true"},"#"),o(" RocketMQ 消费者（1）概念和消费流程")],-1),_={class:"table-of-contents"},g=n('<h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>RocketMQ 的消费可以算是 RocketMQ 的业务逻辑中最复杂的一块。这里面涉及到许多消费模式和特性。本想一篇文章写完，写到后面发现消费涉及到的内容太多，于是决定分多篇来写。本文作为消费系列的第一篇，主要讲述 RocketMQ 消费涉及到的模式和特性，也会概括性地讲一下消费流程。</p><p>我将 RocketMQ 的消费流程大致分成 4 个步骤</p><ol><li>重平衡</li><li>消费者拉取消息</li><li>Broker 接收拉取请求后从存储中查询消息并返回</li><li>消费者消费消息</li></ol><p>每个步骤都会用一篇文章来讲解。</p><p>先了解一下 RocketMQ 消费涉及到地概念</p><h2 id="_2-概念简述" tabindex="-1"><a class="header-anchor" href="#_2-概念简述" aria-hidden="true">#</a> 2. 概念简述</h2><h3 id="_2-1-消费组概念与消费模式" tabindex="-1"><a class="header-anchor" href="#_2-1-消费组概念与消费模式" aria-hidden="true">#</a> 2.1 消费组概念与消费模式</h3><p>和大多数消息队列一样，RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。在了解它们之前，需要先引入消费组的概念。</p><h4 id="_2-1-1-消费组" tabindex="-1"><a class="header-anchor" href="#_2-1-1-消费组" aria-hidden="true">#</a> 2.1.1 消费组</h4><p>一个消费者实例即是一个消费者进程，负责消费消息。单个消费者速度有限，在实际使用中通常会采用多个消费者共同消费同样的 Topic 以加快消费速度。这多个消费同样 Topic 的消费者组成了消费者组。</p><p>消费组是一个逻辑概念，它包含了多个同一类的消费者实例，通常这些消费者都消费同一类消息（都消费相同的 Topic）且消费逻辑一致。</p><p>消费组的引入是用来在消费消息时更好地进行负载均衡和容错。</p><h4 id="_2-1-2-广播消费模式-broadcasting" tabindex="-1"><a class="header-anchor" href="#_2-1-2-广播消费模式-broadcasting" aria-hidden="true">#</a> 2.1.2 广播消费模式（BROADCASTING）</h4><p>广播消费模式即全部的消息会广播分发到所有的消费者实例，每个消费者实例会收到全量的消息（即便消费组中有多个消费者都订阅同一 Topic）。</p><p>如下图所示，生产者发送了 5 条消息，每个消费组中的消费者都收到全部的 5 条消息。</p><p>广播模式使用较少，适合各个消费者都需要通知的场景，如刷新应用中的缓存。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/07/1658682241264.png" alt="广播消费模式" tabindex="0" loading="lazy"><figcaption>广播消费模式</figcaption></figure><blockquote><p>注意事项：</p><ol><li>广播消费模式下不支持 <strong>顺序消息</strong>。</li><li>广播消费模式下不支持 <strong>重置消费位点</strong>。</li><li>每条消息都需要<strong>被相同订阅逻辑的多台机器处理</strong>。</li><li><strong>消费进度在客户端维护</strong>，出现重复消费的概率稍大于集群模式。如果消费进度文件丢失，存在消息丢失的可能。</li><li>广播模式下，消息队列 RocketMQ 版保证每条消息至少被每台客户端消费一次，但是并<strong>不会重投消费失败的消息</strong>，因此业务方需要关注消费失败的情况。</li><li>广播模式下，<strong>客户端每一次重启都会从最新消息消费</strong>。客户端在被停止期间发送至服务端的消息将会被自动跳过，请谨慎选择。</li><li>广播模式下，每条消息都会被大量的客户端重复处理，因此推荐尽可能使用集群模式。</li><li>广播模式下服务端不维护消费进度，所以消息队列 RocketMQ 版控制台不支持消息堆积查询、消息堆积报警和订阅关系查询功能。</li></ol></blockquote><h4 id="_2-1-3-集群消费模式-clustering" tabindex="-1"><a class="header-anchor" href="#_2-1-3-集群消费模式-clustering" aria-hidden="true">#</a> 2.1.3 集群消费模式（CLUSTERING）</h4><p>集群消费模式下，<strong>同一 Topic 下的一条消息只会被同一消费组中的一个消费者消费</strong>。也就是说，消息被负载均衡到了同一个消费组的多个消费者实例上。</p><p>更具体一点，在同一消费组中的不同消费者会根据负载机制来平均地订阅 Topic 中的每个 Queue。（默认 AVG 负载方式）</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/07/1658682241525.png" alt="广播消费模式" tabindex="0" loading="lazy"><figcaption>广播消费模式</figcaption></figure><p>RocketMQ 默认使用集群消费模式，这也是大部分场景下会使用到的消费模式。</p><h3 id="_2-2-消费者拉取消息模式" tabindex="-1"><a class="header-anchor" href="#_2-2-消费者拉取消息模式" aria-hidden="true">#</a> 2.2 消费者拉取消息模式</h3><h4 id="_2-2-1-pull" tabindex="-1"><a class="header-anchor" href="#_2-2-1-pull" aria-hidden="true">#</a> 2.2.1 Pull</h4><p>指消费者<strong>主动拉取消息</strong>进行消费，主动从 Broker 拉取消息，主动权由消费者应用控制。</p><h4 id="_2-2-2-push" tabindex="-1"><a class="header-anchor" href="#_2-2-2-push" aria-hidden="true">#</a> 2.2.2 Push</h4><p>指 <strong>Broker 主动将消息 Push 给消费者</strong>，Broker 收到消息就会主动推送到消费者端。该模式的消费实时性较高，也是主流场景中普遍采用的消费形式。</p><p>消费者组中的消费者实例会根据预设的负载均衡算法对 Topic 中的 Queue 进行均匀的订阅，每个 Queue 最多只能被一个消费者订阅。</p><p>在 RocketMQ 中，Push 消费其实也是由 Pull 消费（拉取）实现。Push 消费只是通过客户端 API 层面的封装让用户感觉像是 Broker 在推送消息给消费者。</p><h4 id="_2-2-3-pop" tabindex="-1"><a class="header-anchor" href="#_2-2-3-pop" aria-hidden="true">#</a> 2.2.3 POP</h4><p>RocketMQ 5.0 引入的新消费形式，是 Pull 拉取的另一种实现。也可以在 Push 模式下使用 POP 拉取消息，甚至可以和 Push 模式共同使用（分别消费重试 Topic 和普通 Topic）。</p><p>POP 与 Pull 可以通过一个开关实时进行切换。POP 模式下，Broker 来控制每个消费者消费的队列和拉取的消息，把重平衡逻辑从客户端移到了服务端。</p><p>主要解决了原来 Push 模式消费的以下痛点：</p><ul><li>富客户端：客户端逻辑比较重，多语言支持不友好</li><li>队列独占：Topic 中的一个 Queue 最多只能被 1 个 Push 消费者消费，消费者数量无法无限扩展。且消费者 hang 住时该队列的消息会堆积。</li><li>消费后更新 offset：本地消费成功才会提交 offset</li></ul><p>RocketMQ 5.0 的轻量化 gRPC 客户端就是基于 POP 消费模式开发</p><h3 id="_2-3-队列负载机制与重平衡" tabindex="-1"><a class="header-anchor" href="#_2-3-队列负载机制与重平衡" aria-hidden="true">#</a> 2.3 队列负载机制与重平衡</h3><p>在集群消费模式下，消费组中的消费者共同消费订阅的 Topic 中的所有消息，这里就存在 Topic 中的队列如何分配给消费者的问题。</p><h4 id="_2-3-1-队列负载机制" tabindex="-1"><a class="header-anchor" href="#_2-3-1-队列负载机制" aria-hidden="true">#</a> 2.3.1 队列负载机制</h4><p>RocketMQ Broker 中的队列负载机制将一个 Topic 的不同队列按照算法尽可能平均地分配给消费者组中的所有消费者。RocketMQ 预设了多种负载算法供不同场景下的消费。</p><p>AVG：将队列按数量平均分配给多个消费者，按 Broker 顺序先分配第一个 Broker 的所有队列给第一个消费者，然后给第二个。</p><p>AVG_BY_CIRCLE：将 Broker 上的队列轮流分给不同消费者，更适用于 Topic 在不同 Broker 之间分布不均匀的情况。</p><p>默认采用 AVG 负载方式。</p><h4 id="_2-3-2-重平衡-rebalance" tabindex="-1"><a class="header-anchor" href="#_2-3-2-重平衡-rebalance" aria-hidden="true">#</a> 2.3.2 重平衡（Rebalance）</h4><p>为消费者分配队列消费的这一个负载过程并不是一劳永逸的，比如当消费者数量变化、Broker 掉线等情况发生后，原先的负载就变得不再均衡，此时就需要重新进行负载均衡，这一过程被称为重平衡机制。</p><p>每隔 20s，RocketMQ 会进行一次检查，检查队列数量、消费者数量是否发生变化，如果变化则触发消费队列重平衡，重新执行上述负载算法。</p><h3 id="_2-4-消费端高可靠" tabindex="-1"><a class="header-anchor" href="#_2-4-消费端高可靠" aria-hidden="true">#</a> 2.4 消费端高可靠</h3><h4 id="_2-4-1-重试-死信机制" tabindex="-1"><a class="header-anchor" href="#_2-4-1-重试-死信机制" aria-hidden="true">#</a> 2.4.1 重试-死信机制</h4><p>在实际使用中，消息的消费可能出现失败。RocketMQ 拥有重试机制和死信机制来保证消息消费的可靠性。</p><ol><li><p>正常消费：消费成功则提交消费位点</p></li><li><p>重试机制：如果正常消费失败，消息会被消费者发回 Broker，放入重试 Topic： <code>%RETRY%消费者组</code>。最多重试消费 16 次，重试的时间间隔逐渐变长。（消费者组会自动订阅重试 Topic）。</p><blockquote><p>这里地延迟重试采用了 RocketMQ 的延迟消息，重试的 16 次时间间隔为延迟消息配置的每个延迟等级的时间（从第三个等级开始）。如果修改延迟等级时间的配置，重试的时间间隔也会相应发生变化。但即便延迟等级时间间隔配置不足 16 个，仍会重试 16 次，后面按照最大的时间间隔来重试。</p></blockquote></li><li><p>死信机制：如果正常消费和重试 16 次均失败，消息会保存到死信 Topic <code>%DLQ%消费者组</code> 中，此时需人工介入处理</p></li></ol><h4 id="_2-4-2-队列负载机制与重平衡" tabindex="-1"><a class="header-anchor" href="#_2-4-2-队列负载机制与重平衡" aria-hidden="true">#</a> 2.4.2 队列负载机制与重平衡</h4><p>当发生 Broker 挂掉或者消费者挂掉时，会引发重平衡，可以自动感知有组件挂掉的情况并重新调整消费者的订阅关系。</p><h3 id="_2-5-并发消费与顺序消费" tabindex="-1"><a class="header-anchor" href="#_2-5-并发消费与顺序消费" aria-hidden="true">#</a> 2.5 并发消费与顺序消费</h3><p>在消费者客户端消费时，有两种订阅消息的方式，分别是并发消费和顺序消费。广播模式不支持顺序消费，仅有集群模式能使用顺序消费。</p><p>需要注意的是，这里所说的顺序消费指的是队列维度的顺序，即在消费一个队列时，消费消息的顺序和消息发送的顺序一致。如果一个 Topic 有多个队列， 是不可能达成 Topic 级别的顺序消费的，因为无法控制哪个队列的消息被先消费。Topic 只有一个队列的情况下能够实现 Topic 级别的顺序消费。</p>',56),k={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md#2-%E9%A1%BA%E5%BA%8F%E6%B6%88%E6%81%AF%E6%A0%B7%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},f=n('<p>顺序生产的方式为串行生产，并在生产时指定队列。</p><p>并发消费的方式是调用消费者的指定 <code>MessageListenerConcurrently</code> 作为消费的回调类，顺序消费则使用 <code>MessageListenerOrderly</code> 类进行回调。处理这两种消费方式的消费服务也不同，分别是 <code>ConsumeMessageConcurrentlyService</code> 和 <code>ConsumeMessageOrderlyService</code>。</p><p>顺序消费的大致原理是依靠两组锁，一组在 Broker 端（Broker 锁），锁定队列和消费者的关系，保证同一时间只有一个消费者在消费；在消费者端也有一组锁（消费队列锁）以保证消费的顺序性。</p><h3 id="_2-6-消费进度保存和提交" tabindex="-1"><a class="header-anchor" href="#_2-6-消费进度保存和提交" aria-hidden="true">#</a> 2.6 消费进度保存和提交</h3><p>消费者消费一批消息完成之后，需要保存消费进度。如果是集群消费模式，还需要将消费进度让其他消费者知道，所以需要提交消费进度。这样在消费者重启或队列重平衡时可以根据消费进度继续消费。</p><p>不同模式下消费进度保存方式的不同：</p><ol><li>广播模式：保存在<strong>消费者本地</strong>。因为每个消费者都需要消费全量消息消息。在 <code>LocalfileOffsetStore</code> 当中。</li><li>集群模式：保存在 <strong>Broker，同时消费者端缓存</strong>。因为一个 Topic 的消息只要被消费者组中的一个消费者消费即可，所以消息的消费进度需要统一保存。通过 <code>RemoteBrokerOffsetStore</code> 存储。</li></ol><p>集群模式下，消费者端有定时任务，定时将内存中的消费进度提交到 Broker，Broker 也有定时任务将内存中的消费偏移量持久化到磁盘。此外，消费者向 Broker 拉取消息时也会提交消费偏移量。注意，消费者线程池提交的偏移量是线程池消费的这一批消息中偏移量最小的消息的偏移量。</p><ol><li>消费完一批消息后将消息消费进度存在本地内存</li><li>消费者中有一个定时线程，每 5s 将内存中所有队列的消费偏移量提交到 Broker</li><li>Broker 收到消费进度先缓存到内存，有一个定时任务每隔 5s 将消息偏移量持久化到磁盘</li><li>消费者向 Broker 拉取消息时也会将队列的消息偏移量提交到 Broker</li></ol><h2 id="_3-消费流程" tabindex="-1"><a class="header-anchor" href="#_3-消费流程" aria-hidden="true">#</a> 3. 消费流程</h2><p>这张图是阿里云的文章讲解消费时用到的，能够清晰地表示客户端 Push 模式并发消费流程。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/07/1658682241560.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从左上角第一个方框开始看</p><ol><li>消费者启动时唤醒重平衡服务 <code>RebalanceService</code>，重平衡服务是客户端开始消费的起点。</li><li>重平衡服务会周期性（每 20s）执行重平衡方法 <code>doRebalance)</code>，查询所有注册的 Broker，根据注册的 Broker 数量为自身分配负载的队列 <code>rebalanceByTopic()</code></li><li>分配完队列后，会为每个分配到的新队列创建一个消息拉取请求 <code>pullRequest</code>，这个拉取请求中保存一个处理队列 <code>processQueue</code>，即图中的红黑树（<code>TreeMap</code>），用来保存拉取到的消息。红黑树保存消息的顺序。</li><li>消息拉取线程应用生产-消费模式，用一个线程从拉取请求队列 <code>pullRequestQueue</code> 中弹出拉取请求，执行拉取任务，将拉取到的消息放入处理队列。</li><li>拉取请求在一次拉取消息完成之后会复用，重新被放入拉取请求队列 <code>pullRequestQueue</code> 中</li><li>拉取完成后，在 <code>NettyClientPublicExecutorThreadPool</code> 线程池异步处理结果，将拉取到的消息放入处理队列，然后调用 <code>consumeMessageService.submitConsumeRequest</code>，将处理队列和 多个消费任务提交到消费线程池。每个消费任务消费 1 批消息（1 批默认为 1 条）</li><li>每个消费者都有一个消费线程池 <code>consumeMessageThreadPool</code> ，默认有 20 个消费线程。</li><li>消费线程池的每个消费线程会尝试从消费任务队列中获取消费请求，执行消费业务逻辑 <code>listener.consumeMessage</code>。</li><li>消费完成后，如果消费成功，则更新偏移量 <code>updateOffset</code>（先更新到内存 <code>offsetTable</code>，定时上报到 Broker。Broker 端也先放到内存，定时刷盘）。</li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',15),m={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md#42-consumer%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1",target:"_blank",rel:"noopener noreferrer"},b={href:"http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/RocketMQ%20%E5%AE%9E%E6%88%98%E4%B8%8E%E8%BF%9B%E9%98%B6%EF%BC%88%E5%AE%8C%EF%BC%89/08%20%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%20API%20%E4%B8%8E%E7%89%88%E6%9C%AC%E5%8F%98%E8%BF%81%E8%AF%B4%E6%98%8E.md",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.baiyp.ren/RocketMQ%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.jianshu.com/p/f071d5069059",target:"_blank",rel:"noopener noreferrer"},R={href:"https://kunzhao.org/docs/rocketmq/rocketmq-message-receive-flow/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://zhuanlan.zhihu.com/p/360911990",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://developer.aliyun.com/article/801815",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.jianshu.com/p/4757079f871f",target:"_blank",rel:"noopener noreferrer"},P={href:"https://blog.csdn.net/daimingbao/article/details/120231289",target:"_blank",rel:"noopener noreferrer"},T={href:"http://47.100.139.123/blog/article/89",target:"_blank",rel:"noopener noreferrer"},A=e("hr",null,null,-1),q=e("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),C=e("figure",null,[e("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1);function y(w,F){const a=i("ExternalLinkIcon"),t=i("router-link");return s(),d("div",null,[e("p",null,[o("原文地址："),e("a",p,[o("http://hscarb.github.io/rocketmq/20220820-rocketmq-consumer-1-summary.html"),r(a)])]),u,e("nav",_,[e("ul",null,[e("li",null,[r(t,{to:"#_1-背景"},{default:l(()=>[o("1. 背景")]),_:1})]),e("li",null,[r(t,{to:"#_2-概念简述"},{default:l(()=>[o("2. 概念简述")]),_:1}),e("ul",null,[e("li",null,[r(t,{to:"#_2-1-消费组概念与消费模式"},{default:l(()=>[o("2.1 消费组概念与消费模式")]),_:1})]),e("li",null,[r(t,{to:"#_2-2-消费者拉取消息模式"},{default:l(()=>[o("2.2 消费者拉取消息模式")]),_:1})]),e("li",null,[r(t,{to:"#_2-3-队列负载机制与重平衡"},{default:l(()=>[o("2.3 队列负载机制与重平衡")]),_:1})]),e("li",null,[r(t,{to:"#_2-4-消费端高可靠"},{default:l(()=>[o("2.4 消费端高可靠")]),_:1})]),e("li",null,[r(t,{to:"#_2-5-并发消费与顺序消费"},{default:l(()=>[o("2.5 并发消费与顺序消费")]),_:1})]),e("li",null,[r(t,{to:"#_2-6-消费进度保存和提交"},{default:l(()=>[o("2.6 消费进度保存和提交")]),_:1})])])]),e("li",null,[r(t,{to:"#_3-消费流程"},{default:l(()=>[o("3. 消费流程")]),_:1})]),e("li",null,[r(t,{to:"#参考资料"},{default:l(()=>[o("参考资料")]),_:1})])])]),g,e("p",null,[o("具体顺序生产和消费代码见 "),e("a",k,[o("官方文档"),r(a)]),o("。")]),f,e("ul",null,[e("li",null,[e("a",m,[o("官方文档——设计"),r(a)])]),e("li",null,[e("a",b,[o("RocketMQ 实战与进阶——丁威"),r(a)])]),e("li",null,[e("a",B,[o("RocketMQ消费消息——白云鹏"),r(a)])]),e("li",null,[e("a",E,[o("消息中间件—RocketMQ消息消费（一）——癫狂侠"),r(a)])]),e("li",null,[e("a",R,[o("RocketMQ 消息接受流程——赵坤"),r(a)])]),e("li",null,[e("a",M,[o("RocketMQ 消息消费——贝贝猫"),r(a)])]),e("li",null,[e("a",Q,[o("RocketMQ 5.0 POP 消费模式探秘"),r(a)])]),e("li",null,[e("a",x,[o("RocketMQ消息消费源码分析"),r(a)])]),e("li",null,[e("a",P,[o("Rocketmq消费消息原理——服务端技术栈"),r(a)])]),e("li",null,[e("a",T,[o("RocketMQ——4. Consumer 消费消息——Kong"),r(a)])])]),A,q,C])}const v=c(h,[["render",y],["__file","20220820-rocketmq-consumer-1-summary.html.vue"]]);export{v as default};
