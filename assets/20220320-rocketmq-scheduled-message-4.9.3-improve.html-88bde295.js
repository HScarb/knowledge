import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as s,d as a,w as p,e as c}from"./app-eaa093f0.js";const k={},r={href:"http://hscarb.github.io/rocketmq/20220320-rocketmq-scheduled-message-4.9.3-improve.html",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"rocketmq-延迟消息-定时消息-4-9-3-版本优化-异步投递支持",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rocketmq-延迟消息-定时消息-4-9-3-版本优化-异步投递支持","aria-hidden":"true"},"#"),s(" RocketMQ 延迟消息（定时消息）4.9.3 版本优化 异步投递支持")],-1),v={class:"table-of-contents"},m=n("h2",{id:"_1-概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-概述","aria-hidden":"true"},"#"),s(" 1. 概述")],-1),f={href:"https://github.com/Git-Yang",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/apache/rocketmq/pull/3287",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"Timer",-1),h=n("code",null,"ScheduledExecutorService",-1),y={href:"https://github.com/apache/rocketmq/pull/3458",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"enableScheduleAsyncDeliver",-1),_={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220313-rocketmq-scheduled-message.md",target:"_blank",rel:"noopener noreferrer"},S=c('<h2 id="_2-改动解析" tabindex="-1"><a class="header-anchor" href="#_2-改动解析" aria-hidden="true">#</a> 2. 改动解析</h2><h3 id="_2-1-将多延迟等级延迟消息扫描和投递的任务从单线程执行改为多线程" tabindex="-1"><a class="header-anchor" href="#_2-1-将多延迟等级延迟消息扫描和投递的任务从单线程执行改为多线程" aria-hidden="true">#</a> 2.1 将多延迟等级延迟消息扫描和投递的任务从单线程执行改为多线程</h3><p>这个改动将延迟消息的任务调度器从 <code>Timer</code> 改为 <code>ScheduledExecutorService</code>。</p><p>在老版本中，所有 18 个延迟等级的定时消息扫描和投递任务都是由一个 <code>Timer</code> 启动定时任务执行的。<code>Timer</code> 中所有定时任务都是由<strong>一个工作线程单线程处理</strong>的，如果某个任务处理慢了，后续有新的任务进来，会导致新的任务需要等待前一个任务执行结束。</p><p>改为 <code>ScheduledExecutorService</code> 线程池之后多线程处理任务，可以大幅度提高延迟消息处理速度，并且避免多延迟等级消息同时发送时造成的阻塞。</p><hr>',6),x={href:"https://github.com/apache/rocketmq/issues/3286",target:"_blank",rel:"noopener noreferrer"},P=c(`<ul><li><p>改动前，同时向 4 个延迟等级发送延迟消息，TPS: 657<br> ​ <img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152329113.png" alt="改动前，同时向 4 个延迟等级发送延迟消息" loading="lazy"></p></li><li><p>改动后，同时向4个延迟等级发送延迟消息，TPS: 2453</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152330256.png" alt="改动后，同时向4个延迟等级发送延迟消息" tabindex="0" loading="lazy"><figcaption>改动后，同时向4个延迟等级发送延迟消息</figcaption></figure></li></ul><h3 id="_2-2-支持延迟消息异步投递-提升-dledger-模式下的投递性能" tabindex="-1"><a class="header-anchor" href="#_2-2-支持延迟消息异步投递-提升-dledger-模式下的投递性能" aria-hidden="true">#</a> 2.2 支持延迟消息异步投递，提升 Dledger 模式下的投递性能</h3><p>原本的定时消息投递为单线程同步投递，在 DLedger 模式下存在性能瓶颈。</p><p>因为在 DLedger 模式下，主节点的角色会变为 SYNC_MASTER，同步复制。即需要足够多的从节点存储了该消息后，才会向主节点返回写入成功。</p><p>本次改动将延迟消息的写入改成可配置同步或异步写入，异步写入在 DLedger 模式下性能提升了 3 倍左右。</p><h4 id="_2-2-1-异步投递的注意点" tabindex="-1"><a class="header-anchor" href="#_2-2-1-异步投递的注意点" aria-hidden="true">#</a> 2.2.1 异步投递的注意点</h4><p>异步投递的两个主要缺点是</p><ol><li>无法保证消息投递的顺序</li><li>消息可能重复投递</li></ol><p>异步投递的注意点</p><ul><li><p>需要做流控，当写入 TPS 过高时，页缓存可能会繁忙；甚至节点内存会被打爆。</p></li><li><p>可能存在消息可能丢失的情况，比如投递时页缓存繁忙或者其他原因导致一次投递失败。这时候的处理是对失败消息进行重新投递，重试 3 次失败后，阻塞当前延迟等级对应的线程，直到重新投递成功。</p></li></ul><h4 id="_2-2-2-异步投递逻辑" tabindex="-1"><a class="header-anchor" href="#_2-2-2-异步投递逻辑" aria-hidden="true">#</a> 2.2.2 异步投递逻辑</h4><p>首先回顾一下<strong>同步投递</strong>的逻辑：每个延迟等级都分配一个线程，不断启动任务去扫描该等级对应的消费队列中是否有到期的消息。如果有则将到期的消息一个个同步投递，投递成功后更新该等级对应的 offset，下个任务从该 offset 开始扫描新的消息。</p><hr><p><strong>异步投递</strong>的逻辑相比于同步投递有一些不同：</p><p>异步投递采用了生产-消费模式，生产和消费的对象是异步投递的任务。生产者线程负责将到期的消息创建投递任务，消费者消费这些任务，根据任务的执行状态来更新 offset 或者重试。<br> 这里引入了一个<strong>阻塞队列</strong>作为异步投递任务的容器，阻塞队列的大小可以配置，表示可以同时投递的消息数。当队列中投递任务满时触发流控。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778363.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将对应延迟等级的消息异步投递时，需要将异步投递的任务放入处理队列。此时，可能由于流控等原因，投递任务未能放入队列，那么等待一会后再次执行扫描-投递逻辑。</p><p>消息并不会直接投递成功，所以需要消费者线程从队列中消费并判断这些异步投递任务的状态。如果投递任务已完成，则更新 offset；如果投递异常，则等待一会后重新同步投递；投递成功则更新 offset，投递失败则继续重试。</p><h2 id="_3-异步投递详解" tabindex="-1"><a class="header-anchor" href="#_3-异步投递详解" aria-hidden="true">#</a> 3. 异步投递详解</h2><p>延迟消息的投递逻辑全部在 <code>ScheduleMessageService</code> 类中。</p><p>下面以一个延迟等级的处理为例，用图展示一下消息投递线程和任务更新线程的工作流程。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778381.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>左边是定时消息到期投递线程，右边是投递过程状态更新线程。</p><h3 id="_3-1-定时消息投递线程" tabindex="-1"><a class="header-anchor" href="#_3-1-定时消息投递线程" aria-hidden="true">#</a> 3.1 定时消息投递线程</h3><p>延迟消息投递服务中维护了一个 offset 表<code>offsetTable</code>，表示每个延迟等级当前投递的消息在 ConsumeQuque 中的逻辑 offset。<br> 它用来在关机恢复时标明扫描开始位置，所以这个表会定期持久化到磁盘中，并且从节点会定期从主节点拉去该表的最新值。</p><p>延迟消息处理服务启动时会在 <code>deliverExecutorService</code> 线程池为每个延迟等级创建并执行一个 <code>DeliverDelayedMessageTimerTask</code> 任务，这个任务并不是周期性任务，而是在一个任务的末尾执行下一个任务。这个任务的 <code>executeOnTimeup()</code> 方法即消息投递的逻辑。上图展示的就是该方法中的逻辑。</p><ol><li>获取该等级的 ConsumeQueue，依次扫描消息是否到期</li><li>如果消息到期，从 CommitLog 中查出该消息的完整信息，从属性中恢复它的真实 Topic 和 QueueId，然后投递。（根据配置同步或者异步投递，这里按异步讲解）</li><li>异步消息投递后，投递的过程被放入阻塞队列 <code>deliverPendingTable</code></li><li>如果放入队列失败，表示此时出现流控或者阻塞，需要等待一会然后重新投递</li><li>如果全部投递成功，将 offset 更新为当前投递消息的 offset + 1，表示下一次从下一个 offset 开始扫描</li></ol><h3 id="_3-2-投递过程状态更新线程" tabindex="-1"><a class="header-anchor" href="#_3-2-投递过程状态更新线程" aria-hidden="true">#</a> 3.2 投递过程状态更新线程</h3><p>每个延迟等级在 <code>handleExecutorService</code> 线程池中启动了一个状态更新线程，每个线程执行 <code>HandlePutResultTask</code> 任务。同样，这个任务不是周期性任务，而是一个任务末尾启动一个新的任务。</p><p><code>HandlePutResultTask</code> 任务不断从阻塞队列头部获取异步投递过程对象，判断其状态</p><ul><li>如果投递成功，更新 offset 和统计数据，并从队列中移除投递任务</li><li>如果投递中，无动作</li><li>如果投递错误，根据是否配置自动重试来执行重试或者直接跳过</li><li>重试投递时采用同步投递，投递成功则更新 offset 和统计数据，然后移除；否则继续重新投递</li></ul><p>全部任务扫描完毕后等待一会，执行新的<code>HandlePutResultTask</code> 任务。</p><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-定时消息投递任务" tabindex="-1"><a class="header-anchor" href="#_4-1-定时消息投递任务" aria-hidden="true">#</a> 4.1 定时消息投递任务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeOnTimeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据delayLevel查找对应的延迟消息ConsumeQueue</span>
    <span class="token class-name">ConsumeQueue</span> cq <span class="token operator">=</span>
        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">findConsumeQueue</span><span class="token punctuation">(</span><span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">RMQ_SYS_SCHEDULE_TOPIC</span><span class="token punctuation">,</span>
                                                                         <span class="token function">delayLevel2QueueId</span><span class="token punctuation">(</span>delayLevel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cq <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleNextTimerTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 根据ConsumeQueue的有效延迟消息逻辑offset，获取所有有效的消息</span>
    <span class="token class-name">SelectMappedBufferResult</span> bufferCQ <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getIndexBuffer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferCQ <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> resetOffset<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>resetOffset <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getMinOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;schedule CQ offset invalid. offset={}, cqMinOffset={}, queueId={}&quot;</span><span class="token punctuation">,</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">,</span> resetOffset<span class="token punctuation">,</span> cq<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>resetOffset <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;schedule CQ offset invalid. offset={}, cqMaxOffset={}, queueId={}&quot;</span><span class="token punctuation">,</span>
                      <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">,</span> resetOffset<span class="token punctuation">,</span> cq<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            resetOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleNextTimerTask</span><span class="token punctuation">(</span>resetOffset<span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">long</span> nextOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span> cqExtUnit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历ConsumeQueue中的所有有效消息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取ConsumeQueue索引的三个关键属性</span>
            <span class="token keyword">long</span> offsetPy <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> sizePy <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> tagsCode <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span><span class="token function">isExtAddr</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token punctuation">.</span><span class="token function">getExt</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">,</span> cqExtUnit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    tagsCode <span class="token operator">=</span> cqExtUnit<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">//can&#39;t find ext content.So re compute tags code.</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG] can&#39;t find consume queue extend file content!addr={}, offsetPy={}, sizePy={}&quot;</span><span class="token punctuation">,</span>
                              tagsCode<span class="token punctuation">,</span> offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">long</span> msgStoreTime <span class="token operator">=</span> defaultMessageStore<span class="token punctuation">.</span><span class="token function">getCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pickupStoreTimestamp</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tagsCode <span class="token operator">=</span> <span class="token function">computeDeliverTimestamp</span><span class="token punctuation">(</span>delayLevel<span class="token punctuation">,</span> msgStoreTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// ConsumeQueue里面的tagsCode实际是一个时间点（投递时间点）</span>
            <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> deliverTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">correctDeliverTimestamp</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> tagsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nextOffset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 如果现在已经到了投递时间点，投递消息</span>
            <span class="token comment">// 如果现在还没到投递时间点，继续创建一个定时任务，countdown秒之后执行</span>
            <span class="token keyword">long</span> countdown <span class="token operator">=</span> deliverTimestamp <span class="token operator">-</span> now<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>countdown <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleNextTimerTask</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">MessageExt</span> msgExt <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">lookMessageByOffset</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>msgExt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">MessageExtBrokerInner</span> msgInner <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messageTimeup</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">RMQ_SYS_TRANS_HALF_TOPIC</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG] the real topic of schedule msg is {}, discard the msg. msg={}&quot;</span><span class="token punctuation">,</span>
                          msgInner<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 重新投递消息到CommitLog</span>
            <span class="token keyword">boolean</span> deliverSuc<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableAsyncDeliver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 异步投递</span>
                deliverSuc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncDeliver</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> msgExt<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 同步投递</span>
                deliverSuc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syncDeliver</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> msgExt<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 投递失败（流控、阻塞、投递异常等原因），等待0.1s再次执行投递任务</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deliverSuc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleNextTimerTask</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        nextOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduleMessageService, messageTimeup execute error, offset = {}&quot;</span><span class="token punctuation">,</span> nextOffset<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        bufferCQ<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 该条ConsumeQueue索引对应的消息如果未到投递时间，那么创建一个定时任务，到投递时间时执行</span>
    <span class="token comment">// 如果有还未投递的消息，创建定时任务后直接返回</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleNextTimerTask</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_WHILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">asyncDeliver</span><span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span> msgInner<span class="token punctuation">,</span> <span class="token class-name">String</span> msgId<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> offsetPy<span class="token punctuation">,</span>
    <span class="token keyword">int</span> sizePy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutResultProcess</span><span class="token punctuation">&gt;</span></span> processesQueue <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>deliverPendingTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Flow Control 流控，如果阻塞队列中元素数量大于阈值则触发流控</span>
    <span class="token keyword">int</span> currentPendingNum <span class="token operator">=</span> processesQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxPendingLimit <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getScheduleAsyncDeliverMaxPendingLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPendingNum <span class="token operator">&gt;</span> maxPendingLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Asynchronous deliver triggers flow control, &quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;currentPendingNum={}, maxPendingLimit={}&quot;</span><span class="token punctuation">,</span> currentPendingNum<span class="token punctuation">,</span> maxPendingLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//Blocked 阻塞，如果有一个投递任务重试 3 次以上，阻塞该延迟等级的消息投递，直到该任务投递成功</span>
    <span class="token class-name">PutResultProcess</span> firstProcess <span class="token operator">=</span> processesQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstProcess <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> firstProcess<span class="token punctuation">.</span><span class="token function">need2Blocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Asynchronous deliver block. info={}&quot;</span><span class="token punctuation">,</span> firstProcess<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">PutResultProcess</span> resultProcess <span class="token operator">=</span> <span class="token function">deliverMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> msgId<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    processesQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resultProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-异步投递过程状态更新任务" tabindex="-1"><a class="header-anchor" href="#_4-2-异步投递过程状态更新任务" aria-hidden="true">#</a> 4.2 异步投递过程状态更新任务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutResultProcess</span><span class="token punctuation">&gt;</span></span> pendingQueue <span class="token operator">=</span>
        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>deliverPendingTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PutResultProcess</span> putResultProcess<span class="token punctuation">;</span>
    <span class="token comment">// 循环获取队列中第一个投递任务，查看其执行状态并执行对应操作</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>putResultProcess <span class="token operator">=</span> pendingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>putResultProcess<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">SUCCESS</span><span class="token operator">:</span>
                    <span class="token comment">// 消息投递成功，从队列中移除该投递任务</span>
                    <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">,</span> putResultProcess<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pendingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">RUNNING</span><span class="token operator">:</span>
                    <span class="token comment">// 正在投递，不做操作</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">EXCEPTION</span><span class="token operator">:</span>
                    <span class="token comment">// 投递出错</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;HandlePutResultTask shutdown, info={}&quot;</span><span class="token punctuation">,</span> putResultProcess<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;putResultProcess error, info={}&quot;</span><span class="token punctuation">,</span> putResultProcess<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// onException 方法执行重试</span>
                    putResultProcess<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token constant">SKIP</span><span class="token operator">:</span>
                    <span class="token comment">// 跳过，直接从队列中移除</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;putResultProcess skip, info={}&quot;</span><span class="token punctuation">,</span> putResultProcess<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pendingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;HandlePutResultTask exception. info={}&quot;</span><span class="token punctuation">,</span> putResultProcess<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            putResultProcess<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 等待0.01s，继续下一次扫描</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleExecutorService
            <span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HandlePutResultTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayLevel<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DELAY_FOR_A_SLEEP</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Resend message, info: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gradually increase the resend interval.</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resendCount<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从 CommitLog 中查询消息完整信息</span>
        <span class="token class-name">MessageExt</span> msgExt <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">lookMessageByOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>physicOffset<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>physicSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果查询失败，检查重试次数，如果到达 6 次则打印日志并跳过该消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgExt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduleMessageService resend not found message. info: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token function">need2Skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">ProcessStatus</span><span class="token punctuation">.</span><span class="token constant">SKIP</span> <span class="token operator">:</span> <span class="token class-name">ProcessStatus</span><span class="token punctuation">.</span><span class="token constant">EXCEPTION</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">MessageExtBrokerInner</span> msgInner <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messageTimeup</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同步投递</span>
        <span class="token class-name">PutMessageResult</span> result <span class="token operator">=</span> <span class="token class-name">ScheduleMessageService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>writeMessageStore<span class="token punctuation">.</span><span class="token function">putMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据结果更新状态</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">getPutMessageStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">PUT_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Resend message success, info: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">ProcessStatus</span><span class="token punctuation">.</span><span class="token constant">EXCEPTION</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Resend message error, info: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,42);function q(E,T){const e=o("ExternalLinkIcon"),t=o("router-link");return l(),i("div",null,[n("p",null,[s("原文地址："),n("a",r,[s("http://hscarb.github.io/rocketmq/20220320-rocketmq-scheduled-message-4.9.3-improve.html"),a(e)])]),d,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#_1-概述"},{default:p(()=>[s("1. 概述")]),_:1})]),n("li",null,[a(t,{to:"#_2-改动解析"},{default:p(()=>[s("2. 改动解析")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_2-1-将多延迟等级延迟消息扫描和投递的任务从单线程执行改为多线程"},{default:p(()=>[s("2.1 将多延迟等级延迟消息扫描和投递的任务从单线程执行改为多线程")]),_:1})]),n("li",null,[a(t,{to:"#_2-2-支持延迟消息异步投递-提升-dledger-模式下的投递性能"},{default:p(()=>[s("2.2 支持延迟消息异步投递，提升 Dledger 模式下的投递性能")]),_:1})])])]),n("li",null,[a(t,{to:"#_3-异步投递详解"},{default:p(()=>[s("3. 异步投递详解")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_3-1-定时消息投递线程"},{default:p(()=>[s("3.1 定时消息投递线程")]),_:1})]),n("li",null,[a(t,{to:"#_3-2-投递过程状态更新线程"},{default:p(()=>[s("3.2 投递过程状态更新线程")]),_:1})])])]),n("li",null,[a(t,{to:"#_4-源码解析"},{default:p(()=>[s("4. 源码解析")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_4-1-定时消息投递任务"},{default:p(()=>[s("4.1 定时消息投递任务")]),_:1})]),n("li",null,[a(t,{to:"#_4-2-异步投递过程状态更新任务"},{default:p(()=>[s("4.2 异步投递过程状态更新任务")]),_:1})])])])])]),m,n("p",null,[s("在 RocketMQ 4.9.3 版本中，"),n("a",f,[s("@Git-Yang"),a(e)]),s(" 对延迟消息做了很大的优化，大幅度提升了延迟消息的性能。")]),n("p",null,[s("其中，"),n("a",g,[s("PR#3287"),a(e)]),s(" 将原先用来启动周期性任务的 "),b,s(" 改为使用 "),h,s("，将多延迟等级下同时发送延迟消息的性能提升了 3+ 倍。")]),n("p",null,[s("本文主要讲解的是另一个改动 "),n("a",y,[s("PR#3458"),a(e)]),s("：支持延迟消息的异步投递。老版本中，延迟消息到期投递到 CommitLog 的动作是同步的，在 Dledger 模式下性能很差。新的改动将延迟消息的到期投递模式改为可配置，使用 BrokerConfig 的 "),w,s(" 属性进行配置。改成异步投递后，在 Dledger 下的性能提升了 3 倍左右。")]),n("p",null,[s("本文着重讲解定时消息异步投递的逻辑，老版本的延迟消息流程和源码解析可以看这篇文章："),n("a",_,[s("RocketMQ 延迟消息（定时消息）"),a(e)])]),S,n("p",null,[s("改动后的性能变化，出处："),n("a",x,[s("https://github.com/apache/rocketmq/issues/3286"),a(e)])]),P])}const I=u(k,[["render",q],["__file","20220320-rocketmq-scheduled-message-4.9.3-improve.html.vue"]]);export{I as default};
