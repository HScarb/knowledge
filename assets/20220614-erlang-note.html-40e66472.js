import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-eaa093f0.js";const i={},u={href:"http://hscarb.github.io/other/20220614-erlang-note.html",target:"_blank",rel:"noopener noreferrer"},k=l(`<h1 id="erlang-学习笔记" tabindex="-1"><a class="header-anchor" href="#erlang-学习笔记" aria-hidden="true">#</a> Erlang 学习笔记</h1><h2 id="顺序编程" tabindex="-1"><a class="header-anchor" href="#顺序编程" aria-hidden="true">#</a> 顺序编程</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><h4 id="erlang-shell" tabindex="-1"><a class="header-anchor" href="#erlang-shell" aria-hidden="true">#</a> Erlang shell</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动</span>
erl
<span class="token comment"># 停止</span>
q<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 对应 init:stop()</span>
<span class="token comment"># 立即停止系统</span>
erlang:halt<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以挂接一个shell到集群里另一个Erlang节点上运行的Erlang系统，甚至还可以生成一个安全shell（secure shell，即ssh）直接连接远程计算机上运行的Erlang系统。通过它，可以与Erlang节点系统中任何节点上的任何程序进行交互。</p><p><code>f()</code> 命令让shell忘记现有的任何绑定。<br><code>help()</code> 命令获取帮助。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">6</span><span class="token operator">&gt;</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">*</span><span class="token operator">*</span> <span class="token atom">shell</span> <span class="token atom">internal</span> <span class="token atom">commands</span> <span class="token operator">*</span><span class="token operator">*</span>
<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">--</span> <span class="token atom">display</span> <span class="token atom">all</span> <span class="token atom">variable</span> <span class="token atom">bindings</span>
<span class="token function">e</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">repeat</span> <span class="token atom">the</span> <span class="token atom">expression</span> <span class="token atom">in</span> <span class="token atom">query</span> <span class="token operator">&lt;</span><span class="token variable">N</span><span class="token operator">&gt;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">--</span> <span class="token atom">forget</span> <span class="token atom">all</span> <span class="token atom">variable</span> <span class="token atom">bindings</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">forget</span> <span class="token atom">the</span> <span class="token atom">binding</span> <span class="token keyword">of</span> <span class="token atom">variable</span> <span class="token variable">X</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">--</span> <span class="token atom">history</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">)</span>     <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">module</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">,</span><span class="token variable">Func</span><span class="token punctuation">)</span><span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">function</span> <span class="token atom">in</span> <span class="token atom">module</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">,</span><span class="token variable">Func</span><span class="token punctuation">,</span><span class="token variable">Arity</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">function</span> <span class="token atom">with</span> <span class="token atom">arity</span> <span class="token atom">in</span> <span class="token atom">module</span>
<span class="token function">ht</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">a</span> <span class="token atom">module</span>&#39;<span class="token atom">s</span> <span class="token atom">types</span>
<span class="token function">ht</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">,</span><span class="token variable">Type</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">type</span> <span class="token atom">in</span> <span class="token atom">module</span>
<span class="token function">ht</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">,</span><span class="token variable">Type</span><span class="token punctuation">,</span><span class="token variable">Arity</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">type</span> <span class="token atom">with</span> <span class="token atom">arity</span> <span class="token atom">in</span> <span class="token atom">module</span>
<span class="token function">hcb</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">a</span> <span class="token atom">module</span>&#39;<span class="token atom">s</span> <span class="token atom">callbacks</span>
<span class="token function">hcb</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">,</span><span class="token variable">CB</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">callback</span> <span class="token atom">in</span> <span class="token atom">module</span>
<span class="token function">hcb</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">,</span><span class="token variable">CB</span><span class="token punctuation">,</span><span class="token variable">Arity</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">about</span> <span class="token atom">callback</span> <span class="token atom">with</span> <span class="token atom">arity</span> <span class="token atom">in</span> <span class="token atom">module</span>
<span class="token function">history</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">set</span> <span class="token atom">how</span> <span class="token atom">many</span> <span class="token atom">previous</span> <span class="token atom">commands</span> <span class="token atom">to</span> <span class="token atom">keep</span>
<span class="token function">results</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">set</span> <span class="token atom">how</span> <span class="token atom">many</span> <span class="token atom">previous</span> <span class="token atom">command</span> <span class="token atom">results</span> <span class="token atom">to</span> <span class="token atom">keep</span>
<span class="token function">catch_exception</span><span class="token punctuation">(</span><span class="token variable">B</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">how</span> <span class="token atom">exceptions</span> <span class="token atom">are</span> <span class="token atom">handled</span>
<span class="token function">v</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">use</span> <span class="token atom">the</span> <span class="token atom">value</span> <span class="token keyword">of</span> <span class="token atom">query</span> <span class="token operator">&lt;</span><span class="token variable">N</span><span class="token operator">&gt;</span>
<span class="token function">rd</span><span class="token punctuation">(</span><span class="token variable">R</span><span class="token punctuation">,</span><span class="token variable">D</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">define</span> <span class="token atom">a</span> <span class="token atom">record</span>
<span class="token function">rf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">remove</span> <span class="token atom">all</span> <span class="token atom">record</span> <span class="token atom">information</span>
<span class="token function">rf</span><span class="token punctuation">(</span><span class="token variable">R</span><span class="token punctuation">)</span>      <span class="token operator">--</span> <span class="token atom">remove</span> <span class="token atom">record</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token variable">R</span>
<span class="token function">rl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">display</span> <span class="token atom">all</span> <span class="token atom">record</span> <span class="token atom">information</span>
<span class="token function">rl</span><span class="token punctuation">(</span><span class="token variable">R</span><span class="token punctuation">)</span>      <span class="token operator">--</span> <span class="token atom">display</span> <span class="token atom">record</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token variable">R</span>
<span class="token function">rp</span><span class="token punctuation">(</span><span class="token variable">Term</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">display</span> <span class="token variable">Term</span> <span class="token atom">using</span> <span class="token atom">the</span> <span class="token atom">shell</span>&#39;<span class="token atom">s</span> <span class="token atom">record</span> <span class="token atom">information</span>
<span class="token function">rr</span><span class="token punctuation">(</span><span class="token variable">File</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">read</span> <span class="token atom">record</span> <span class="token atom">information</span> <span class="token atom">from</span> <span class="token variable">File</span> <span class="token punctuation">(</span><span class="token atom">wildcards</span> <span class="token atom">allowed</span><span class="token punctuation">)</span>
<span class="token function">rr</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">,</span><span class="token variable">R</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">read</span> <span class="token atom">selected</span> <span class="token atom">record</span> <span class="token atom">information</span> <span class="token atom">from</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token atom">s</span><span class="token punctuation">)</span>
<span class="token function">rr</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">,</span><span class="token variable">R</span><span class="token punctuation">,</span><span class="token variable">O</span><span class="token punctuation">)</span>  <span class="token operator">--</span> <span class="token atom">read</span> <span class="token atom">selected</span> <span class="token atom">record</span> <span class="token atom">information</span> <span class="token atom">with</span> <span class="token atom">options</span>
<span class="token operator">*</span><span class="token operator">*</span> <span class="token atom">commands</span> <span class="token atom">in</span> <span class="token atom">module</span> <span class="token atom">c</span> <span class="token operator">*</span><span class="token operator">*</span>
<span class="token function">bt</span><span class="token punctuation">(</span><span class="token variable">Pid</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">stack</span> <span class="token atom">backtrace</span> <span class="token atom">for</span> <span class="token atom">a</span> <span class="token atom">process</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">)</span>     <span class="token operator">--</span> <span class="token atom">compile</span> <span class="token operator">and</span> <span class="token atom">load</span> <span class="token atom">module</span> <span class="token operator">or</span> <span class="token atom">file</span> <span class="token operator">&lt;</span><span class="token variable">Mod</span><span class="token operator">&gt;</span>
<span class="token function">cd</span><span class="token punctuation">(</span><span class="token variable">Dir</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">change</span> <span class="token atom">working</span> <span class="token atom">directory</span>
<span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">flush</span> <span class="token atom">any</span> <span class="token atom">messages</span> <span class="token atom">sent</span> <span class="token atom">to</span> <span class="token atom">the</span> <span class="token atom">shell</span>
<span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">--</span> <span class="token atom">help</span> <span class="token atom">info</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token variable">M</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">module</span> <span class="token atom">documentation</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token variable">M</span><span class="token punctuation">,</span><span class="token variable">F</span><span class="token punctuation">)</span>     <span class="token operator">--</span> <span class="token atom">module</span> <span class="token atom">function</span> <span class="token atom">documentation</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token variable">M</span><span class="token punctuation">,</span><span class="token variable">F</span><span class="token punctuation">,</span><span class="token variable">A</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">module</span> <span class="token atom">function</span> <span class="token atom">arity</span> <span class="token atom">documentation</span>
<span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">--</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token atom">the</span> <span class="token atom">system</span>
<span class="token function">ni</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token atom">the</span> <span class="token atom">networked</span> <span class="token atom">system</span>
<span class="token function">i</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span><span class="token variable">Y</span><span class="token punctuation">,</span><span class="token variable">Z</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token atom">pid</span> <span class="token operator">&lt;</span><span class="token variable">X</span><span class="token punctuation">,</span><span class="token variable">Y</span><span class="token punctuation">,</span><span class="token variable">Z</span><span class="token operator">&gt;</span>
<span class="token function">l</span><span class="token punctuation">(</span><span class="token variable">Module</span><span class="token punctuation">)</span>  <span class="token operator">--</span> <span class="token atom">load</span> <span class="token operator">or</span> <span class="token atom">reload</span> <span class="token atom">module</span>
<span class="token function">lm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">load</span> <span class="token atom">all</span> <span class="token atom">modified</span> <span class="token atom">modules</span>
<span class="token function">lc</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">File</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">compile</span> <span class="token atom">a</span> <span class="token atom">list</span> <span class="token keyword">of</span> <span class="token variable">Erlang</span> <span class="token atom">modules</span>
<span class="token function">ls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">list</span> <span class="token atom">files</span> <span class="token atom">in</span> <span class="token atom">the</span> <span class="token atom">current</span> <span class="token atom">directory</span>
<span class="token function">ls</span><span class="token punctuation">(</span><span class="token variable">Dir</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">list</span> <span class="token atom">files</span> <span class="token atom">in</span> <span class="token atom">directory</span> <span class="token operator">&lt;</span><span class="token variable">Dir</span><span class="token operator">&gt;</span>
<span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">--</span> <span class="token atom">which</span> <span class="token atom">modules</span> <span class="token atom">are</span> <span class="token atom">loaded</span>
<span class="token function">m</span><span class="token punctuation">(</span><span class="token variable">Mod</span><span class="token punctuation">)</span>     <span class="token operator">--</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token atom">module</span> <span class="token operator">&lt;</span><span class="token variable">Mod</span><span class="token operator">&gt;</span>
<span class="token function">mm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">list</span> <span class="token atom">all</span> <span class="token atom">modified</span> <span class="token atom">modules</span>
<span class="token function">memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">memory</span> <span class="token atom">allocation</span> <span class="token atom">information</span>
<span class="token function">memory</span><span class="token punctuation">(</span><span class="token variable">T</span><span class="token punctuation">)</span>  <span class="token operator">--</span> <span class="token atom">memory</span> <span class="token atom">allocation</span> <span class="token atom">information</span> <span class="token keyword">of</span> <span class="token atom">type</span> <span class="token operator">&lt;</span><span class="token variable">T</span><span class="token operator">&gt;</span>
<span class="token function">nc</span><span class="token punctuation">(</span><span class="token variable">File</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">compile</span> <span class="token operator">and</span> <span class="token atom">load</span> <span class="token atom">code</span> <span class="token atom">in</span> <span class="token operator">&lt;</span><span class="token variable">File</span><span class="token operator">&gt;</span> <span class="token atom">on</span> <span class="token atom">all</span> <span class="token atom">nodes</span>
<span class="token function">nl</span><span class="token punctuation">(</span><span class="token variable">Module</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">load</span> <span class="token atom">module</span> <span class="token atom">on</span> <span class="token atom">all</span> <span class="token atom">nodes</span>
<span class="token function">pid</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span><span class="token variable">Y</span><span class="token punctuation">,</span><span class="token variable">Z</span><span class="token punctuation">)</span> <span class="token operator">--</span> <span class="token atom">convert</span> <span class="token variable">X</span><span class="token punctuation">,</span><span class="token variable">Y</span><span class="token punctuation">,</span><span class="token variable">Z</span> <span class="token atom">to</span> <span class="token atom">a</span> <span class="token variable">Pid</span>
<span class="token function">pwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">--</span> <span class="token atom">print</span> <span class="token atom">working</span> <span class="token atom">directory</span>
<span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">--</span> <span class="token atom">quit</span> <span class="token operator">-</span> <span class="token atom">shorthand</span> <span class="token atom">for</span> <span class="token atom">init</span><span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">regs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">--</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token atom">registered</span> <span class="token atom">processes</span>
<span class="token function">nregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">information</span> <span class="token atom">about</span> <span class="token atom">all</span> <span class="token atom">registered</span> <span class="token atom">processes</span>
<span class="token function">uptime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">--</span> <span class="token atom">print</span> <span class="token atom">node</span> <span class="token atom">uptime</span>
<span class="token function">xm</span><span class="token punctuation">(</span><span class="token variable">M</span><span class="token punctuation">)</span>      <span class="token operator">--</span> <span class="token atom">cross</span> <span class="token atom">reference</span> <span class="token atom">check</span> <span class="token atom">a</span> <span class="token atom">module</span>
<span class="token function">y</span><span class="token punctuation">(</span><span class="token variable">File</span><span class="token punctuation">)</span>    <span class="token operator">--</span> <span class="token atom">generate</span> <span class="token atom">a</span> <span class="token variable">Yecc</span> <span class="token atom">parser</span>
<span class="token operator">*</span><span class="token operator">*</span> <span class="token atom">commands</span> <span class="token atom">in</span> <span class="token atom">module</span> <span class="token atom">i</span> <span class="token punctuation">(</span><span class="token atom">interpreter</span> <span class="token atom">interface</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">*</span>
<span class="token function">ih</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">--</span> <span class="token atom">print</span> <span class="token atom">help</span> <span class="token atom">for</span> <span class="token atom">the</span> <span class="token atom">i</span> <span class="token atom">module</span>
<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="整数运算" tabindex="-1"><a class="header-anchor" href="#整数运算" aria-hidden="true">#</a> 整数运算</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4.</span>
<span class="token number">14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Erlang可以用任意长度的整数执行整数运算。在Erlang里，整数运算是精确的，因此无需担心运算溢出或无法用特定字长（ word size）来表示某个整数。</p><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token variable">X</span> <span class="token operator">=</span> <span class="token number">123.</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token variable">X</span><span class="token punctuation">.</span>
<span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有变量名都必须以大写字母开头。</li><li>Erlang 中的 <code>=</code> 是一个模式匹配操作符，当关联一个值与一个变量时，所下的是一种断言，也就是事实陈述。这个变量具有那个值，仅此而已。</li><li>X 不是一个变量，是一次性赋值变量，只能被赋值一次。</li><li>变量的作用域是它定义时所处的语汇单元。不存在全局变量或私有变量的说法。</li></ul><p>在Erlang里， =是一次模式匹配操作。 Lhs = Rhs 的真正意思是：计算右侧（ Rhs）的值，然后将结果与左侧（ Lhs）的模式相匹配。<br> 我们第一次说 X = SomeExpression时， Erlang对自己说：“我要做些什么才能让这条语句为真？”因为X还没有值，它可以绑定X到SomeExpression这个值上，这条语句就成立了。</p><p>这符合了 Erlang 这种函数式编程语言的不可变状态。</p><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">3.</span>
<span class="token number">1.6666666666666667</span>  <span class="token comment">% 用 / 给两个整数做除法时，结果会自动转换成浮点数。</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token number">4</span><span class="token operator">/</span><span class="token number">2.</span>
<span class="token number">2.0</span>     <span class="token comment">% 整除结果仍是浮点数</span>
<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">div</span> <span class="token number">3.</span>
<span class="token number">1</span>       <span class="token comment">% N 除以 M 然后舍去余数</span>
<span class="token number">4</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">rem</span> <span class="token number">3.</span>
<span class="token number">2</span>       <span class="token comment">% N 除以 M 后剩下的余数</span>
<span class="token number">5</span><span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">div</span> <span class="token number">2.</span>
<span class="token number">2</span>

<span class="token comment">% 浮点数的程序会存在和C等语言一样的浮点数取整与精度问题</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="原子" tabindex="-1"><a class="header-anchor" href="#原子" aria-hidden="true">#</a> 原子</h4><ul><li>表示常量值，也可以视作枚举类型。</li><li>原子是全局性的，而且不需要宏定义或包含文件就能实现。</li><li>原子以小写字母开头，后接一串字母、数字、下划线（_）或at（@）符号。</li><li>也可以放在单引号内，以大写字母开头或包含字母数字以外字符的原子。</li><li>原子的值就是它本身</li></ul><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h4><ul><li>数量固定的项目归组成单一的实体</li><li>元组里的字段没有名字，常用做法是将元组第一个元素设为一个原子，用来表示元组是什么。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token punctuation">{</span><span class="token atom">point</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">.</span>

<span class="token variable">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">person</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">name</span><span class="token punctuation">,</span> <span class="token atom">joe</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">height</span><span class="token punctuation">,</span> <span class="token number">1.82</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">footsize</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">eyecolour</span><span class="token punctuation">,</span> <span class="token atom">brown</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span>

<span class="token comment">% 用模式匹配的方式提取元组的值</span>
<span class="token variable">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">point</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">point</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">Y</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token variable">Point</span><span class="token punctuation">.</span>

<span class="token comment">% 用_作为占位符</span>
<span class="token variable">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">person</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">name</span><span class="token punctuation">,</span> <span class="token atom">joe</span><span class="token punctuation">,</span> <span class="token atom">armstrong</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">footsize</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token variable">_</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token variable">_</span><span class="token punctuation">,</span><span class="token variable">Who</span><span class="token punctuation">,</span><span class="token variable">_</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token variable">_</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token variable">Person</span><span class="token punctuation">.</span>
<span class="token variable">Who</span><span class="token punctuation">.</span>
<span class="token operator">&gt;</span> <span class="token atom">joe</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token atom">hello</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">cost</span><span class="token punctuation">,</span><span class="token atom">apple</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>用来存放任意数量的事物</li><li>第一个元素称为列表头，剩下元素是列表尾。</li><li>访问列表头是一种非常高效的操作，因此基本上所有的列表处理函数都从提取列表头开始，然后对它做一些操作，接着处理列表尾。</li><li>如果T是一个列表，那么[H|T]也是一个列表， 它的头是H，尾是T。竖线（|） 把列表的头与尾分隔开。 []是一个空列表。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 扩展列表</span>
<span class="token number">7</span><span class="token operator">&gt;</span> <span class="token variable">Things</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token number">8</span><span class="token operator">&gt;</span> <span class="token variable">Things1</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">oranges</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">newspaper</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">|</span><span class="token variable">Things</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">oranges</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">newspaper</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token comment">% 提取列表元素，[X|Y] = L（ X和Y都是未绑定变量）会提取列表头作为X，列表尾作为Y。</span>
<span class="token number">9</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">Buy1</span><span class="token punctuation">|</span><span class="token variable">Things2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">Things1</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">oranges</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">newspaper</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token number">10</span><span class="token operator">&gt;</span> <span class="token variable">Buy1</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">oranges</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
<span class="token number">11</span><span class="token operator">&gt;</span> <span class="token variable">Things2</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">newspaper</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token comment">%%</span>
<span class="token number">12</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">Buy2</span><span class="token punctuation">,</span><span class="token variable">Buy3</span><span class="token punctuation">|</span><span class="token variable">Things3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">Things2</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">newspaper</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token number">13</span><span class="token operator">&gt;</span> <span class="token variable">Buy2</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">newspaper</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token number">14</span><span class="token operator">&gt;</span> <span class="token variable">Buy3</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">apples</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span>
<span class="token number">15</span><span class="token operator">&gt;</span> <span class="token variable">Things3</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">pears</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">milk</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h4><p>严格来说，Erlang 里没有字符串。用整数组成的列表或一个二进制型表示字符串。当用整数列表表示字符串时，列表里的每个元素代表了一个Unicode字符。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">16</span><span class="token operator">&gt;</span> <span class="token variable">Name</span><span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">.</span>   <span class="token comment">% &quot;Hello&quot;其实只是一个列表的简写，这个列表包含了代表字符串里各个字符的整数字符代码</span>
<span class="token string">&quot;Hello&quot;</span>

<span class="token comment">% shell打印某个列表的值时，如果列表内的所有整数都代表可打印字符，它就会将其打印成字符串字面量。否则，打印成列表记法</span>
<span class="token number">17</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token number">18</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token string">&quot;Surprise&quot;</span>
<span class="token number">19</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span>

<span class="token comment">% 如果shell将某个整数列表打印成字符串，而你其实想让它打印成一列整数，那就必须使用格式化的写语句</span>
<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token variable">X</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token string">&quot;abc&quot;</span>
<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;~w~n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token variable">X</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span>

<span class="token comment">% $a实际上就是代表字符a的整数</span>
<span class="token number">20</span><span class="token operator">&gt;</span> <span class="token variable">I</span> <span class="token operator">=</span> <span class="token number">$s</span><span class="token punctuation">.</span>
<span class="token number">115</span>
<span class="token number">22</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">$S</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token string">&quot;Surprise&quot;</span>

<span class="token comment">% 必须使用特殊的语法才能输入某些字符，在打印列表时也要选择正确的格式惯例。</span>
<span class="token number">23</span><span class="token operator">&gt;</span> <span class="token variable">X</span><span class="token operator">=</span><span class="token string">&quot;a\\x{221e}b&quot;</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">8734</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span>
<span class="token number">24</span><span class="token operator">&gt;</span> <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;~ts~n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token variable">X</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">a</span>\\<span class="token atom">x</span><span class="token punctuation">{</span><span class="token number">221</span><span class="token variable">E</span><span class="token punctuation">}</span><span class="token atom">b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块与函数" tabindex="-1"><a class="header-anchor" href="#模块与函数" aria-hidden="true">#</a> 模块与函数</h3><h4 id="模块-module" tabindex="-1"><a class="header-anchor" href="#模块-module" aria-hidden="true">#</a> 模块：module</h4><p>模块是Erlang的基本代码单元。模块保存在扩展名为 <code>.erl</code> 的文件里，而且必须先编译才能运行模块里的代码。编译后的模块以 <code>.beam</code> 作为扩展名。</p><ul><li>逗号 <code>,</code> 分隔函数调用、数据构造和模式中的参数。</li><li>分号 <code>;</code> 分隔子句。我们能在很多地方看到子句，例如函数定义，以及case、 if、try..catch和receive表达式。</li><li>句号 <code>.</code>（后接空白）分隔函数整体，以及shell里的表达式。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% geometry.erl</span>
<span class="token operator">-</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token atom">geometry</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token comment">% 模块声明，模块名必须与存放该模块的主文件名相同</span>
<span class="token operator">-</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token atom">area</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token comment">% 导出声明，Name/N 指带有 N 个参数的函数 Name。已导出函数相当于公共方法，未导出函数相当于私有方法</span>

<span class="token comment">% 函数定义，area 函数有两个子句</span>
<span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">rectangle</span><span class="token punctuation">,</span> <span class="token variable">Width</span><span class="token punctuation">,</span> <span class="token variable">Height</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Width</span> <span class="token operator">*</span> <span class="token variable">Height</span><span class="token punctuation">;</span>     <span class="token comment">% 子句以分号隔开</span>
<span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">square</span><span class="token punctuation">,</span> <span class="token variable">Side</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Side</span> <span class="token operator">*</span> <span class="token variable">Side</span><span class="token punctuation">.</span>                    <span class="token comment">% 以句号结尾</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token atom">geometry</span><span class="token punctuation">)</span><span class="token punctuation">.</span>         <span class="token comment">% 在 erlang shell 中编译，编译之后产生 geometry.beam 目标代码块</span>
<span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span><span class="token atom">geometry</span><span class="token punctuation">}</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token atom">geometry</span><span class="token punctuation">:</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">rectangle</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   <span class="token comment">% 调用函数，要附上模块名</span>
<span class="token number">50</span>
<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token atom">geometry</span><span class="token punctuation">:</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">square</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 
<span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">-</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token atom">geometry</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token atom">area</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token atom">test</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">% 添加测试，测试仅仅需要模式匹配和=</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token number">12</span> <span class="token operator">=</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">rectangle</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token number">144</span> <span class="token operator">=</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">square</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">tests_worked</span><span class="token punctuation">.</span>

<span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">rectangle</span><span class="token punctuation">,</span> <span class="token variable">Width</span><span class="token punctuation">,</span> <span class="token variable">Height</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token variable">Width</span> <span class="token operator">*</span> <span class="token variable">Height</span><span class="token punctuation">;</span>
<span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">square</span><span class="token punctuation">,</span> <span class="token variable">Side</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token variable">Side</span> <span class="token operator">*</span> <span class="token variable">Side</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">5</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token atom">geometry</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span><span class="token atom">geometry</span><span class="token punctuation">}</span>
<span class="token number">6</span><span class="token operator">&gt;</span> <span class="token atom">geometry</span><span class="token punctuation">:</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">tests_worked</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 情况分析函数</span>
<span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">What</span><span class="token punctuation">,</span> <span class="token variable">N</span><span class="token punctuation">}</span> <span class="token punctuation">|</span> <span class="token variable">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">shop</span><span class="token punctuation">:</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token variable">What</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">N</span> <span class="token operator">+</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token variable">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="高阶函数-fun" tabindex="-1"><a class="header-anchor" href="#高阶函数-fun" aria-hidden="true">#</a> 高阶函数 fun</h4><ul><li>Erlang 是函数式编程语言，表示函数可以被用作参数，也可以返回函数。</li><li>操作其他函数的函数被称为高阶函数。</li><li>代表函数的数据类型是 <code>fun</code>。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token variable">Double</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token variable">X</span> <span class="token keyword">end</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token variable">Double</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">4</span>
<span class="token comment">% fun 可以有多个子句</span>
<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token variable">TempConvert</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">c</span><span class="token punctuation">,</span> <span class="token variable">C</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token atom">f</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token variable">C</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">f</span><span class="token punctuation">,</span> <span class="token variable">F</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token atom">c</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">F</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">}</span>
                 <span class="token keyword">end</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">4</span><span class="token operator">&gt;</span> <span class="token variable">TempConvert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">c</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">f</span><span class="token punctuation">,</span><span class="token number">212.0</span><span class="token punctuation">}</span>
<span class="token number">5</span><span class="token operator">&gt;</span> <span class="token variable">TempConvert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">f</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">c</span><span class="token punctuation">,</span><span class="token number">100.0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 标准库高阶函数</span>
<span class="token comment">%% map</span>
<span class="token number">6</span><span class="token operator">&gt;</span> <span class="token variable">L</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token number">7</span><span class="token operator">&gt;</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token variable">X</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token variable">L</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>

<span class="token comment">%% filter</span>
<span class="token number">8</span><span class="token operator">&gt;</span> <span class="token variable">Even</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token variable">X</span> <span class="token operator">rem</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=:=</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">9</span><span class="token operator">&gt;</span> <span class="token variable">Even</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token boolean">true</span>
<span class="token number">10</span><span class="token operator">&gt;</span> <span class="token variable">Even</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token boolean">false</span>
<span class="token number">11</span><span class="token operator">&gt;</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token variable">Even</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span>
<span class="token number">12</span><span class="token operator">&gt;</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">Even</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 返回 fun 的函数，括号内的东西就是返回值</span>
<span class="token number">13</span><span class="token operator">&gt;</span> <span class="token variable">MakeTest</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">L</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">member</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">L</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">15</span><span class="token operator">&gt;</span> <span class="token variable">Fruit</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token atom">apple</span><span class="token punctuation">,</span> <span class="token atom">pear</span><span class="token punctuation">,</span> <span class="token atom">orange</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token atom">apple</span><span class="token punctuation">,</span><span class="token atom">pear</span><span class="token punctuation">,</span><span class="token atom">orange</span><span class="token punctuation">]</span>
<span class="token number">16</span><span class="token operator">&gt;</span> <span class="token variable">IsFruit</span> <span class="token operator">=</span> <span class="token variable">MakeTest</span><span class="token punctuation">(</span><span class="token variable">Fruit</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">17</span><span class="token operator">&gt;</span> <span class="token variable">IsFruit</span><span class="token punctuation">(</span><span class="token atom">pear</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token boolean">true</span>
<span class="token number">18</span><span class="token operator">&gt;</span> <span class="token variable">IsFruit</span><span class="token punctuation">(</span><span class="token atom">dog</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token boolean">false</span>
<span class="token number">19</span><span class="token operator">&gt;</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">IsFruit</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token atom">dog</span><span class="token punctuation">,</span><span class="token atom">orange</span><span class="token punctuation">,</span><span class="token atom">cat</span><span class="token punctuation">,</span><span class="token atom">apple</span><span class="token punctuation">,</span><span class="token atom">bear</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token atom">orange</span><span class="token punctuation">,</span><span class="token atom">apple</span><span class="token punctuation">]</span>

<span class="token number">22</span><span class="token operator">&gt;</span> <span class="token variable">Mult</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">Times</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">X</span> <span class="token operator">*</span> <span class="token variable">Times</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">23</span><span class="token operator">&gt;</span> <span class="token variable">Triple</span> <span class="token operator">=</span> <span class="token variable">Mult</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token variable">Fun</span><span class="token operator">&lt;</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token number">44.65746770</span><span class="token operator">&gt;</span>
<span class="token number">24</span><span class="token operator">&gt;</span> <span class="token variable">Triple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="实现-for" tabindex="-1"><a class="header-anchor" href="#实现-for" aria-hidden="true">#</a> 实现 for</h5><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% Erlang 没有 for 循环，而是需要自己编写控制结构</span>

<span class="token comment">% 创建列表[F(1), F(2), ..., F(10)]</span>
<span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">Max</span><span class="token punctuation">,</span> <span class="token variable">Max</span><span class="token punctuation">,</span> <span class="token variable">F</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">F</span><span class="token punctuation">(</span><span class="token variable">Max</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">I</span><span class="token punctuation">,</span> <span class="token variable">Max</span><span class="token punctuation">,</span> <span class="token variable">F</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">F</span><span class="token punctuation">(</span><span class="token variable">I</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">I</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">Max</span><span class="token punctuation">,</span> <span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>

<span class="token number">9</span><span class="token operator">&gt;</span> <span class="token atom">lib_misc</span><span class="token punctuation">:</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">I</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token variable">I</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token number">10</span><span class="token operator">&gt;</span> <span class="token atom">lib_misc</span><span class="token punctuation">:</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">I</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token variable">I</span><span class="token operator">*</span><span class="token variable">I</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表处理-sum、map" tabindex="-1"><a class="header-anchor" href="#列表处理-sum、map" aria-hidden="true">#</a> 列表处理（sum、map）</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">%% 列表求和函数</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">H</span> <span class="token punctuation">|</span> <span class="token variable">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">H</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token variable">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0.</span>

<span class="token comment">%% map 函数</span>
<span class="token function">map</span><span class="token punctuation">(</span><span class="token variable">_</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">map</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">H</span> <span class="token punctuation">|</span> <span class="token variable">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">F</span><span class="token punctuation">(</span><span class="token variable">H</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">,</span> <span class="token variable">T</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>

<span class="token function">total</span><span class="token punctuation">(</span><span class="token variable">L</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">What</span><span class="token punctuation">,</span> <span class="token variable">N</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">shop</span><span class="token punctuation">:</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token variable">What</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">N</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token variable">L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表推导-f-x-x-l" tabindex="-1"><a class="header-anchor" href="#列表推导-f-x-x-l" aria-hidden="true">#</a> 列表推导（[F(X) || X &lt;- L]）</h4><p>列表推导（list comprehension）是无需使用fun、 map或filter就能创建列表的表达式。它让程序变得更短，更容易理解。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token variable">L</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span> 
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token variable">X</span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token variable">X</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token variable">L</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token comment">% [F(X) || X &lt;- L]：由 F(X) 组成的列表（X 从列表 L 中提取）</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表推导的常规形式</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token punctuation">[</span><span class="token variable">X</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">Qualifier1</span><span class="token punctuation">,</span> <span class="token variable">Qualifier2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>X 是任一表达式，后面的限定符可以是生成器、位串生成器或过滤器。</p><ul><li>生成器（generator）的写法是 <code>Pattern &lt;- ListExpr</code> ，其中的 <code>ListExp</code> 必须是一个能够得出列表的表达式。</li><li>位串（bitstring）生成器的写法是 <code>BitStringPattern &lt;= BitStringExpr</code> ，其中的 <code>BitStringExpr</code> 必须是一个能够得出位串的表达式。</li><li>过滤器（filter）既可以是<strong>判断函数（即返回true或false的函数）</strong>，也可以是<strong>布尔表达式</strong>。请注意，列表推导里的生成器部分起着过滤器的作用</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">%% 快速排序</span>
<span class="token function">qsort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">qsort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">Pivot</span> <span class="token punctuation">|</span> <span class="token variable">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">X</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">X</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token variable">T</span><span class="token punctuation">,</span> <span class="token variable">X</span> <span class="token operator">&lt;</span> <span class="token variable">Pivot</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment">% 生成器 + 过滤器，生成一个比 Pivot 小的数组成的列表，递归</span>
  <span class="token operator">++</span> <span class="token punctuation">[</span><span class="token variable">Pivot</span><span class="token punctuation">]</span>                              <span class="token comment">% ++ 是中缀插入操作符，在中间插入 Pivot</span>
  <span class="token operator">++</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">X</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">X</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token variable">T</span><span class="token punctuation">,</span> <span class="token variable">X</span> <span class="token operator">&gt;=</span> <span class="token variable">Pivot</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">%% 毕达哥拉斯三元数组</span>
<span class="token comment">%% 提取1到N的所有A值，1到N的所有B值，1到N的所有C值，条件是A + B + C小于等于N并且A*A + B*B = C*C。</span>
<span class="token function">pythag</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token variable">A</span><span class="token punctuation">,</span> <span class="token variable">B</span><span class="token punctuation">,</span> <span class="token variable">C</span><span class="token punctuation">}</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>
    <span class="token variable">A</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">seq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">N</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token variable">B</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">seq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">N</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token variable">C</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">seq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">N</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token variable">A</span> <span class="token operator">+</span> <span class="token variable">B</span> <span class="token operator">+</span> <span class="token variable">C</span> <span class="token operator">=</span><span class="token operator">&lt;</span> <span class="token variable">N</span><span class="token punctuation">,</span>
    <span class="token variable">A</span> <span class="token operator">*</span> <span class="token variable">A</span> <span class="token operator">+</span> <span class="token variable">B</span> <span class="token operator">*</span> <span class="token variable">B</span> <span class="token operator">=:=</span> <span class="token variable">C</span> <span class="token operator">*</span> <span class="token variable">C</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h4><p>built-in function，是那些作为Erlang语言定义一部分的函数。有些内置函数是用Erlang实现的，但大多数是用Erlang虚拟机里的底层操作实现的。最常用的内置函数（例如list_to_tuple）是自动导入的。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">4</span><span class="token operator">&gt;</span> <span class="token function">list_to_tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token atom">cat</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token atom">cat</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">}</span>
<span class="token number">5</span><span class="token operator">&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关卡-when" tabindex="-1"><a class="header-anchor" href="#关卡-when" aria-hidden="true">#</a> 关卡（when）</h4><ul><li>关卡（guard）是一种结构，可以用它来增加模式匹配的威力，它通过 <code>when</code> 引入。通过使用关卡，可以<strong>对某个模式里的变量执行简单的测试和比较</strong>。 <ul><li>关卡由一系列关卡表达式组成，由 <code>,</code> 分割，都为 true 是值才为 true。（AND）</li></ul></li><li>关卡序列（guard sequence）是指单一或一系列的关卡，用 <code>;</code> 分割，只要一个为 true，它的值就为 true。（OR）</li><li>原子 true 关卡防止在某个 if 表达式的最后。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% Guard 是用于增强模式匹配的结构。</span>
<span class="token comment">% Guard 可用于简单的测试和比较。</span>
<span class="token comment">% Guard 可用于函数定义的头部，以\`when\`关键字开头，或者其他可以使用表达式的地方。</span>
<span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">Y</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token variable">X</span> <span class="token operator">&gt;</span> <span class="token variable">Y</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">X</span><span class="token punctuation">;</span>
<span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">Y</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Y</span><span class="token punctuation">.</span>

<span class="token comment">% guard 可以由一系列 guard 表达式组成，这些表达式以逗号分隔。</span>
<span class="token comment">% \`GuardExpr1, GuardExpr2, ..., GuardExprN\` 为真，当且仅当每个 guard 表达式均为真。</span>
<span class="token function">is_cat</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token function">is_atom</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">A</span> <span class="token operator">=:=</span> <span class="token atom">cat</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token function">is_cat</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">.</span>
<span class="token function">is_dog</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token function">is_atom</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">A</span> <span class="token operator">=:=</span> <span class="token atom">dog</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token function">is_dog</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">.</span>

<span class="token comment">% guard 序列 \`G1; G2; ...; Gn\` 为真，当且仅当其中任意一个 guard 表达式为真。</span>
<span class="token function">is_pet</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token function">is_dog</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">is_cat</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token function">is_pet</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="case-表达式" tabindex="-1"><a class="header-anchor" href="#case-表达式" aria-hidden="true">#</a> case 表达式</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token keyword">case</span> <span class="token variable">Expression</span> <span class="token keyword">of</span>
  <span class="token variable">Pattern1</span> <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token variable">Guard1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Body1</span><span class="token punctuation">;</span>
  <span class="token variable">Pattern2</span> <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token variable">Guard2</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Body2</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">end</span>

<span class="token comment">% \`case\` 表达式。</span>
<span class="token comment">% \`filter\` 返回由列表\`L\`中所有满足\`P(x)\`为真的元素\`X\`组成的列表。</span>
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">P</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">H</span><span class="token punctuation">|</span><span class="token variable">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">case</span> <span class="token variable">P</span><span class="token punctuation">(</span><span class="token variable">H</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
    <span class="token boolean">true</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">H</span><span class="token punctuation">|</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">P</span><span class="token punctuation">,</span> <span class="token variable">T</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token boolean">false</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">P</span><span class="token punctuation">,</span> <span class="token variable">T</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">P</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">X</span> <span class="token operator">rem</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">% [2, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>Expression</code> 被执行，假设它的值为 <code>Value</code></li><li><code>Value</code> 轮流与 <code>Pattern1</code>（带有可选的关卡 <code>Guard1</code>）、<code>Pattern2</code> 等模式进行匹配，直到匹配成功。</li><li>一旦发现匹配，相应的表达式序列就会执行，而表达式序列执行的结果就是 <code>case</code> 表达式的值。如果所有模式都不匹配，就会发生异常错误（exception）。</li></ol><h4 id="if-表达式" tabindex="-1"><a class="header-anchor" href="#if-表达式" aria-hidden="true">#</a> if 表达式</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token keyword">if</span>
  <span class="token variable">Guard1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Expr_seq1</span><span class="token punctuation">;</span>
  <span class="token variable">Guard2</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Expr_seq2</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">end</span>

<span class="token comment">% \`if\` 表达式。</span>
<span class="token function">max</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">Y</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">if</span>
    <span class="token variable">X</span> <span class="token operator">&gt;</span> <span class="token variable">Y</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">X</span><span class="token punctuation">;</span>
    <span class="token variable">X</span> <span class="token operator">&lt;</span> <span class="token variable">Y</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Y</span><span class="token punctuation">;</span>
    <span class="token boolean">true</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">nil</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>执行 <code>Guard1</code>。 如果得到的值为 <code>true</code>，那么if的值就是执行表达式序列 <code>Expr_seq1</code> 所得到的值。</li><li>如果 <code>Guard1</code> 不成功，就会执行 <code>Guard2</code>， 以此类推，直到某个关卡成功为止。</li><li>if表达式必须至少有一个关卡的执行结果为true， 否则就会发生异常错误。</li><li>很多时候， <code>if</code> 表达式的最后一个关卡是原子 <code>true</code>， 确保当其他关卡都失败时表达式的最后部分会被执行。（相当于最后带 else）因为 erlang 的所有表达式都应该有值。</li></ol><h4 id="归集器" tabindex="-1"><a class="header-anchor" href="#归集器" aria-hidden="true">#</a> 归集器</h4><p>只遍历列表一次，返回两个列表。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">%% 归集器</span>
<span class="token function">odds_and_even</span><span class="token punctuation">(</span><span class="token variable">L</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">odds_and_evens_acc</span><span class="token punctuation">(</span><span class="token variable">L</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">odds_and_evens_acc</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">H</span><span class="token punctuation">|</span><span class="token variable">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">Odds</span><span class="token punctuation">,</span> <span class="token variable">Evens</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token variable">H</span> <span class="token operator">rem</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
    <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">odds_and_evens_acc</span><span class="token punctuation">(</span><span class="token variable">T</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">H</span><span class="token punctuation">|</span><span class="token variable">Odds</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">Evens</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">odds_and_evens_acc</span><span class="token punctuation">(</span><span class="token variable">T</span><span class="token punctuation">,</span> <span class="token variable">Odds</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">H</span><span class="token punctuation">|</span><span class="token variable">Evens</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token function">odds_and_evens_acc</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">Odds</span><span class="token punctuation">,</span> <span class="token variable">Evens</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token variable">Odds</span><span class="token punctuation">,</span> <span class="token variable">Evens</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="记录-record-与映射组-map" tabindex="-1"><a class="header-anchor" href="#记录-record-与映射组-map" aria-hidden="true">#</a> 记录（record）与映射组（map）</h3><p><strong>元组</strong>用于保存固定数量的元素，而<strong>列表</strong>用于保存可变数量的元素。<strong>记录</strong>其实就是<strong>元组</strong>的另一种形式。</p><ul><li>使用 record：有一大堆元组，并且每个元组都有相同的结构</li><li>使用 map：键值对</li></ul><h4 id="record" tabindex="-1"><a class="header-anchor" href="#record" aria-hidden="true">#</a> record</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% Record 可以将元组中的元素绑定到特定的名称。</span>
<span class="token comment">% Record 定义可以包含在 Erlang 源代码中，也可以放在后缀为\`.hrl\`的文件中（Erlang 源代码中 include 这些文件）。</span>
<span class="token operator">-</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token atom">todo</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token atom">status</span> <span class="token operator">=</span> <span class="token atom">reminder</span><span class="token punctuation">,</span>  <span class="token comment">% Default value</span>
  <span class="token atom">who</span> <span class="token operator">=</span> <span class="token atom">joe</span><span class="token punctuation">,</span>
  <span class="token atom">text</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">% 在定义某个 record 之前，我们需要在 shell 中导入 record 的定义。</span>
<span class="token comment">% 我们可以使用 shell 函数\`rr\` (read records 的简称）。</span>
<span class="token function">rr</span><span class="token punctuation">(</span><span class="token string">&quot;records.hrl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token comment">% [todo]</span>

<span class="token comment">% 创建和更新 record。</span>
<span class="token variable">X</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">todo</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>  <span class="token comment">% 创建 todo，所有键都是原子</span>
<span class="token comment">% #todo{status = reminder, who = joe, text = undefined}</span>
<span class="token variable">X1</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">todo</span><span class="token punctuation">{</span><span class="token atom">status</span> <span class="token operator">=</span> <span class="token atom">urgent</span><span class="token punctuation">,</span> <span class="token atom">text</span> <span class="token operator">=</span> <span class="token string">&quot;Fix errata in book&quot;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
<span class="token comment">% #todo{status = urgent, who = joe, text = &quot;Fix errata in book&quot;}</span>
<span class="token variable">X2</span> <span class="token operator">=</span> <span class="token variable">X1</span><span class="token punctuation">#</span><span class="token atom">todo</span><span class="token punctuation">{</span><span class="token atom">status</span> <span class="token operator">=</span> <span class="token atom">done</span><span class="token punctuation">}</span><span class="token punctuation">.</span>  <span class="token comment">% 创建 X1 的副本，并修改 status 为 done</span>
<span class="token comment">% #todo{status = done,who = joe,text = &quot;Fix errata in book&quot;}</span>

<span class="token comment">% 提取 record 字段</span>
<span class="token operator">&gt;</span> <span class="token punctuation">#</span><span class="token atom">todo</span><span class="token punctuation">{</span><span class="token atom">who</span><span class="token operator">=</span><span class="token variable">W</span><span class="token punctuation">,</span> <span class="token atom">text</span><span class="token operator">=</span><span class="token variable">Txt</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token variable">X2</span><span class="token punctuation">.</span>
<span class="token operator">&gt;</span> <span class="token variable">W</span><span class="token punctuation">.</span>
<span class="token atom">joe</span>
<span class="token operator">&gt;</span> <span class="token variable">Txt</span><span class="token punctuation">.</span>
<span class="token string">&quot;Fix errata in book&quot;</span>
<span class="token comment">% 如果只是想要记录里的单个字段，就可以使用“点语法”来提取该字段。</span>
<span class="token operator">&gt;</span> <span class="token variable">X2</span><span class="token punctuation">#</span><span class="token atom">todo</span><span class="token punctuation">.</span><span class="token atom">text</span><span class="token punctuation">.</span>
<span class="token string">&quot;Fix errata in book&quot;</span>

<span class="token comment">% 让 shell 忘掉 todo 定义</span>
<span class="token function">rf</span><span class="token punctuation">(</span><span class="token atom">todo</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h4><ul><li>映射组在系统内部是作为有序集合存储的，打印时总是使用各键排序后的顺序。</li><li>表达式K =&gt; V有两种用途，一种是将现有键K的值更新为新值V，另一种是给映射组添加一个全新的K-V对。这个操作总是成功的。</li><li>表达式K := V的作用是将现有键K的值更新为新值V。 如果被更新的映射组不包含键K，这个操作就会失败。</li><li>映射组在比较时首先会比大小，然后再按照键的排序比较键和值。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 创建 map</span>
<span class="token operator">&gt;</span> <span class="token variable">F1</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">a</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token atom">b</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">.</span> 
<span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">a</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token atom">b</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">}</span>

<span class="token comment">% =&gt; 更新或设值</span>
<span class="token number">11</span><span class="token operator">&gt;</span> <span class="token variable">F3</span> <span class="token operator">=</span> <span class="token variable">F1</span><span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">c</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token atom">xx</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
<span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">a</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token atom">b</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token atom">c</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token atom">xx</span><span class="token punctuation">}</span>
<span class="token comment">% := 只能更新值</span>
<span class="token number">12</span><span class="token operator">&gt;</span> <span class="token variable">F4</span><span class="token operator">=</span><span class="token variable">F1</span><span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">c</span> <span class="token operator">:=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
<span class="token operator">*</span><span class="token operator">*</span> <span class="token atom">exception</span> <span class="token atom">error</span><span class="token punctuation">:</span> <span class="token atom">bad</span> <span class="token atom">key</span><span class="token punctuation">:</span> <span class="token atom">c</span>
     <span class="token atom">in</span> <span class="token atom">function</span>  <span class="token atom">maps</span><span class="token punctuation">:</span><span class="token atom">update</span><span class="token operator">/</span><span class="token number">3</span>
        <span class="token atom">called</span> <span class="token atom">as</span> <span class="token atom">maps</span><span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token atom">c</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">a</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token atom">b</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token atom">argument</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token operator">not</span> <span class="token atom">a</span> <span class="token atom">map</span>
     <span class="token atom">in</span> <span class="token atom">call</span> <span class="token atom">from</span> <span class="token atom">erl_eval</span><span class="token punctuation">:</span><span class="token quoted-atom atom">&#39;-expr/5-fun-0-&#39;</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token atom">erl_eval</span><span class="token punctuation">.</span><span class="token atom">erl</span><span class="token punctuation">,</span> <span class="token atom">line</span> <span class="token number">256</span><span class="token punctuation">)</span>
     <span class="token atom">in</span> <span class="token atom">call</span> <span class="token atom">from</span> <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token atom">foldl</span><span class="token operator">/</span><span class="token number">3</span> <span class="token punctuation">(</span><span class="token atom">lists</span><span class="token punctuation">.</span><span class="token atom">erl</span><span class="token punctuation">,</span> <span class="token atom">line</span> <span class="token number">1267</span><span class="token punctuation">)</span>
<span class="token number">13</span><span class="token operator">&gt;</span> <span class="token variable">F4</span> <span class="token operator">=</span> <span class="token variable">F3</span><span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">c</span> <span class="token operator">:=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">.</span> 
<span class="token punctuation">#</span><span class="token punctuation">{</span><span class="token atom">a</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token atom">b</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token atom">c</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206160157999.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206160157692.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206160159946.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="顺序程序的错误处理" tabindex="-1"><a class="header-anchor" href="#顺序程序的错误处理" aria-hidden="true">#</a> 顺序程序的错误处理</h3><ul><li>exit(Why) <ul><li>当你<strong>确实想要终止当前进程</strong>时就用它。如果这个异常错误没有被捕捉到，信号 <code>{&#39;EXIT&#39;, Pid,Why}</code> 就会被广播给当前进程链接的所有进程。</li></ul></li><li>throw(Why) <ul><li>这个函数的作用是抛出一个<strong>调用者可能想要捕捉的异常错误</strong>。在这种情况下，我们<strong>注明</strong>了<br> 被调用函数可能会抛出这个异常错误。有两种方法可以代替它使用 <ul><li>为通常的情形编写代码并且有意忽略异常错误</li><li>把调用封装在一个 <code>try...catch</code> 表达式里， 然后对错误进行处理。</li></ul></li></ul></li><li>error(Why) <ul><li>这个函数的作用是指示“崩溃性错误”，也就是<strong>调用者没有准备好处理的非常严重的问题</strong>。它与系统内部生成的错误差不多。</li></ul></li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 当遇到内部错误或显式调用时，会触发异常。</span>
<span class="token comment">% 显式调用包括 \`throw(Exception)\`, \`exit(Exception)\` 和</span>
<span class="token comment">% \`erlang:error(Exception)\`.</span>
<span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">a</span><span class="token punctuation">;</span>
<span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">throw</span><span class="token punctuation">(</span><span class="token atom">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token atom">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token quoted-atom atom">&#39;EXIT&#39;</span><span class="token punctuation">,</span> <span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">erlang</span><span class="token punctuation">:</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token atom">a</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">% Erlang 有两种捕获异常的方法。其一是将调用包裹在\`try...catch\`表达式中。</span>
<span class="token function">catcher</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">try</span> <span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
    <span class="token variable">Val</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">normal</span><span class="token punctuation">,</span> <span class="token variable">Val</span><span class="token punctuation">}</span>
  <span class="token keyword">catch</span>
    <span class="token atom">throw</span><span class="token punctuation">:</span><span class="token variable">X</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">caught</span><span class="token punctuation">,</span> <span class="token atom">thrown</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token atom">exit</span><span class="token punctuation">:</span><span class="token variable">X</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">caught</span><span class="token punctuation">,</span> <span class="token atom">exited</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token atom">error</span><span class="token punctuation">:</span><span class="token variable">X</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">caught</span><span class="token punctuation">,</span> <span class="token atom">error</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>

<span class="token comment">% 另一种方式是将调用包裹在\`catch\`表达式中。</span>
<span class="token comment">% 此时异常会被转化为一个描述错误的元组。</span>
<span class="token function">catcher</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">catch</span> <span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用-try-catch-捕获异常" tabindex="-1"><a class="header-anchor" href="#用-try-catch-捕获异常" aria-hidden="true">#</a> 用 try ... catch 捕获异常</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206170054163.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>try ... catch</code> 具有一个值</li><li><code>try ... catch</code> 表达式和case表达式之间的相似性，像是它的强化版，基本上是 <code>case</code> 表达式加上最后的 <code>catch</code> 和 <code>after</code> 区块。</li></ul><p>首先执行 <code>FuncOrExpessionSeq</code> 。 如果执行过程没有抛出异常错误，那么函数的返回值就会与Pattern1（ 以及可选的关卡Guard1）、 Pattern2等模式进行匹配，直到匹配成功。如果能匹配，那么整个 <code>try...catch</code> 的值就通过执行匹配模式之后的表达式序列得出。<br> 如果 <code>FuncOrExpressionSeq</code> 在执行中抛出了异常错误，那么ExPattern1等捕捉模式就会与它进行匹配，找出应该执行哪一段表达式序列。ExceptionType是一个原子（ throw、exit和error其中之一），告诉我们异常错误是如何生成的。如果省略了ExceptionType， 就会使用默认值throw。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% Erlang 有两种捕获异常的方法。其一是将调用包裹在\`try...catch\`表达式中。</span>
<span class="token function">catcher</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">try</span> <span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
    <span class="token variable">Val</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">normal</span><span class="token punctuation">,</span> <span class="token variable">Val</span><span class="token punctuation">}</span>
  <span class="token keyword">catch</span>
    <span class="token atom">throw</span><span class="token punctuation">:</span><span class="token variable">X</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">caught</span><span class="token punctuation">,</span> <span class="token atom">thrown</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token atom">exit</span><span class="token punctuation">:</span><span class="token variable">X</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">caught</span><span class="token punctuation">,</span> <span class="token atom">exited</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token atom">error</span><span class="token punctuation">:</span><span class="token variable">X</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token variable">N</span><span class="token punctuation">,</span> <span class="token atom">caught</span><span class="token punctuation">,</span> <span class="token atom">error</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>

<span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">[</span><span class="token function">catcher</span><span class="token punctuation">(</span><span class="token variable">I</span><span class="token punctuation">)</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">I</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>

<span class="token comment">% 提供了概括信息</span>
<span class="token operator">&gt;</span><span class="token atom">try_test</span><span class="token punctuation">:</span><span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token atom">normal</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token atom">caught</span><span class="token punctuation">,</span><span class="token atom">thrown</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token atom">caught</span><span class="token punctuation">,</span><span class="token atom">exited</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token atom">normal</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token quoted-atom atom">&#39;EXIT&#39;</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token atom">caught</span><span class="token punctuation">,</span><span class="token atom">error</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用-catch-捕捉异常错误" tabindex="-1"><a class="header-anchor" href="#用-catch-捕捉异常错误" aria-hidden="true">#</a> 用 catch 捕捉异常错误</h4><p><code>catch</code> 和 <code>try ... catch</code> 里的 <code>catch</code> 不是一回事，异常错误如果发生在 <code>catch</code> 语句里， 就会被转换成一个描述此错误的 <code>{&#39;EXIT&#39;, ...}</code> <strong>元组</strong>。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 另一种方式是将调用包裹在\`catch\`表达式中。</span>
<span class="token comment">% 此时异常会被转化为一个描述错误的元组。</span>
<span class="token function">catcher2</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">catch</span> <span class="token function">generate_exception</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">I</span><span class="token punctuation">,</span> <span class="token function">catcher2</span><span class="token punctuation">(</span><span class="token variable">I</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">I</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>

<span class="token comment">% 提供了详细的栈跟踪信息</span>
<span class="token operator">&gt;</span> <span class="token atom">try_test</span><span class="token punctuation">:</span><span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token quoted-atom atom">&#39;EXIT&#39;</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token quoted-atom atom">&#39;EXIT&#39;</span><span class="token punctuation">,</span><span class="token atom">a</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token quoted-atom atom">&#39;EXIT&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">try_test</span><span class="token punctuation">,</span><span class="token atom">generate_exception</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;try_test.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">try_test</span><span class="token punctuation">,</span><span class="token atom">catcher2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;try_test.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">try_test</span><span class="token punctuation">,</span><span class="token quoted-atom atom">&#39;-demo2/0-lc$^0/1-0-&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;try_test.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">try_test</span><span class="token punctuation">,</span><span class="token quoted-atom atom">&#39;-demo2/0-lc$^0/1-0-&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;try_test.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">erl_eval</span><span class="token punctuation">,</span><span class="token atom">do_apply</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;erl_eval.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">689</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">shell</span><span class="token punctuation">,</span><span class="token atom">exprs</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;shell.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">686</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">shell</span><span class="token punctuation">,</span><span class="token atom">eval_exprs</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;shell.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">642</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span><span class="token atom">shell</span><span class="token punctuation">,</span><span class="token atom">eval_loop</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">file</span><span class="token punctuation">,</span><span class="token string">&quot;shell.erl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">line</span><span class="token punctuation">,</span><span class="token number">627</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="针对异常的编程样式" tabindex="-1"><a class="header-anchor" href="#针对异常的编程样式" aria-hidden="true">#</a> 针对异常的编程样式</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token variable">X</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token comment">% 内置函数 error 可以改进错误信息</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">squareRootNegativeArgument</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token atom">math</span><span class="token punctuation">:</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">% 函数多半应该返回 {ok, Value} 或 {error, Reason}</span>
<span class="token function">error_process</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">case</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
    <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">Val</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
      <span class="token function">do_some_thing_with</span><span class="token punctuation">(</span><span class="token variable">Val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span><span class="token atom">error</span><span class="token punctuation">,</span> <span class="token variable">Why</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
      <span class="token comment">%% process this error</span>
      <span class="token function">do_other_thing_with</span><span class="token punctuation">(</span><span class="token atom">error</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>

<span class="token comment">% 捕捉一切可能的异常错误</span>
<span class="token function">error_process3</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">try</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span>
  <span class="token keyword">catch</span>
    <span class="token variable">_</span><span class="token punctuation">:</span><span class="token variable">_</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">process_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="栈跟踪-erlang-get-stacktrace" tabindex="-1"><a class="header-anchor" href="#栈跟踪-erlang-get-stacktrace" aria-hidden="true">#</a> 栈跟踪（erlang:get_stacktrace()）</h4><h3 id="二进制型与位语法" tabindex="-1"><a class="header-anchor" href="#二进制型与位语法" aria-hidden="true">#</a> 二进制型与位语法</h3><h3 id="顺序编程补遗" tabindex="-1"><a class="header-anchor" href="#顺序编程补遗" aria-hidden="true">#</a> 顺序编程补遗</h3><h4 id="apply" tabindex="-1"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply</h4><p>内置函数apply(Mod, Func, [Arg1, Arg2, ..., ArgN])会将模块Mod里的Func函数应用到Arg1, Arg2, ... ArgN这些参数上。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">&gt;</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token atom">erlang</span><span class="token punctuation">,</span> <span class="token atom">atom_to_list</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token atom">hello</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token string">&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>应当尽量避免使用apply。 当函数的参数数量能预先知道时， <code>M:F(Arg1, Arg2, ... ArgN)</code> 这种调用形式要比apply好得多。</p><h4 id="算数表达式" tabindex="-1"><a class="header-anchor" href="#算数表达式" aria-hidden="true">#</a> 算数表达式</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206210040391.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><p>模块属性的语法是 <code>-AtomTag(...)</code> ， 它们被用来定义文件的某些属性。</p><p>包含预定义的模块属性和用户定义的属性。</p><h5 id="预定义模块属性" tabindex="-1"><a class="header-anchor" href="#预定义模块属性" aria-hidden="true">#</a> 预定义模块属性</h5><ul><li><code>-module(modulename)</code>：模块声明</li><li><code>-import(Mod, [Name/Arity1, Name2/Arity2, ...])</code>：列举了哪些函数要导入到模块中</li><li><code>-compile(Options)</code>：添加 Options 到编译器选项列表中</li><li><code>-vsn(Version)</code>：指定模块的版本号</li></ul><h5 id="用户定义的模块属性" tabindex="-1"><a class="header-anchor" href="#用户定义的模块属性" aria-hidden="true">#</a> 用户定义的模块属性</h5><ul><li><code>-SomeTag(Value).</code>：<code>SomeTag</code> 必须是一个原子，Value 必须是一个字面数据类型</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">-</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">jeo</span><span class="token punctuation">,</span> <span class="token atom">armstring</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">purpose</span><span class="token punctuation">(</span><span class="token string">&quot;example of attributes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="块表达式" tabindex="-1"><a class="header-anchor" href="#块表达式" aria-hidden="true">#</a> 块表达式</h4><p>用于以下情形：代码某处的Erlang语法要求单个表达式，但我们想使用一个表达式序列</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token keyword">begin</span>
    <span class="token variable">Expr1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
    <span class="token variable">ExprN</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="布尔值-布尔表达式" tabindex="-1"><a class="header-anchor" href="#布尔值-布尔表达式" aria-hidden="true">#</a> 布尔值 布尔表达式</h4><p>Erlang没有单独的布尔值类型。不过原子true和false具有特殊的含义，可以用来表示布尔值。</p><ul><li><code>not B1</code></li><li><code>B1 and B2</code></li><li><code>B1 or B2</code></li><li><code>B1 xor B2</code></li></ul><h4 id="动态代码载入" tabindex="-1"><a class="header-anchor" href="#动态代码载入" aria-hidden="true">#</a> 动态代码载入</h4><p>每当调用 <code>someModule:someFunction(...)</code> 时，调用的总是<strong>最新版模块里的最新版函数</strong>，哪怕当代码在模块里运行时<strong>重新编译了该模块也是如此</strong>。<br> Erlang允许一个模块的<strong>两个</strong>版本同时运行：当前版和旧版。重新编译某个模块时，任何运行旧版代码的进程都会被终止，当前版成为旧版，新编译的版本则成为当前版</p><h4 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器" aria-hidden="true">#</a> 预处理器</h4><p>Erlang模块在编译前会自动由Erlang的预处理器进行处理。预处理器会展开源文件里所有的宏，并插入必要的包含文件。</p><p>如调试某个有问题的宏时，应该保存预处理器的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>erlc <span class="token parameter variable">-P</span> some_module.erl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="转义序列" tabindex="-1"><a class="header-anchor" href="#转义序列" aria-hidden="true">#</a> 转义序列</h4><p>可以在字符串和带引号的原子里使用转义序列来输入任何不可打印的字符。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206220048388.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="函数引用" tabindex="-1"><a class="header-anchor" href="#函数引用" aria-hidden="true">#</a> 函数引用</h4><p>引用在当前或外部模块里定义的某个函数。</p><ul><li><code>fun LocalFunc/Arity</code>：引用当前模块的本地函数</li><li><code>fun Mod:RemoteFunc/Arity</code>：引用 Mod 模块的外部函数</li></ul><h4 id="包含文件" tabindex="-1"><a class="header-anchor" href="#包含文件" aria-hidden="true">#</a> 包含文件</h4><p>许多模块需要共享通用的<strong>记录</strong>定义，就会把它们放到包含文件里，再由所有需要这些定义的模块包含此文件</p><p><code>-include(Filename).</code></p><p>按照Erlang的惯例，包含文件的扩展名是.hrl。 FileName应当包含一个绝对或相对路径，使预处理器能找到正确的文件。包含库的头文件（ library header file）时可以用下面的语法：</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">-</span><span class="token function">include_lib</span><span class="token punctuation">(</span><span class="token string">&quot;kernel/include/file.hrl&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="列表操作-、" tabindex="-1"><a class="header-anchor" href="#列表操作-、" aria-hidden="true">#</a> 列表操作：++、--</h4><p><code>++</code> 和 <code>--</code> 是用于列表添加和移除的中缀操作符。</p><ul><li><code>A ++ B</code> 使A和B相加（也就是附加）。</li><li><code>A -- B</code> 从列表A中移除列表B。 移除的意思是B中所有元素都会从A里面去除。 <ul><li>请注意：如果符号X在B里只出现了K次，那么A只会移除前K个X。</li></ul></li></ul><h4 id="宏-define" tabindex="-1"><a class="header-anchor" href="#宏-define" aria-hidden="true">#</a> 宏 -define()</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 宏语法模板，erlang预处理器 epp 碰到 ?MacronName 的表达式时会展开这个宏</span>
<span class="token operator">-</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token variable">Constant</span><span class="token punctuation">,</span> <span class="token variable">Replacement</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token variable">Func</span><span class="token punctuation">(</span><span class="token variable">Var1</span><span class="token punctuation">,</span> <span class="token variable">Var2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token variable">Var</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">Replacement</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">-</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token function">macro1</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">,</span> <span class="token variable">Y</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  ?<span class="token function">macro1</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token atom">b</span><span class="token punctuation">)</span>

<span class="token comment">% --- 展开后 ---</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span> <span class="token variable">A</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token atom">b</span><span class="token punctuation">}</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预制宏</p><ul><li><code>?FILE</code></li><li><code>?MODULE</code></li><li><code>?LINE</code></li></ul><h5 id="宏控制流" tabindex="-1"><a class="header-anchor" href="#宏控制流" aria-hidden="true">#</a> 宏控制流</h5><ul><li><code>-undef(Macro).</code></li><li><code>-ifdef(Macro).</code></li><li><code>-ifndef(Macro).</code></li><li><code>-else.</code></li><li><code>-endif.</code></li></ul><h4 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h4><p>Erlang里的数字不是整数就是浮点数，整数的运算时精确的。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% K 进制</span>
<span class="token number">2#00101010</span>
<span class="token number">16#af6bfa23</span>

<span class="token comment">% $ 写法，代表 ASCII 字符的整数代码</span>
<span class="token number">$a</span> <span class="token comment">% 97的简写</span>

<span class="token comment">% 浮点数</span>
<span class="token number">1.0</span>
<span class="token number">3.14159</span>
<span class="token operator">-</span><span class="token number">2.3e+6</span>
<span class="token number">23.56E-27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作符优先级" tabindex="-1"><a class="header-anchor" href="#操作符优先级" aria-hidden="true">#</a> 操作符优先级</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206222239575.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="进程字典" tabindex="-1"><a class="header-anchor" href="#进程字典" aria-hidden="true">#</a> 进程字典</h4><p>每个Erlang进程都有一个被称为进程字典（ process dictionary）的私有数据存储区域。他是一个 map。</p><ul><li><code>put(Key, Value) -&gt; OldValue.</code></li><li><code>get(Key) -&gt; Value.</code></li><li><code>get() -&gt; [{Key, Value}].</code>：返回整个进程字典</li><li><code>get_keys(Value) -&gt; [Key].</code>：返回字典里面所有值为 Value 的键</li><li><code>erase(Key) -&gt; Value.</code></li><li><code>erase() -&gt; [{Key, Value}].</code></li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token atom">x</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">undefined</span>
<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token atom">x</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">20</span>
<span class="token number">4</span><span class="token operator">&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token atom">y</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">undefined</span>
<span class="token number">5</span><span class="token operator">&gt;</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token atom">y</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">undefined</span>
<span class="token number">6</span><span class="token operator">&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token atom">y</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">40</span>
<span class="token number">7</span><span class="token operator">&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">y</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">x</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token number">8</span><span class="token operator">&gt;</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token atom">x</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">20</span>
<span class="token number">9</span><span class="token operator">&gt;</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">y</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h4><p>引用（ reference）是一种全局唯一的Erlang数据类型。它们由内置函数 <code>erlang:make_ref()</code> 创建。 引用的用途是创建独一无二的标签，把它存放在数据里并在后面用于比较是否相等。</p><h4 id="短路布尔表达式" tabindex="-1"><a class="header-anchor" href="#短路布尔表达式" aria-hidden="true">#</a> 短路布尔表达式</h4><p>只在必要时才对参数求值</p><ul><li><code>Expr1 orelse Expr2</code>：Expr1 || Expr2</li><li><code>Expr1 andalso Expr2</code>：Expr1 &amp;&amp; Expr2</li></ul><h4 id="比较数据类型" tabindex="-1"><a class="header-anchor" href="#比较数据类型" aria-hidden="true">#</a> 比较数据类型</h4><p><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206222300669.png" alt="" loading="lazy"><br><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206222301310.png" alt="" loading="lazy"></p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><h3 id="编译和运行程序" tabindex="-1"><a class="header-anchor" href="#编译和运行程序" aria-hidden="true">#</a> 编译和运行程序</h3><h4 id="改变开发环境" tabindex="-1"><a class="header-anchor" href="#改变开发环境" aria-hidden="true">#</a> 改变开发环境</h4><ul><li><code>code:get_path()</code> 获取当前载入路径值</li><li><code>-spec code:add_patha(Dir)</code> 向载入路径的开头添加一个新目录 Dir</li><li><code>-spec code:add_pathz(Dir)</code> 向载入路径的末端添加一个新目录 Dir</li></ul><h4 id="运行程序的不同方式" tabindex="-1"><a class="header-anchor" href="#运行程序的不同方式" aria-hidden="true">#</a> 运行程序的不同方式</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% erlang shell</span>
<span class="token atom">erl</span>
<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token atom">hello</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span><span class="token atom">hello</span><span class="token punctuation">}</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token atom">hello</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token variable">Hello</span> <span class="token atom">world</span>
<span class="token atom">ok</span>

<span class="token comment">% 命令行界面直接编译和运行</span>
<span class="token number">$ </span><span class="token atom">erlc</span> <span class="token atom">hello</span><span class="token punctuation">.</span><span class="token atom">erl</span>
<span class="token comment">% -noshell 不带交互式 shell 的方式启动 Erlang</span>
<span class="token comment">% -s hello start 运行 hello:start() 函数</span>
<span class="token comment">% -s init stop 在之前的命令完成后执行 init:stop() 函数，从而停止系统</span>
<span class="token number">$ </span><span class="token atom">erl</span> <span class="token operator">-</span><span class="token atom">noshell</span> <span class="token operator">-</span><span class="token atom">s</span> <span class="token atom">hello</span> <span class="token atom">start</span> <span class="token operator">-</span><span class="token atom">s</span> <span class="token atom">init</span> <span class="token atom">stop</span>
<span class="token variable">Hello</span> <span class="token atom">world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env escript</span>

main<span class="token punctuation">(</span>Args<span class="token punctuation">)</span> -<span class="token operator">&gt;</span>
  io:format<span class="token punctuation">(</span><span class="token string">&quot;Hello world~n&quot;</span><span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="makefile-使编译自动化" tabindex="-1"><a class="header-anchor" href="#makefile-使编译自动化" aria-hidden="true">#</a> makefile 使编译自动化</h4><h2 id="并发和分布式程序" tabindex="-1"><a class="header-anchor" href="#并发和分布式程序" aria-hidden="true">#</a> 并发和分布式程序</h2><h3 id="现实世界中的并发" tabindex="-1"><a class="header-anchor" href="#现实世界中的并发" aria-hidden="true">#</a> 现实世界中的并发</h3><p>Erlang进程没有共享内存，每个进程都有它自己的内存。要改变其他某个进程的内存，必须向它发送一个消息，并祈祷它能收到并理解这个消息。</p><h3 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程" aria-hidden="true">#</a> 并发编程</h3><p>Erlang 编写并发程序只需要三个基本函数</p><h4 id="基本并发函数" tabindex="-1"><a class="header-anchor" href="#基本并发函数" aria-hidden="true">#</a> 基本并发函数</h4><ul><li><p><code>Pid = spawn(Mod, Func, Args)</code>：创建一个并行进程来执行 <code>apply(Mod, Func, Args)</code></p></li><li><p><code>Pid = spawn(Fun)</code>：创建一个新的并发进程来执行 <code>FUn()</code></p></li><li><p><code>Pid ! Message</code>：向 Pid 进程发送消息 Message，消息发送是异步的。<code>Pid1 ! Pid2 ! ... ! Msg</code> 意思是把消息 <code>Msg</code> 发给所有进程</p></li><li><p><code>receive ... end</code>：接收发送给某个进程的消息</p><ul><li><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token keyword">receive</span>
    <span class="token variable">Pattern1</span> <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token variable">Guard1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token variable">Expressions1</span><span class="token punctuation">;</span>
    <span class="token variable">Pattern2</span> <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token variable">Guard2</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token variable">Expressions2</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>每个进程都带有一个进程邮箱，与进程同步创建。收到的消息会被放入该进程的邮箱，程序执行一条接收语句时才会读取邮箱。</p><h4 id="客户端-服务器" tabindex="-1"><a class="header-anchor" href="#客户端-服务器" aria-hidden="true">#</a> 客户端-服务器</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% Erlang 依赖于 actor并发模型。在 Erlang 编写并发程序的三要素：</span>
<span class="token comment">% 创建进程，发送消息，接收消息</span>

<span class="token comment">% 启动一个新的进程使用\`spawn\`函数，接收一个函数作为参数</span>

<span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">end</span><span class="token punctuation">.</span> <span class="token comment">% #Fun&lt;erl_eval.20.67289768&gt;</span>
<span class="token function">spawn</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">% &lt;0.44.0&gt;</span>

<span class="token comment">% \`spawn\` 函数返回一个pid(进程标识符)，你可以使用pid向进程发送消息。</span>
<span class="token comment">% 使用 \`!\` 操作符发送消息。</span>
<span class="token comment">%  我们需要在进程内接收消息，要用到 \`receive\` 机制。</span>

<span class="token operator">-</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token atom">caculateGeometry</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token atom">export_all</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">caculateAera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token keyword">receive</span>
      <span class="token punctuation">{</span><span class="token atom">rectangle</span><span class="token punctuation">,</span> <span class="token variable">W</span><span class="token punctuation">,</span> <span class="token variable">H</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token variable">W</span> <span class="token operator">*</span> <span class="token variable">H</span><span class="token punctuation">;</span>
      <span class="token punctuation">{</span><span class="token atom">circle</span><span class="token punctuation">,</span> <span class="token variable">R</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token number">3.14</span> <span class="token operator">*</span> <span class="token variable">R</span> <span class="token operator">*</span> <span class="token variable">R</span><span class="token punctuation">;</span>
      <span class="token variable">_</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;We can only caculate area of rectangles or circles.&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span><span class="token punctuation">.</span>

<span class="token comment">% 编译这个模块，在 shell 中创建一个进程，并执行 \`caculateArea\` 函数。</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token atom">caculateGeometry</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token variable">CaculateAera</span> <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token atom">caculateGeometry</span><span class="token punctuation">,</span> <span class="token atom">caculateAera</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token variable">CaculateAera</span> <span class="token operator">!</span> <span class="token punctuation">{</span><span class="token atom">circle</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">.</span> <span class="token comment">% 12.56000000000000049738</span>

<span class="token comment">% shell也是一个进程(process), 你可以使用\`self\`获取当前 pid</span>

<span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">% &lt;0.41.0&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="进程很轻巧" tabindex="-1"><a class="header-anchor" href="#进程很轻巧" aria-hidden="true">#</a> 进程很轻巧</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 查看允许的最大进程数量</span>
<span class="token operator">&gt;</span> <span class="token atom">erlang</span><span class="token punctuation">:</span><span class="token function">system_info</span><span class="token punctuation">(</span><span class="token atom">processlimit</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">262144</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带超时的接收" tabindex="-1"><a class="header-anchor" href="#带超时的接收" aria-hidden="true">#</a> 带超时的接收</h4><p>为避免接收语句因为消息不来而一直等待，可以给接收语句增加一个超时设置，设置进程等待接收消息的最长时间。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token keyword">receive</span>
    <span class="token variable">Pattern1</span> <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token variable">Guard1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token variable">Expressions1</span><span class="token punctuation">;</span>
    <span class="token variable">Pattern2</span> <span class="token punctuation">[</span><span class="token keyword">when</span> <span class="token variable">Guard2</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
        <span class="token variable">Expressions2</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">after</span> <span class="token variable">Time</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">Expressions</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="选择性接收" tabindex="-1"><a class="header-anchor" href="#选择性接收" aria-hidden="true">#</a> 选择性接收</h4><p><code>receive</code> 基本函数从进程邮箱中提取消息，做模式匹配，把未匹配的消息加入队列供以后处理，并管理超时。</p><h4 id="注册进程" tabindex="-1"><a class="header-anchor" href="#注册进程" aria-hidden="true">#</a> 注册进程</h4><p>一般创建进程时，只有父进程知道子进程的 PID。使用注册进程的方法，可以公布进程标识符，让任何进程都能与该进程通信。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 用 AnAtom 作为名称来注册进程 Pid</span>
<span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">AnAtom</span><span class="token punctuation">,</span> <span class="token variable">Pid</span><span class="token punctuation">)</span>
<span class="token comment">% 移除与 AnAtom 关联的所有注册信息</span>
<span class="token function">unregister</span><span class="token punctuation">(</span><span class="token variable">AnAtom</span><span class="token punctuation">)</span>
<span class="token comment">% 检查 AnAtom 是否已被注册</span>
<span class="token function">whereis</span><span class="token punctuation">(</span><span class="token variable">AnAtom</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Pid</span> <span class="token punctuation">|</span> <span class="token atom">undefined</span>
<span class="token comment">% 返回包含系统里所有注册进程的列表</span>
<span class="token function">registered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">AnAtom</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="尾递归的说明" tabindex="-1"><a class="header-anchor" href="#尾递归的说明" aria-hidden="true">#</a> 尾递归的说明</h4><p>尾递归：收到消息进行处理之后立即再次调用 <code>loop()</code></p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 并发程序模板</span>
<span class="token comment">% 接收并打印出任何发给它的消息</span>
<span class="token operator">-</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token atom">ctemplate</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token atom">export_all</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token variable">?MODULE</span><span class="token punctuation">,</span> <span class="token atom">loop</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">rpc</span><span class="token punctuation">(</span><span class="token variable">Pid</span><span class="token punctuation">,</span> <span class="token variable">Request</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token variable">Pid</span> <span class="token operator">!</span> <span class="token punctuation">{</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">Request</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">receive</span>
    <span class="token punctuation">{</span><span class="token variable">Pid</span><span class="token punctuation">,</span> <span class="token variable">Response</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
      <span class="token variable">Response</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>

<span class="token function">loop</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">receive</span>
    <span class="token variable">Any</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
      <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Received:~p~n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">Any</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">loop</span><span class="token punctuation">(</span><span class="token variable">X</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式编程" tabindex="-1"><a class="header-anchor" href="#分布式编程" aria-hidden="true">#</a> 分布式编程</h3><h4 id="两种分布式模型" tabindex="-1"><a class="header-anchor" href="#两种分布式模型" aria-hidden="true">#</a> 两种分布式模型</h4><ul><li><p>分布式 Erlang</p><p>程序在 Erlang 节点（node）上运行，节点是一个独立的 Erlang 系统，包含一个自带地址空间和进程组的完整虚拟机。</p><p>通常运行在数据同一个局域网的集群上，并受防火墙保护。</p></li><li><p>基于套接字的分布式模型</p><p>用 TCP/IP 套接字来编写运行在不可信环境中的分布式应用程序。不如分布式 Erlang 那样强大，但是更安全。</p></li></ul><h4 id="编写一个分布式程序" tabindex="-1"><a class="header-anchor" href="#编写一个分布式程序" aria-hidden="true">#</a> 编写一个分布式程序</h4><p>分布式应用程序编写顺序</p><ol><li>在常规非分布式会话里编写和测试程序</li><li>在运行于同一台计算机上的两个不同 Erlang 节点中测试程序</li><li>在运行于两台物理隔离计算机上的两个不同 Erlang 节点里测试程序。</li></ol><h2 id="编程库与框架" tabindex="-1"><a class="header-anchor" href="#编程库与框架" aria-hidden="true">#</a> 编程库与框架</h2><h3 id="接口技术" tabindex="-1"><a class="header-anchor" href="#接口技术" aria-hidden="true">#</a> 接口技术</h3><h4 id="erlang-如何与外部程序通信" tabindex="-1"><a class="header-anchor" href="#erlang-如何与外部程序通信" aria-hidden="true">#</a> Erlang 如何与外部程序通信</h4><p>Erlang 通过<em>端口</em>对象与外部程序通信。端口的行为就像一个 Erlang 进程。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202207171636801.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>-spec open_port(PortName, [Opt]) -&gt; Port</code> 可以创建端口</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 向端口发送Data</span>
<span class="token variable">Port</span> <span class="token operator">!</span> <span class="token punctuation">{</span><span class="token variable">PicC</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">command</span><span class="token punctuation">,</span> <span class="token variable">Data</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment">% 把相连进程的 PID 从 PicC 改为 Pid1</span>
<span class="token variable">Port</span> <span class="token operator">!</span> <span class="token punctuation">{</span><span class="token variable">PicC</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">connect</span><span class="token punctuation">,</span> <span class="token variable">Pid1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment">% 关闭端口</span>
<span class="token variable">Port</span> <span class="token operator">!</span> <span class="token punctuation">{</span><span class="token variable">Pid</span><span class="token punctuation">,</span> <span class="token atom">close</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用端口建立外部-c-程序接口" tabindex="-1"><a class="header-anchor" href="#用端口建立外部-c-程序接口" aria-hidden="true">#</a> 用端口建立外部 C 程序接口</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202207171642507.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="在-erlang-里调用-shell-脚本" tabindex="-1"><a class="header-anchor" href="#在-erlang-里调用-shell-脚本" aria-hidden="true">#</a> 在 Erlang 里调用 shell 脚本</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% 运行字符串的命令并捕捉结果</span>
<span class="token atom">os</span><span class="token punctuation">:</span><span class="token function">cmd</span><span class="token punctuation">(</span><span class="token string">&quot;ifconfig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件编程" tabindex="-1"><a class="header-anchor" href="#文件编程" aria-hidden="true">#</a> 文件编程</h3><h3 id="套接字编程" tabindex="-1"><a class="header-anchor" href="#套接字编程" aria-hidden="true">#</a> 套接字编程</h3><h3 id="用-websocket-和-erlang-进行浏览" tabindex="-1"><a class="header-anchor" href="#用-websocket-和-erlang-进行浏览" aria-hidden="true">#</a> 用 WebSocket 和 Erlang 进行浏览</h3><h3 id="用-ets-和-dets-存储数据" tabindex="-1"><a class="header-anchor" href="#用-ets-和-dets-存储数据" aria-hidden="true">#</a> 用 ETS 和 DETS 存储数据</h3><p>ets 和 dets 是两个系统模块，用来高效存储海量的 Erlang 数据。它们都提供大型的键-值查询表。可以被多个进程共享。</p><ul><li>ETS（Erlang Term Storage）：常驻内存，查找时间是恒定的。易失。没有垃圾收集机制，不会有垃圾收集的负担。</li><li>DETS（Disk ETS）：使用磁盘存储，速度慢于 ETS，内存占用也小很多。非易失。打开时会进行一致性检查，损坏会尝试修复，可能会花很长时间；表中最后一项可能是损坏的会丢失。</li></ul><h4 id="表的类型" tabindex="-1"><a class="header-anchor" href="#表的类型" aria-hidden="true">#</a> 表的类型</h4><p>ETS 和 DETS 表保存的是<em>元组</em>。元组里的某一个元素（默认是第一个）被称为该表的键。</p><ul><li>异键表（set）：表里所有的键都是唯一的</li><li>有序异键（ordered set）：元组会被排序</li><li>同键表（bag）：允许多个元素拥有相同的键</li><li>副本同键（duplicate bag）：可以有多个元组拥有相同的键，而且在同一张表里可以存在多个相同的元组</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">-</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token atom">ets_test</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token comment">%% API</span>
<span class="token operator">-</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token atom">start</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">fun</span> <span class="token atom">test_ets</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token atom">set</span><span class="token punctuation">,</span> <span class="token atom">ordered_set</span><span class="token punctuation">,</span> <span class="token atom">bag</span><span class="token punctuation">,</span> <span class="token atom">duplicate_bag</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">test_ets</span><span class="token punctuation">(</span><span class="token variable">Mode</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token variable">TableId</span> <span class="token operator">=</span> <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token atom">test</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">Mode</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">TableId</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">TableId</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">b</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">TableId</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">TableId</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token variable">List</span> <span class="token operator">=</span> <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">tab2list</span><span class="token punctuation">(</span><span class="token variable">TableId</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;~-13w =&gt; ~p~n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">Mode</span><span class="token punctuation">,</span> <span class="token variable">List</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">ets</span><span class="token punctuation">:</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">TableId</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code>λ <span class="token atom">erl</span>
<span class="token variable">Eshell</span> <span class="token variable">V12</span><span class="token punctuation">.</span><span class="token number">3.2</span><span class="token number">.1</span>  <span class="token punctuation">(</span><span class="token atom">abort</span> <span class="token atom">with</span> ^<span class="token variable">G</span><span class="token punctuation">)</span>
<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token atom">ets_test</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span><span class="token atom">ets_test</span><span class="token punctuation">}</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token atom">ets_test</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">set</span>           <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">b</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token atom">ordered_set</span>   <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">b</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token atom">bag</span>           <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">b</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token atom">duplicate_bag</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">b</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">a</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token atom">ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="影响-ets-表效率的因素" tabindex="-1"><a class="header-anchor" href="#影响-ets-表效率的因素" aria-hidden="true">#</a> 影响 ETS 表效率的因素</h4><p>ETS 表在内部是用散列表表示的，（ordered set）用平衡二叉树表示。</p><h4 id="保存元组到磁盘" tabindex="-1"><a class="header-anchor" href="#保存元组到磁盘" aria-hidden="true">#</a> 保存元组到磁盘</h4><h3 id="mnesia-erlang-数据库" tabindex="-1"><a class="header-anchor" href="#mnesia-erlang-数据库" aria-hidden="true">#</a> Mnesia：Erlang 数据库</h3><p>Mnesia是一种用Erlang编写的数据库。</p><p>Mnesia的速度极快，可以保存任何类型的Erlang数据结构。它还是高度可定制的。数据表既可以保存在内存里（为了速度），也可以保存在磁盘上（为了持久性）。表还可以在不同机器之间进行复制，从而实现容错行为。</p><h4 id="创建初始数据库" tabindex="-1"><a class="header-anchor" href="#创建初始数据库" aria-hidden="true">#</a> 创建初始数据库</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token number">$ </span><span class="token atom">erl</span>
<span class="token comment">% mnesia:create_schema(NodeList) 会在 Erlang 节点列表的所有节点上都初始化一个新的 Mnesia 数据库，会初始化并且创建一个目录结构来保存</span>
<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">create_schema</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">ok</span>
<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token atom">init</span><span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">ok</span>
<span class="token number">$ </span><span class="token atom">ls</span>
<span class="token variable">Mnesia</span><span class="token punctuation">.</span><span class="token atom">nonode@nohost</span>

<span class="token punctuation">#</span> 创建名为 <span class="token atom">joe</span> 的 <span class="token atom">erlang</span> 节点
<span class="token number">$ </span><span class="token atom">erl</span> <span class="token operator">-</span><span class="token atom">sname</span> <span class="token atom">joe</span>

<span class="token punctuation">#</span> 启动 <span class="token atom">erlang</span> 时指向一个特定的数据库
<span class="token number">$ </span><span class="token atom">erl</span> <span class="token operator">-</span><span class="token atom">mnesia</span> <span class="token atom">dir</span> &#39;<span class="token string">&quot;/home/joe/some/path/to/Mnesia.company&quot;</span>&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据库查询" tabindex="-1"><a class="header-anchor" href="#数据库查询" aria-hidden="true">#</a> 数据库查询</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token operator">-</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token atom">test_mnesia</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token atom">lists</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token atom">foreach</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token atom">export_all</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">%% IMPORTANT: The next line must be included</span>
<span class="token comment">%%            if we want to call qlc:q(...)</span>
<span class="token operator">-</span><span class="token function">include_lib</span><span class="token punctuation">(</span><span class="token string">&quot;stdlib/include/qlc.hrl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">% Mnesia 里的表是一个包含若干行的**异键或同键表**，其中每一行都是**一个 Erlang 记录**。要在 Mnesia 里表示这些表，需要一些**记录定义**来对表里的行进行定义。</span>
<span class="token operator">-</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">item</span><span class="token punctuation">,</span> <span class="token atom">quantity</span><span class="token punctuation">,</span> <span class="token atom">cost</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token atom">cost</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">name</span><span class="token punctuation">,</span> <span class="token atom">price</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token atom">design</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">id</span><span class="token punctuation">,</span> <span class="token atom">plan</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">%% 初始化数据表</span>
<span class="token function">do_this_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">create_schema</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">create_table</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">attributes</span><span class="token punctuation">,</span> <span class="token function">record_info</span><span class="token punctuation">(</span><span class="token atom">fields</span><span class="token punctuation">,</span> <span class="token atom">shop</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">create_table</span><span class="token punctuation">(</span><span class="token atom">cost</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">attributes</span><span class="token punctuation">,</span> <span class="token function">record_info</span><span class="token punctuation">(</span><span class="token atom">fields</span><span class="token punctuation">,</span> <span class="token atom">cost</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">create_table</span><span class="token punctuation">(</span><span class="token atom">design</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">attributes</span><span class="token punctuation">,</span> <span class="token function">record_info</span><span class="token punctuation">(</span><span class="token atom">fields</span><span class="token punctuation">,</span> <span class="token atom">design</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">wait_for_tables</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token atom">shop</span><span class="token punctuation">,</span><span class="token atom">cost</span><span class="token punctuation">,</span><span class="token atom">design</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token comment">%% SQL equivalent</span>
<span class="token comment">%%  SELECT * FROM shop;</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token atom">select_shop</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">do</span><span class="token punctuation">(</span><span class="token atom">qlc</span><span class="token punctuation">:</span><span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">X</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">X</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">%% SQL equivalent</span>
<span class="token comment">%%  SELECT item, quantity FROM shop;</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token atom">select_some</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">do</span><span class="token punctuation">(</span><span class="token atom">qlc</span><span class="token punctuation">:</span><span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">item</span><span class="token punctuation">,</span> <span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">quantity</span><span class="token punctuation">}</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">X</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 

<span class="token comment">%% SQL equivalent</span>
<span class="token comment">%%   SELECT shop.item FROM shop</span>
<span class="token comment">%%   WHERE  shop.quantity &lt; 250;</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token atom">reorder</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">do</span><span class="token punctuation">(</span><span class="token atom">qlc</span><span class="token punctuation">:</span><span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">item</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">X</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			     <span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">quantity</span> <span class="token operator">&lt;</span> <span class="token number">250</span>
				<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%% SQL equivalent</span>
<span class="token comment">%%   SELECT shop.item</span>
<span class="token comment">%%   FROM shop, cost </span>
<span class="token comment">%%   WHERE shop.item = cost.name </span>
<span class="token comment">%%     AND cost.price &lt; 2</span>
<span class="token comment">%%     AND shop.quantity &lt; 250</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token atom">join</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">do</span><span class="token punctuation">(</span><span class="token atom">qlc</span><span class="token punctuation">:</span><span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">item</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token variable">X</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			     <span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">quantity</span> <span class="token operator">&lt;</span> <span class="token number">250</span><span class="token punctuation">,</span>
			     <span class="token variable">Y</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token atom">cost</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			     <span class="token variable">X</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">item</span> <span class="token operator">=:=</span> <span class="token variable">Y</span><span class="token punctuation">#</span><span class="token atom">cost</span><span class="token punctuation">.</span><span class="token atom">name</span><span class="token punctuation">,</span>
			     <span class="token variable">Y</span><span class="token punctuation">#</span><span class="token atom">cost</span><span class="token punctuation">.</span><span class="token atom">price</span> <span class="token operator">&lt;</span> <span class="token number">2</span>
				<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">do</span><span class="token punctuation">(</span><span class="token variable">Q</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">qlc</span><span class="token punctuation">:</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token variable">Q</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token atom">atomic</span><span class="token punctuation">,</span> <span class="token variable">Val</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token variable">Val</span><span class="token punctuation">.</span>

<span class="token function">example_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token punctuation">[</span><span class="token comment">%% The shop table</span>
     <span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token atom">apple</span><span class="token punctuation">,</span>   <span class="token number">20</span><span class="token punctuation">,</span>   <span class="token number">2.3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token atom">orange</span><span class="token punctuation">,</span>  <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token number">3.8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token atom">pear</span><span class="token punctuation">,</span>    <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token number">3.6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token atom">banana</span><span class="token punctuation">,</span>  <span class="token number">420</span><span class="token punctuation">,</span>  <span class="token number">4.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token atom">potato</span><span class="token punctuation">,</span>  <span class="token number">2456</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token comment">%% The cost table</span>
     <span class="token punctuation">{</span><span class="token atom">cost</span><span class="token punctuation">,</span> <span class="token atom">apple</span><span class="token punctuation">,</span>   <span class="token number">1.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">cost</span><span class="token punctuation">,</span> <span class="token atom">orange</span><span class="token punctuation">,</span>  <span class="token number">2.4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">cost</span><span class="token punctuation">,</span> <span class="token atom">pear</span><span class="token punctuation">,</span>    <span class="token number">2.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">cost</span><span class="token punctuation">,</span> <span class="token atom">banana</span><span class="token punctuation">,</span>  <span class="token number">1.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token atom">cost</span><span class="token punctuation">,</span> <span class="token atom">potato</span><span class="token punctuation">,</span>  <span class="token number">0.6</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">.</span>

<span class="token function">add_shop_item</span><span class="token punctuation">(</span><span class="token variable">Name</span><span class="token punctuation">,</span> <span class="token variable">Quantity</span><span class="token punctuation">,</span> <span class="token variable">Cost</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">Row</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">{</span><span class="token atom">item</span><span class="token operator">=</span><span class="token variable">Name</span><span class="token punctuation">,</span> <span class="token atom">quantity</span><span class="token operator">=</span><span class="token variable">Quantity</span><span class="token punctuation">,</span> <span class="token atom">cost</span><span class="token operator">=</span><span class="token variable">Cost</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
		<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">Row</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">remove_shop_item</span><span class="token punctuation">(</span><span class="token variable">Item</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">Oid</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span> <span class="token variable">Item</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
		<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">Oid</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">farmer</span><span class="token punctuation">(</span><span class="token variable">Nwant</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment">%% Nwant = Number of oranges the farmer wants to buy</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
		<span class="token comment">%% find the number of apples</span>
		<span class="token punctuation">[</span><span class="token variable">Apple</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span><span class="token atom">apple</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token variable">Napples</span> <span class="token operator">=</span> <span class="token variable">Apple</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">quantity</span><span class="token punctuation">,</span>
		<span class="token variable">Apple1</span>  <span class="token operator">=</span> <span class="token variable">Apple</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">{</span><span class="token atom">quantity</span> <span class="token operator">=</span> <span class="token variable">Napples</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span><span class="token variable">Nwant</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token comment">%% update the database</span>
		<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">Apple1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token comment">%% find the number of oranges</span>
		<span class="token punctuation">[</span><span class="token variable">Orange</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">shop</span><span class="token punctuation">,</span><span class="token atom">orange</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token variable">NOranges</span> <span class="token operator">=</span> <span class="token variable">Orange</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">.</span><span class="token atom">quantity</span><span class="token punctuation">,</span>
		<span class="token keyword">if</span> 
		    <span class="token variable">NOranges</span> <span class="token operator">&gt;=</span> <span class="token variable">Nwant</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
			<span class="token variable">N1</span> <span class="token operator">=</span>  <span class="token variable">NOranges</span> <span class="token operator">-</span> <span class="token variable">Nwant</span><span class="token punctuation">,</span>
			<span class="token variable">Orange1</span> <span class="token operator">=</span> <span class="token variable">Orange</span><span class="token punctuation">#</span><span class="token atom">shop</span><span class="token punctuation">{</span><span class="token atom">quantity</span><span class="token operator">=</span><span class="token variable">N1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token comment">%% update the database</span>
			<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">Orange1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token boolean">true</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
			<span class="token comment">%% Oops -- not enough oranges</span>
			<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token atom">oranges</span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">reset_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">clear_table</span><span class="token punctuation">(</span><span class="token atom">shop</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">clear_table</span><span class="token punctuation">(</span><span class="token atom">cost</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
		<span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">fun</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token atom">write</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">example_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">add_plans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">D1</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">design</span><span class="token punctuation">{</span><span class="token atom">id</span>   <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">joe</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		 <span class="token atom">plan</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">circle</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token variable">D2</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">design</span><span class="token punctuation">{</span><span class="token atom">id</span>   <span class="token operator">=</span> <span class="token atom">fred</span><span class="token punctuation">,</span> 
		 <span class="token atom">plan</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">rectangle</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token variable">D3</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">design</span><span class="token punctuation">{</span><span class="token atom">id</span>   <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">jane</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token atom">house</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		 <span class="token atom">plan</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">house</span><span class="token punctuation">,</span>
			 <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">floor</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>
			   <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">doors</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			    <span class="token punctuation">{</span><span class="token atom">windows</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			    <span class="token punctuation">{</span><span class="token atom">rooms</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			  <span class="token punctuation">{</span><span class="token atom">floor</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>
			   <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">doors</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			    <span class="token punctuation">{</span><span class="token atom">rooms</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			    <span class="token punctuation">{</span><span class="token atom">windows</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 
		<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">D1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">D2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">D3</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">get_plan</span><span class="token punctuation">(</span><span class="token variable">PlanId</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">F</span> <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">design</span><span class="token punctuation">,</span> <span class="token variable">PlanId</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token variable">F</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能分析、调试与跟踪" tabindex="-1"><a class="header-anchor" href="#性能分析、调试与跟踪" aria-hidden="true">#</a> 性能分析、调试与跟踪</h3><h4 id="erlang-代码的性能分析工具" tabindex="-1"><a class="header-anchor" href="#erlang-代码的性能分析工具" aria-hidden="true">#</a> Erlang 代码的性能分析工具</h4><ul><li>cprof 统计各个函数被调用的次数。它是一个<strong>轻量级</strong>的性能分析器，在活动系统上运行它会增加 5%～ 10% 的系统负载。</li><li>fprof显示调用和被调用函数的时间，结果会输出到一个文件。它适用于实验室或模拟系统里的大型系统性能分析，并会<strong>显著</strong>增加系统负载。</li><li>eprof 测量 Erlang 程序是如何使用时间的。它是 fprof 的前身，适用于<strong>小规模</strong>的性能分析。</li></ul><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token punctuation">(</span><span class="token atom">scarb@DESKTOP</span><span class="token operator">-</span><span class="token number">72654</span><span class="token variable">G4</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">&gt;</span> <span class="token atom">cprof</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">9795</span>
<span class="token punctuation">(</span><span class="token atom">scarb@DESKTOP</span><span class="token operator">-</span><span class="token number">72654</span><span class="token variable">G4</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">&gt;</span> <span class="token atom">shout</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token operator">*</span><span class="token operator">*</span> <span class="token atom">exception</span> <span class="token atom">error</span><span class="token punctuation">:</span> <span class="token atom">undefined</span> <span class="token atom">function</span> <span class="token atom">shout</span><span class="token punctuation">:</span><span class="token atom">start</span><span class="token operator">/</span><span class="token number">0</span>
<span class="token punctuation">(</span><span class="token atom">scarb@DESKTOP</span><span class="token operator">-</span><span class="token number">72654</span><span class="token variable">G4</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">&gt;</span> <span class="token atom">mnesia</span><span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token atom">stopped</span>
<span class="token punctuation">(</span><span class="token atom">scarb@DESKTOP</span><span class="token operator">-</span><span class="token number">72654</span><span class="token variable">G4</span><span class="token punctuation">)</span><span class="token number">8</span><span class="token operator">&gt;</span> <span class="token atom">cprof</span><span class="token punctuation">:</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token number">9795</span>
<span class="token punctuation">(</span><span class="token atom">scarb@DESKTOP</span><span class="token operator">-</span><span class="token number">72654</span><span class="token variable">G4</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">&gt;</span> <span class="token atom">cprof</span><span class="token punctuation">:</span><span class="token function">analyse</span><span class="token punctuation">(</span><span class="token atom">mnesia</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token punctuation">{</span><span class="token atom">mnesia</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token atom">mnesia</span><span class="token punctuation">,</span><span class="token atom">stop</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运行时诊断" tabindex="-1"><a class="header-anchor" href="#运行时诊断" aria-hidden="true">#</a> 运行时诊断</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token function">deliberate_error</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">bad_function</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">lists</span><span class="token punctuation">:</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">bad_function</span><span class="token punctuation">(</span><span class="token variable">A</span><span class="token punctuation">,</span> <span class="token variable">_</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">Bin</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token atom">file</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">abc</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">A</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">binary_to_list</span><span class="token punctuation">(</span><span class="token variable">Bin</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202207172116236.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>错误消息之后是栈跟踪信息。它以发生错误的函数名开头，后面是当前函数完成后将会返回的各个函数清单（包括函数名、模块名和行号）。由此可知，错误发生在 <code>lib_misc:bad_function/2</code> 里，而此函数将会返回到 <code>lib_misc:deliberate_error/1</code>，以此类推。</p><h4 id="调试方法" tabindex="-1"><a class="header-anchor" href="#调试方法" aria-hidden="true">#</a> 调试方法</h4><h5 id="io-format-调试" tabindex="-1"><a class="header-anchor" href="#io-format-调试" aria-hidden="true">#</a> io:format 调试</h5><p>给程序添加打印语句是最常见的调试形式。可以简单地在程序的关键位置添加 <code>io:format(...)</code> 语句来打印出感兴趣的变量值。</p><p>调试并行程序时，一种好的做法是在<u>发送消息到别的进程之前先把它打印出来</u>，<u>收到消息之后也要立即打印</u>。</p><h5 id="转储至文件" tabindex="-1"><a class="header-anchor" href="#转储至文件" aria-hidden="true">#</a> 转储至文件</h5><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">File</span><span class="token punctuation">,</span> <span class="token variable">Term</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">Out</span> <span class="token operator">=</span> <span class="token variable">File</span> <span class="token operator">++</span> <span class="token string">&quot;.tmp&quot;</span><span class="token punctuation">,</span>
    <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;** dumping to ~s~n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token variable">Out</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">S</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token atom">file</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">Out</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token atom">write</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">io</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">S</span><span class="token punctuation">,</span> <span class="token string">&quot;~p.~n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token variable">Term</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token atom">file</span><span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token variable">S</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="erlang-调试器" tabindex="-1"><a class="header-anchor" href="#erlang-调试器" aria-hidden="true">#</a> Erlang 调试器</h4><h4 id="跟踪消息与进程执行" tabindex="-1"><a class="header-anchor" href="#跟踪消息与进程执行" aria-hidden="true">#</a> 跟踪消息与进程执行</h4><ul><li><p>erlang:trace(PidSpec, How, FlagList)<br> 它会启动跟踪。<code>PidSpec</code> 告诉系统要跟踪什么进程，<code>How</code> 是一个开启或关闭跟踪的布尔值，<code>FlagList</code> 指定了要跟踪的事件（比如，可以跟踪所有的函数调用，跟踪所有正在发送的消息，跟踪垃圾收集何时进行，等等）。<br> 一旦调用了 <code>erlang:trace/3</code> 这个内置函数，调用它的进程就会在跟踪事件发生时收到跟踪消息。跟踪事件本身是通过调用 <code>erlang:trace_pattern/3</code>确定的。</p></li><li><p>erlang:trace_pattern(MFA, MatchSpec, FlagList)</p><p>它用于设置一个跟踪模式。如果模式匹配，请求的操作就会执行。这里的MFA是一个{Module, Function, Args}元组，指定要对哪些代码应用跟踪模式。 MatchSpec是一个模式，会在每次进入MFA指定的函数时进行测试，而FlagList规定了跟踪条件满足时要<br> 做什么。</p></li></ul><p>可以用库模块 <code>dbg</code> 来执行与之前相同的跟踪。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">fib</span><span class="token punctuation">(</span><span class="token variable">N</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token variable">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token variable">N</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token atom">dbg</span><span class="token punctuation">:</span><span class="token function">tracer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">dbg</span><span class="token punctuation">:</span><span class="token function">tpl</span><span class="token punctuation">(</span><span class="token atom">tracer_test</span><span class="token punctuation">,</span> <span class="token atom">fib</span><span class="token punctuation">,</span> <span class="token quoted-atom atom">&#39;_&#39;</span><span class="token punctuation">,</span>
    <span class="token atom">dbg</span><span class="token punctuation">:</span><span class="token function">fun2ms</span><span class="token punctuation">(</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token variable">_</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">return_trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">dbg</span><span class="token punctuation">:</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token atom">all</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token atom">c</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token atom">tracer_test</span><span class="token punctuation">:</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="otp-介绍" tabindex="-1"><a class="header-anchor" href="#otp-介绍" aria-hidden="true">#</a> OTP 介绍</h3><p>Open Telecom Platform（开放电信平台），它是一个应用程序操作系统，包含了一组库和实现方式，可以构建大规模、容错和分布式的应用程序。它由瑞典电信公司爱立信开发，在爱立信内部用于构建容错式系统。标准的Erlang分发套装包含OTP库。</p><p>OTP 包含了许多强大的工具，例如一个完整的 Web 服务器，一个FTP服务器和一个 CORBAORB 等。</p><hr><p>欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,257);function r(d,m){const a=t("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[s("原文地址："),n("a",u,[s("http://hscarb.github.io/other/20220614-erlang-note.html"),c(a)])]),k])}const g=p(i,[["render",r],["__file","20220614-erlang-note.html.vue"]]);export{g as default};
