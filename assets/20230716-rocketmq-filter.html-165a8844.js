import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-eaa093f0.js";const i={},u={href:"http://hscarb.github.io/rocketmq/20230716-rocketmq-filter.html",target:"_blank",rel:"noopener noreferrer"},r=e(`<h1 id="rocketmq-filter-消息过滤-tags、sql92-原理详解-源码解析" tabindex="-1"><a class="header-anchor" href="#rocketmq-filter-消息过滤-tags、sql92-原理详解-源码解析" aria-hidden="true">#</a> Rocketmq Filter 消息过滤（TAGS、SQL92）原理详解 &amp; 源码解析</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><h3 id="_1-1-rocketmq-支持的过滤方式" tabindex="-1"><a class="header-anchor" href="#_1-1-rocketmq-支持的过滤方式" aria-hidden="true">#</a> 1.1 Rocketmq 支持的过滤方式</h3><p>Rocketmq 作为金融级的业务消息中间件，拥有强大的消息过滤能力。其支持多种消息过滤方式：</p><ul><li>表达式过滤：通过设置过滤表达式的方式进行过滤 <ul><li>TAG：根据消息的 tag 进行过滤。</li><li>SQL92：可以用 SQL92 表达式来灵活地过滤消息的 tag 和属性。</li></ul></li><li>类过滤：可以新建一个过滤类，编写自定义的过滤规则。</li></ul><h3 id="_1-2-使用方法" tabindex="-1"><a class="header-anchor" href="#_1-2-使用方法" aria-hidden="true">#</a> 1.2 使用方法</h3><h4 id="_1-2-1-tag-过滤" tabindex="-1"><a class="header-anchor" href="#_1-2-1-tag-过滤" aria-hidden="true">#</a> 1.2.1 TAG 过滤</h4><p>Tag 过滤是最简单的一种过滤方法，通常 Tag 可以用作消息的业务标识。可以设置 Tag 表达式，判断消息是否包含这个 Tag。</p><h5 id="生产者" tabindex="-1"><a class="header-anchor" href="#生产者" aria-hidden="true">#</a> 生产者</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagC&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TagFilterTest&quot;</span><span class="token punctuation">,</span>
        tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span>				<span class="token comment">// 设置消息 Tag</span>
        <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 也可以通过 setTags 方法设置 Tag</span>
    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="消费者" tabindex="-1"><a class="header-anchor" href="#消费者" aria-hidden="true">#</a> 消费者</h5><p>在消费时，可以通过表达式过滤的方式设置需要过滤的 Tag，用 <code>||</code> 表达式表示或的意思，可以匹配多个 Tag。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 4.9.x</span>
consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;TagFilterTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagA || TagC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Rocketmq 5.x 客户端之后，引入了新的订阅表达式写法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 5.x</span>
<span class="token comment">// 只订阅消息标签为&quot;TagA&quot;、&quot;TagB&quot;或&quot;TagC&quot;的消息。</span>
<span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">&quot;TagA||TagB||TagC&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pushConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;TagFilterTest&quot;</span><span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-sql92" tabindex="-1"><a class="header-anchor" href="#_1-2-2-sql92" aria-hidden="true">#</a> 1.2.2 SQL92</h4><p>SQL92 过滤比 Tag 过滤更灵活，它可以使用SQL92语法作为过滤规则表达式，可以过滤消息的属性和 Tag（在SQL语法中，Tag的属性名称为TAGS）。</p><p>如果要使用 SQL92 过滤，需要设置 Broker 的配置项 <code>enablePropertyFilter=true</code>，这个配置默认为 <code>false</code>。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">enablePropertyFilter</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要开启布隆过滤器进行双层过滤，需要设置如下配置。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">enableCalcFilterBitMap</span><span class="token punctuation">=</span><span class="token value attr-value">true		# 设置在构造消费队列时，用布隆过滤器计算匹配过滤条件的消费组，构造成二进制数组</span>
<span class="token key attr-name">enableConsumeQueueExt</span><span class="token punctuation">=</span><span class="token value attr-value">true		# 启用消费队列扩展存储，二进制数组会存到扩展存储中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL92 的过滤语法规则如下：</p><table><thead><tr><th>语法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>判断属性不存在。</td><td><code>a IS NULL</code> ：属性a不存在。</td></tr><tr><td>IS NOT NULL</td><td>判断属性存在。</td><td><code>a IS NOT NULL</code>：属性a存在。</td></tr><tr><td><em>&gt;</em> &gt;= <em>&lt;</em> &lt;=</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。 <strong>说明</strong> 可转化为数字的字符串也被认为是数字。</td><td><em><code>a IS NOT NULL AND a &gt; 100</code>：属性a存在且属性a的值大于100。</em> <code>a IS NOT NULL AND a &gt; &#39;abc&#39;</code>：错误示例，abc为字符串，不能用于比较大小。</td></tr><tr><td>BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。等价于&gt;= xxx AND &lt;= xxx。表示属性值在两个数字之间。</td><td><code>a IS NOT NULL AND (a BETWEEN 10 AND 100)</code>：属性a存在且属性a的值大于等于10且小于等于100。</td></tr><tr><td>NOT BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动会报错。等价于&lt; xxx OR &gt; xxx，表示属性值在两个值的区间之外。</td><td><code>a IS NOT NULL AND (a NOT BETWEEN 10 AND 100)</code>：属性a存在且属性a的值小于10或大于100。</td></tr><tr><td>IN (xxx, xxx)</td><td>表示属性的值在某个集合内。集合的元素只能是字符串。</td><td><code>a IS NOT NULL AND (a IN (&#39;abc&#39;, &#39;def&#39;))</code>：属性a存在且属性a的值为abc或def。</td></tr><tr><td><em>=</em> &lt;&gt;</td><td>等于和不等于。可用于比较数字和字符串。</td><td><code>a IS NOT NULL AND (a = &#39;abc&#39; OR a&lt;&gt;&#39;def&#39;)</code>：属性a存在且属性a的值为abc或a的值不为def。</td></tr><tr><td><em>AND</em> OR</td><td>逻辑与、逻辑或。可用于组合任意简单的逻辑判断，需要将每个逻辑判断内容放入括号内。</td><td><code>a IS NOT NULL AND (a &gt; 100) OR (b IS NULL)</code>：属性a存在且属性a的值大于100或属性b不存在。</td></tr></tbody></table><h5 id="生产者-1" tabindex="-1"><a class="header-anchor" href="#生产者-1" aria-hidden="true">#</a> 生产者</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagC&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;SqlFilterTest&quot;</span><span class="token punctuation">,</span>
        tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 设置消息属性</span>

    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="消费者-1" tabindex="-1"><a class="header-anchor" href="#消费者-1" aria-hidden="true">#</a> 消费者</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 4.9.x</span>
consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;SqlFilterTest&quot;</span><span class="token punctuation">,</span>
    <span class="token class-name">MessageSelector</span><span class="token punctuation">.</span><span class="token function">bySql</span><span class="token punctuation">(</span><span class="token string">&quot;(TAGS is not null and TAGS in (&#39;TagA&#39;, &#39;TagB&#39;))&quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;and (a is not null and a between 0 and 3)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 5.x</span>
<span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">&quot;TAGS is not null and TAGS in (&#39;TagA&#39;, &#39;TagB&#39;)&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">SQL92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;SqlFilterTest&quot;</span><span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-概要设计" tabindex="-1"><a class="header-anchor" href="#_2-概要设计" aria-hidden="true">#</a> 2. 概要设计</h2><h3 id="_2-1-过滤信息的注册" tabindex="-1"><a class="header-anchor" href="#_2-1-过滤信息的注册" aria-hidden="true">#</a> 2.1 过滤信息的注册</h3><p>消费者启动时（和每隔一段时间）会向 Broker 端发送心跳，心跳的信息就包含消费者的订阅信息（和过滤信息）。Broker 端有一个专门的消费者过滤信息管理器，更新和存储消费者的过滤信息。</p><h3 id="_2-2-表达式过滤" tabindex="-1"><a class="header-anchor" href="#_2-2-表达式过滤" aria-hidden="true">#</a> 2.2 表达式过滤</h3><p>表达式过滤的逻辑在 Broker 端处理消费者的拉取消息请求时执行。</p><p>Rocketmq 的消息过滤接口<code>MessageFilter</code> 设计了两层过滤机制，它定义了两个方法，分别是根据消费队列过滤和根据消息详情过滤。这样设计的原因是：根据消息属性精确匹配的性能消耗比较大，所以先根据消费队列进行一次过滤，剩下的消息再根据消息详情过滤，可以减少比较次数，提升性能。</p><h4 id="_2-2-1-tag-过滤" tabindex="-1"><a class="header-anchor" href="#_2-2-1-tag-过滤" aria-hidden="true">#</a> 2.2.1 Tag 过滤</h4><p>对于 Tag 过滤，在构建消费队列时会保存根据消息 Tag 生成的 Hash 码（Long 类型，8 字节）。</p><p>根据消费队列过滤时，先计算消息的 Hash 码，判断是否与消费队列中保存的 hash 码一致。如果一致，说明消息的 Tag <strong>有可能</strong>是过滤匹配的 Tag，需要进一步匹配。这是由于不同的 Tag 字符串计算出的 Hash 码可能相同。</p><p>在 Broker 端，Tag 过滤不会进行进一步的匹配，而是在消费者端处理消息拉取结果时进行判断，如果过滤规则 Tag 集合中包含消息的 Tag，则返回给消费者，否则不消费。</p><h4 id="_2-2-2-sql92-过滤" tabindex="-1"><a class="header-anchor" href="#_2-2-2-sql92-过滤" aria-hidden="true">#</a> 2.2.2 SQL92 过滤</h4><p>对于 SQL92 过滤，也有两层过滤机制。第一层根据消费队列过滤主要是用来在许多消费组之间筛选出有可能匹配的消费组，第二层过滤（消息详情过滤）则根据消费组设定的过滤表达式，根据消息的属性和 Tag 进行精确匹配过滤。</p><p>具体的做法是，在消息生产时构造消费队列的过程当中，获取所有订阅该 Topic 的有过滤条件的消费组，预先根据这些消费组的过滤表达式进行一次精确匹配，计算出这条消息是否匹配。</p><p>随后将这些匹配的消费组的名称通过布隆过滤器进行计算，得到一个二进制数组，将其放入消费队列的扩展存储中。</p><p>布隆过滤器可以用来判断某个元素是否可能存在于集合中，在这里就用来判断这个消息是否可能匹配某个消费组的过滤规则。</p><p>在第一层过滤（消费队列过滤）时，从消费队列扩展存储中取出这个消息的布隆过滤器产生的二进制数组，用它来判断这个消费者是否可能匹配过滤规则；然后在第二层过滤时将通过第一层过滤的消息信息进行 SQL92 表达式匹配。</p><p>其中，在消息生产时用布隆过滤器计算二进制数组的操作和构造消费队列扩展存储的操作默认都是关闭的，也就是说默认只会进行 SQL92 表达式计算来精确匹配。如果要开启则需要设置一下配置项：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">enableCalcFilterBitMap</span><span class="token punctuation">=</span><span class="token value attr-value">true		# 设置在构造消费队列时，用布隆过滤器计算匹配过滤条件的消费组，构造成二进制数组</span>
<span class="token key attr-name">enableConsumeQueueExt</span><span class="token punctuation">=</span><span class="token value attr-value">true		# 启用消费队列扩展存储，二进制数组会存到扩展存储中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>开启这两项相当于开启了第一层过滤（消费队列过滤），它其实是把精确过滤的逻辑提前到消息生产时来做。</p><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><h3 id="_3-1-过滤信息注册" tabindex="-1"><a class="header-anchor" href="#_3-1-过滤信息注册" aria-hidden="true">#</a> 3.1 过滤信息注册</h3><p>Tag 过滤信息和 SQL92 过滤信息的保存位置不同。</p><p>Tag 过滤信息由消费者发送心跳时有 Broker 端心跳处理方法调用 <code>ConsumerManager#registerConsumer</code> 进行更新，它存在 <code>ConsumerManager</code> 的 <code>ConcurrentMap&lt;String/* Group */, ConsumerGroupInfo&gt; consumerTable</code> 表中。其中的 <code>SubscriptionData</code> 就保存着 Tag 过滤表达式。</p><p>SQL92 过滤信息的注册也是由消费这发送心跳触发，它的存储位置是 <code>ConsumerFilterManager</code>，最终的 <code>ConsumerFilterData</code> 中包含了编译好的过滤表达式。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642485.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-过滤器接口" tabindex="-1"><a class="header-anchor" href="#_3-2-过滤器接口" aria-hidden="true">#</a> 3.2 过滤器接口</h3><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642487.png" alt="image-20230702220114234" tabindex="0" loading="lazy"><figcaption>image-20230702220114234</figcaption></figure><p>Rocketmq 的消息过滤逻辑（表达式过滤、类过滤）都需要实现 <code>MessageFilter</code> 接口。它的两个方法先后在从 <code>MessageStore</code> 获取消息时调用。通过这两个过滤方法，可以实现二层过滤，先根据较少的信息（消费队列）进行一次粗粒度的过滤，再根据完整的消息信息做精确过滤，这样能够减少精确过滤的次数，提升性能。</p><ul><li><code>boolean isMatchedByConsumeQueue(Long tagsCode, ConsumeQueueExt.CqExtUnit cqExtUnit)</code>：根据消费队列判断消息是否匹配过滤规则 <ul><li><code>Long tagsCode</code>：存在消费队列中消息的 Hash 码</li><li><code>CqExtUnit cqExtUnit</code>：消息消费队列扩展属性，为 SQL92 过滤专用，需要开启配置项才会存储扩展属性。</li></ul></li><li><code>boolean isMatchedByCommitLog(ByteBuffer msgBuffer, Map&lt;String, String&gt; properties)</code>：根据完整消息来判断消息是否匹配过滤规则 <ul><li><code>ByteBuffer msgBuffer</code>：完整消息内容</li><li><code>Map&lt;String, String&gt; Properties</code>：消息属性，主要用于 SQL92 过滤</li></ul></li></ul><p>SQL92 和 Tag 过滤的逻辑都在 <code>ExpressionMessageFilter</code> 中，<code>ExpressionForRetryMessageFilter</code> 则为支持重试 Topic 的 Filter 实现。</p><p>其中 Tag 过滤只用到 <code>isMatchedByConsumeQueue</code>，而 SQL92 过滤主要用到 <code>isMatchedByCommitLog</code>，如果开启了一些配置则也会用到 <code>isMatchedByConsumeQueue</code>。</p><hr><p>下面是 Tag 过滤的主方法 <code>isMatchedByConsumeQUeue</code> 和 <code>isMatchedByCommitLog</code>的调用层级（在 <code>getMessage</code> 中先后被调用）：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642488.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p><code>PullMessageProcessor#processRequest</code>： Broker 端消息拉取请求的入口。先尝试从消息拉取请求中获取过滤信息，如果没有则从服务端 <code>ConsumerManager</code> 中获取过滤信息，然后用订阅信息构造一个 <code>ExpressionMessageFilter</code>，将其传入 <code>getMessage</code> 。</p></li><li><p><code>DefaultMessageStore#getMessage</code> ：先根据 Topic 和队列 offset 获取消息的消费索引，然后根据消费索引从 CommitLog 查出完整消息。</p><ul><li>查出消费索引后，会先执行 <code>isMatchedByConsumeQueue</code> 的判断</li><li>查出完整消息后，再执行 <code>isMatchedByCommitLog</code> 的判断</li></ul></li></ul><h3 id="_3-3-tag-过滤" tabindex="-1"><a class="header-anchor" href="#_3-3-tag-过滤" aria-hidden="true">#</a> 3.3 Tag 过滤</h3><p>Rocketmq 的消费队列中专门开辟了 8 个字节的存储位置用于存储消息的 Tag 字符串的 Hash 码，用来为 Tag 过滤进行初筛。之所以不直接存 Tag 字符串，是因为 ConsumeQueue 的存储项是定长结构，加快处理性能。而且 ConsumeQueue 是内存映射文件，每个文件也不宜太大。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642489.svg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在消费者上报心跳，注册消费者时就会把过滤信息（Tag 的 Hash 码）生成，放入 <code>ConsumerManager</code> 中。</p><p>拉取消息时会先根据拉取消息的消费者信息，构造 <code>ExpressionMessageFilter</code>。</p><p>在 Broker 端，调用 <code>ExpressionMessageFilter#isMatchedByConsumeQueue</code> 方法判断该消息 Tag 的 Hash 码是否在过滤规则允许的 Tag Hash 码列表中，如果在则表示该消息<strong>可能</strong>符合过滤条件，返回给消费者。</p><p>在消费者端处理拉取结果的方法 <code>PullApiWrapper#processPullResult</code> 中，再进行精确判断，如果过滤匹配的 Tag 字符串列表中包含消息的 Tag，则返回给消费者消费。</p><h3 id="_3-4-sql92-过滤" tabindex="-1"><a class="header-anchor" href="#_3-4-sql92-过滤" aria-hidden="true">#</a> 3.4 SQL92 过滤</h3><h4 id="_3-4-1-编译-sql-语句" tabindex="-1"><a class="header-anchor" href="#_3-4-1-编译-sql-语句" aria-hidden="true">#</a> 3.4.1 编译 SQL 语句</h4><p>Rocketmq 从 ActiveMQ 中拿到的 <code>SelectorParser.jj</code> 语法标准文件，在其之上做了一些修改。用它能够将消费者端指定的 SQL 语句解析为 <code>Expression</code> 表达式对象，方便后续消息的过滤匹配。</p>`,73),k={href:"https://javacc.org/",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"jj",-1),m=n("p",null,[s("通过执行 "),n("code",null,"javacc SelectorParser.jj"),s(" 命令以后，其会生成如下七个 Java 文件，用以解析 SQL 语法：")],-1),v=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642490.png",alt:"JavaCC 生成的文件",tabindex:"0",loading:"lazy"}),n("figcaption",null,"JavaCC 生成的文件")],-1),b=e(`<p>其中 <code>SelectorParser.java</code> 是主要的解析器类，会将 SQL92 表达式解析成一个抽象语法树（由 <code>Expression</code> 对象组成）。</p><p><code>SqlFilter#compile</code> 作为表达式编译的入口，内部调用 <code>SelectorParser#parse</code> 方法，将 SQL92 语句编译成 <code>Expression</code> 表达式对象。</p><p>Rocketmq 实现了一些基本的 <code>Expression</code> 用以执行基本的 SQL92 过滤逻辑：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642491.png" alt="image-20230703004414898" tabindex="0" loading="lazy"><figcaption>image-20230703004414898</figcaption></figure><hr><p>编译 SQL92 <code>Expression</code> 表达式的时机与 Tag 表达式类似。消费者上报心跳，注册消费者时会预先编译好，放在 <code>ConsumerFilterManager</code> 中。</p><p>在 Broker 端处理拉取消息请求时，先判断拉取消息请求是否带有过滤信息，如果带有，则根据过滤信息编译；否则从 <code>ConsumerFilterManager</code> 中获取编译好的 <code>Expression</code> 树。</p><h4 id="_3-4-2-布隆过滤器-bloomfilter" tabindex="-1"><a class="header-anchor" href="#_3-4-2-布隆过滤器-bloomfilter" aria-hidden="true">#</a> 3.4.2 布隆过滤器 BloomFilter</h4><blockquote><p>注意，仅 isEnableCalcFilterBitMap 配置为 true 时才使用布隆过滤器进行第一层过滤。否则仅进行第二层过滤。</p></blockquote><p>SQL92 的二层过滤中，第一层利用布隆过滤器判断这个消息是否大概率要被对应的消费者拉取，第二层则执行精确的过滤匹配。</p><p>布隆过滤器的优点是它的空间占用率非常小，缺点则是只能判断出元素<strong>大概率</strong>存在集合中，但是无法确定。</p><hr><p>它主要提供了两个方法：<code>put</code> 用来将元素加入到集合中，<code>contains</code> 判断元素在集合中是否大概率存在，一般不能删除数据。</p><p>存入的原理是：对要插入的元素进行 K 次 Hash 运算，将每次运算结果保存到一个二进制数组的一个下标中。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642492.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查询的原理是：对需要查询的数据进行 K 次同样的 Hash 运算，判断运算的结果是否都为 1。</p><h4 id="_3-4-3-生成布隆过滤器位数组" tabindex="-1"><a class="header-anchor" href="#_3-4-3-生成布隆过滤器位数组" aria-hidden="true">#</a> 3.4.3 生成布隆过滤器位数组</h4><p>Rocketmq 的布隆过滤器实现与 Guava 的不太一样，它没有把二进制位数组 <code>BitsArray</code> 存到布隆过滤器中，而是无状态的，每次运算都需要传入这个数组运算函数。</p><p>它的方法：</p><ul><li><p>put 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将 filterData 存入 BitsArray</span>
<span class="token keyword">void</span> <span class="token function">hashTo</span><span class="token punctuation">(</span><span class="token class-name">BloomFilterData</span> filterData<span class="token punctuation">,</span> <span class="token class-name">BitsArray</span> bits<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>contains 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 检查给定的 BloomFilterData 对应数据是否在 BitsArray 中</span>
<span class="token keyword">boolean</span> <span class="token function">isHit</span><span class="token punctuation">(</span><span class="token class-name">BloomFilterData</span> filterData<span class="token punctuation">,</span> <span class="token class-name">BitsArray</span> bits<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>bits</code>：存储<strong>所有</strong>消费者名称经过 K 次 Hash 结果的位数组</p><ul><li>在消息生产时在 <code>reput</code> 步骤由 <code>CommitLogDispatcherCalcBitMap</code> 中调用 <code>hashTo</code> 生成，存到 <code>ConsumeQueueExt</code> 中。</li><li>遍历所有消费者（的过滤信息），将所有消费者名称经过 K 次 Hash，存入位数组。（相当于将所有需要过滤的消费者名称存入布隆过滤器）</li></ul></li><li><p><code>BloomFilterData</code>：本次拉取消息的消费者的过滤信息</p><ul><li><p>在消费者注册时根据消费者名称和订阅的 Topic 生成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BloomFilterData</span> bloomFilterData <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>其中包含有消费者名称经过 K 次 Hash 得到的位数组 <code>int[] bitPos</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">BloomFilterData</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bitPos<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> bitNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="_3-4-4-消息过滤" tabindex="-1"><a class="header-anchor" href="#_3-4-4-消息过滤" aria-hidden="true">#</a> 3.4.4 消息过滤</h4><p>消息的两层过滤与 Tag 过滤一样，在拉消息方法中被调用。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308061642493.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在拉取消息处理方法中，根据拉取消息的消费者信息，从 <code>ConsumerFilterManager</code> 中获取过滤数据，生成 <code>ExpressionMessageFilter</code> 对象。</p><p>先调用 <code>ExpressionMessageFilter#isMatchedByConsumeQueue</code>，利用布隆过滤器进行初筛。判断拉消息的消费者是否可能需要消费到这条消息。</p><p>然后调用 <code>isMatchedByCommitLog</code> 方法，用编译好的 <code>Expression</code> 进行过滤逻辑判断。</p><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-tag-过滤" tabindex="-1"><a class="header-anchor" href="#_4-1-tag-过滤" aria-hidden="true">#</a> 4.1 Tag 过滤</h3><h4 id="_4-1-1-broker-端过滤" tabindex="-1"><a class="header-anchor" href="#_4-1-1-broker-端过滤" aria-hidden="true">#</a> 4.1.1 Broker 端过滤</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ExpressMessageFilter.java</span>
<span class="token doc-comment comment">/**
 * 根据 ConsumeQueue 中的属性哈希码进行过滤
 *
 * <span class="token keyword">@param</span> <span class="token parameter">tagsCode</span> tagsCode
 * <span class="token keyword">@param</span> <span class="token parameter">cqExtUnit</span> extend unit of consume queue
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatchedByConsumeQueue</span><span class="token punctuation">(</span><span class="token class-name">Long</span> tagsCode<span class="token punctuation">,</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span> cqExtUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> subscriptionData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果是类过滤模式，直接返回 true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">isClassFilterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Tag 过滤</span>
    <span class="token comment">// by tags code.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExpressionType</span><span class="token punctuation">.</span><span class="token function">isTagType</span><span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getExpressionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 消息发送时没有设置 Tag，返回 true</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagsCode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 允许任意 Tag，返回 true</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getSubString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SubscriptionData</span><span class="token punctuation">.</span><span class="token constant">SUB_ALL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 返回过滤数据的 Tag 哈希码表中是否包含发送消息的哈希码</span>
        <span class="token keyword">return</span> subscriptionData<span class="token punctuation">.</span><span class="token function">getCodeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// SQL92 表达式过滤</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-客户端过滤" tabindex="-1"><a class="header-anchor" href="#_4-1-2-客户端过滤" aria-hidden="true">#</a> 4.1.2 客户端过滤</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// PullAPIWrapper.java</span>
<span class="token doc-comment comment">/**
 * 拉取消息结果处理
 * 消息过滤 &amp; 将二进制消息解析成对象
 *
 * <span class="token keyword">@param</span> <span class="token parameter">mq</span>
 * <span class="token keyword">@param</span> <span class="token parameter">pullResult</span>
 * <span class="token keyword">@param</span> <span class="token parameter">subscriptionData</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">PullResult</span> <span class="token function">processPullResult</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PullResult</span> pullResult<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">SubscriptionData</span> subscriptionData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PullResultExt</span> pullResultExt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PullResultExt</span><span class="token punctuation">)</span> pullResult<span class="token punctuation">;</span>

    <span class="token comment">// 根据拉取结果，更新下次从哪个节点拉取消息</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updatePullFromWhichNode</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pullResultExt<span class="token punctuation">.</span><span class="token function">getSuggestWhichBrokerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拉取成功</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PullStatus</span><span class="token punctuation">.</span><span class="token constant">FOUND</span> <span class="token operator">==</span> pullResult<span class="token punctuation">.</span><span class="token function">getPullStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>pullResultExt<span class="token punctuation">.</span><span class="token function">getMessageBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgList <span class="token operator">=</span> <span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">decodes</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgListFilterAgain <span class="token operator">=</span> msgList<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getTagsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>subscriptionData<span class="token punctuation">.</span><span class="token function">isClassFilterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Tag 过滤模式</span>
            msgListFilterAgain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>msgList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果过滤的 tag 集合中包含消息的 tag，则返回给消费者，否则不消费</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getTagsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        msgListFilterAgain<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    pullResultExt<span class="token punctuation">.</span><span class="token function">setMessageBinary</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> pullResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-sql92-过滤" tabindex="-1"><a class="header-anchor" href="#_4-2-sql92-过滤" aria-hidden="true">#</a> 4.2 SQL92 过滤</h3><h4 id="_4-2-1-注册过滤信息" tabindex="-1"><a class="header-anchor" href="#_4-2-1-注册过滤信息" aria-hidden="true">#</a> 4.2.1 注册过滤信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DefaultConsumerIdsChangeListener.java</span>
<span class="token doc-comment comment">/**
 * 消费者注册、注销，或连接断开时触发
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ConsumerGroupEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">CHANGE</span><span class="token operator">:</span>
            <span class="token comment">// 如果发生变化，向所有消费者发送重平衡请求</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 获取消费组中所有消费者的 Channel</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channels <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotifyConsumerIdsChangedEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Channel</span> chl <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 发送重平衡请求</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBroker2Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyConsumerIdsChanged</span><span class="token punctuation">(</span>chl<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">UNREGISTER</span><span class="token operator">:</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerFilterManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unRegister</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">REGISTER</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> subscriptionDataList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 新消费者注册，更新过滤信息</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerFilterManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> subscriptionDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown event &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ConsumerFilterManager.java</span>
<span class="token doc-comment comment">/**
 * 注册 SQL92 的过滤信息，构造布隆过滤器
 *
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span>
 * <span class="token keyword">@param</span> <span class="token parameter">consumerGroup</span>
 * <span class="token keyword">@param</span> <span class="token parameter">expression</span>
 * <span class="token keyword">@param</span> <span class="token parameter">type</span>
 * <span class="token keyword">@param</span> <span class="token parameter">clientVersion</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expression<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> clientVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExpressionType</span><span class="token punctuation">.</span><span class="token function">isTagType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>expression <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">FilterDataMapByTopic</span> filterDataMapByTopic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filterDataByTopic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>filterDataMapByTopic <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FilterDataMapByTopic</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDataMapByTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FilterDataMapByTopic</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filterDataByTopic<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterDataMapByTopic <span class="token operator">=</span> prev <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> prev <span class="token operator">:</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 生成布隆过滤器的位数据，保存到消费者过滤信息中。</span>
    <span class="token class-name">BloomFilterData</span> bloomFilterData <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 生成消费者过滤信息，保存到 Broker 的 ConsumerFilterManager 过滤信息管理器</span>
    <span class="token keyword">return</span> filterDataMapByTopic<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> expression<span class="token punctuation">,</span> type<span class="token punctuation">,</span> bloomFilterData<span class="token punctuation">,</span> clientVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-消息生产时构建布隆过滤器数据" tabindex="-1"><a class="header-anchor" href="#_4-2-2-消息生产时构建布隆过滤器数据" aria-hidden="true">#</a> 4.2.2 消息生产时构建布隆过滤器数据</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// CommitLogDispatcherCalcBitMap.java</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// enableCalcFilterBitMap 配置开启时才创建位数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">isEnableCalcFilterBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>

        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerFilterData</span><span class="token punctuation">&gt;</span></span> filterDatas <span class="token operator">=</span> consumerFilterManager<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>filterDatas <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> filterDatas<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerFilterData</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> filterDatas<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BitsArray</span> filterBitMap <span class="token operator">=</span> <span class="token class-name">BitsArray</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>consumerFilterManager<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历所有注册的带有 SQL92 表达式的消费者，判断是否通过过滤，如果没有被过滤，则消费者名称的位映射，放入到 filterBitMap 中</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConsumerFilterData</span> filterData <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterData<span class="token punctuation">.</span><span class="token function">getCompiledExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG] Consumer in filter manager has no compiled expression! {}&quot;</span><span class="token punctuation">,</span> filterData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterData<span class="token punctuation">.</span><span class="token function">getBloomFilterData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[BUG] Consumer in filter manager has no bloom data! {}&quot;</span><span class="token punctuation">,</span> filterData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Object</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">MessageEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageEvaluationContext</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                ret <span class="token operator">=</span> filterData<span class="token punctuation">.</span><span class="token function">getCompiledExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Calc filter bit map error!commitLogOffset={}, consumer={}, {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Result of Calc bit map:ret={}, data={}, props={}, offset={}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> filterData<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// eval true</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ret <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 将消费组对应的位数据（由 &quot;消费组#Topic&quot; Hash 生成）保存到位数组中</span>
                consumerFilterManager<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashTo</span><span class="token punctuation">(</span>
                    filterData<span class="token punctuation">.</span><span class="token function">getBloomFilterData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    filterBitMap
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将所有没有被过滤的消费者名称计算出的位映射，放入 DispatchRequest 中，尝试存入 ConsumeQueueExt 文件中（如果开关开启）。</span>
        request<span class="token punctuation">.</span><span class="token function">setBitMap</span><span class="token punctuation">(</span>filterBitMap<span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> <span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">computeElapsedTimeMilliseconds</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1ms</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsedTime <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Spend {} ms to calc bit map, consumerNum={}, topic={}&quot;</span><span class="token punctuation">,</span> elapsedTime<span class="token punctuation">,</span> filterDatas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Calc bit map error! topic={}, offset={}, queueId={}, {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-消息拉取时过滤" tabindex="-1"><a class="header-anchor" href="#_4-2-3-消息拉取时过滤" aria-hidden="true">#</a> 4.2.3 消息拉取时过滤</h4><p>一层过滤</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ExpressionMessageFilter.java</span>
<span class="token doc-comment comment">/**
 * 根据 ConsumeQueue 中的属性哈希码进行过滤
 *
 * <span class="token keyword">@param</span> <span class="token parameter">tagsCode</span> tagsCode
 * <span class="token keyword">@param</span> <span class="token parameter">cqExtUnit</span> extend unit of consume queue
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatchedByConsumeQueue</span><span class="token punctuation">(</span><span class="token class-name">Long</span> tagsCode<span class="token punctuation">,</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span> cqExtUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> subscriptionData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果是类过滤模式，直接返回 true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">isClassFilterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Tag 过滤</span>
    <span class="token comment">// by tags code.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExpressionType</span><span class="token punctuation">.</span><span class="token function">isTagType</span><span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getExpressionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// SQL92 表达式过滤</span>
        <span class="token comment">// no expression or no bloom</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>consumerFilterData <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> consumerFilterData<span class="token punctuation">.</span><span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span>
            <span class="token operator">||</span> consumerFilterData<span class="token punctuation">.</span><span class="token function">getCompiledExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> consumerFilterData<span class="token punctuation">.</span><span class="token function">getBloomFilterData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// message is before consumer</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cqExtUnit <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>consumerFilterData<span class="token punctuation">.</span><span class="token function">isMsgInLive</span><span class="token punctuation">(</span>cqExtUnit<span class="token punctuation">.</span><span class="token function">getMsgStoreTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Pull matched because not in live: {}, {}&quot;</span><span class="token punctuation">,</span> consumerFilterData<span class="token punctuation">,</span> cqExtUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 从 ConsumeQueueExt 中取出消息 Reput 时计算的 BitMap，它表示通过过滤条件的所有 SQL92 消费者名称。</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filterBitMap <span class="token operator">=</span> cqExtUnit<span class="token punctuation">.</span><span class="token function">getFilterBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BloomFilter</span> bloomFilter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>consumerFilterManager<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>filterBitMap <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>bloomDataValid
            <span class="token operator">||</span> filterBitMap<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">SIZE</span> <span class="token operator">!=</span> consumerFilterData<span class="token punctuation">.</span><span class="token function">getBloomFilterData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBitNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">BitsArray</span> bitsArray <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断当前消费者是否需要消费该消息（是否通过过滤），如果返回 true，表示可能需要消费该消息，false 则一定不需要消费</span>
            bitsArray <span class="token operator">=</span> <span class="token class-name">BitsArray</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>filterBitMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> ret <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">isHit</span><span class="token punctuation">(</span>consumerFilterData<span class="token punctuation">.</span><span class="token function">getBloomFilterData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bitsArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Pull {} by bit map:{}, {}, {}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> consumerFilterData<span class="token punctuation">,</span> bitsArray<span class="token punctuation">,</span> cqExtUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;bloom filter error, sub=&quot;</span> <span class="token operator">+</span> subscriptionData
                <span class="token operator">+</span> <span class="token string">&quot;, filter=&quot;</span> <span class="token operator">+</span> consumerFilterData <span class="token operator">+</span> <span class="token string">&quot;, bitMap=&quot;</span> <span class="token operator">+</span> bitsArray<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二层过滤</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 根据 CommitLog 中保存的消息内容进行过滤，主要为 SQL92 表达式模式过滤服务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">msgBuffer</span> message buffer in commit log, may be null if not invoked in store.
     * <span class="token keyword">@param</span> <span class="token parameter">properties</span> message properties, should decode from buffer if null by yourself.
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatchedByCommitLog</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> msgBuffer<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 类过滤模式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">isClassFilterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// TAG 模式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExpressionType</span><span class="token punctuation">.</span><span class="token function">isTagType</span><span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getExpressionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">ConsumerFilterData</span> realFilterData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>consumerFilterData<span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tempProperties <span class="token operator">=</span> properties<span class="token punctuation">;</span>

        <span class="token comment">// no expression</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>realFilterData <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> realFilterData<span class="token punctuation">.</span><span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span>
            <span class="token operator">||</span> realFilterData<span class="token punctuation">.</span><span class="token function">getCompiledExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 从消息 Buffer 中解码消息属性</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempProperties <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> msgBuffer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tempProperties <span class="token operator">=</span> <span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">decodeProperties</span><span class="token punctuation">(</span>msgBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Object</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">MessageEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageEvaluationContext</span><span class="token punctuation">(</span>tempProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 用编译好的 SQL92 表达式去过滤消息属性</span>
            ret <span class="token operator">=</span> realFilterData<span class="token punctuation">.</span><span class="token function">getCompiledExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Message Filter error, &quot;</span> <span class="token operator">+</span> realFilterData <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> tempProperties<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Pull eval result: {}, {}, {}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> realFilterData<span class="token punctuation">,</span> tempProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>ret <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,44),g={href:"https://rocketmq.apache.org/zh/docs/featureBehavior/07messagefilter",target:"_blank",rel:"noopener noreferrer"},h={href:"https://kunzhao.org/docs/rocketmq/rocketmq-message-filter-flow",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/prestigeding/article/details/79287382",target:"_blank",rel:"noopener noreferrer"},y=n("hr",null,null,-1),w=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),x=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function q(T,C){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("原文地址："),n("a",u,[s("http://hscarb.github.io/rocketmq/20230716-rocketmq-filter.html"),t(a)])]),r,n("blockquote",null,[n("p",null,[n("a",k,[s("JavaCC (Java Compiler Compiler)"),t(a)]),s(" 是一个能生成语法和词法分析器的生成程序，它通过阅读一个自定义的语法标准文件 (通常以 "),d,s(" 为后缀名) ，然后就能生成能够解析该语法的扫描器和解析器的代码。")]),m,v]),b,n("ul",null,[n("li",null,[n("a",g,[s("官方文档——消息过滤"),t(a)])]),n("li",null,[n("a",h,[s("RocketMQ 消息过滤流程——赵坤"),t(a)])]),n("li",null,[n("a",f,[s("源码分析RocketMQ消息过滤机制下篇-FilterServer、ClassFilter模式详解——丁威"),t(a)])])]),y,w,x])}const M=p(i,[["render",q],["__file","20230716-rocketmq-filter.html.vue"]]);export{M as default};
