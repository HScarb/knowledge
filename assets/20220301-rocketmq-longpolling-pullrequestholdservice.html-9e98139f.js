import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as i,a as n,b as s,d as a,w as t,e as o}from"./app-eaa093f0.js";const r={},k={href:"http://hscarb.github.io/rocketmq/20220301-rocketmq-longpolling-pullrequestholdservice.html",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"rocketmq-消息消费-轮询机制-pullrequestholdservice",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rocketmq-消息消费-轮询机制-pullrequestholdservice","aria-hidden":"true"},"#"),s(" RocketMQ 消息消费 轮询机制 PullRequestHoldService")],-1),m={class:"table-of-contents"},v=o('<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><p>先来看看 RocketMQ 消费过程中的轮询机制是啥。首先需要补充一点消费相关的前置知识。</p><h3 id="_1-1-消息消费方式" tabindex="-1"><a class="header-anchor" href="#_1-1-消息消费方式" aria-hidden="true">#</a> 1.1 消息消费方式</h3><p>RocketMQ 支持多种消费方式，包括 Push 模式和 Pull 模式</p><ul><li>Pull 模式：用户自己进行消息的拉取和消费进度的更新</li><li>Push 模式：Broker 将新的消息自动发送给用户进行消费</li></ul><h3 id="_1-2-push-消费模式" tabindex="-1"><a class="header-anchor" href="#_1-2-push-消费模式" aria-hidden="true">#</a> 1.2 Push 消费模式</h3><p>我们一般使用 RocketMQ 时用的是 Push 模式，因为比较方便，不需要手动拉取消息和更新消费进度。</p><p>那么你有没有想过 Push 模式是如何做到能够立即消费新的消息？</p><h4 id="_1-2-1-push-模式原理" tabindex="-1"><a class="header-anchor" href="#_1-2-1-push-模式原理" aria-hidden="true">#</a> 1.2.1 Push 模式原理</h4><p>实际上，在 Push 消费时，消费者是在不断轮询 Broker，询问是否有新消息可供消费。一旦有新消息到达，马上拉取该消息。也就是说 Push 模式内部也用了 Pull 消息的模式，这样就可以立即消费到最新的消息。</p><h3 id="_1-3-如何进行轮询" tabindex="-1"><a class="header-anchor" href="#_1-3-如何进行轮询" aria-hidden="true">#</a> 1.3 如何进行轮询？</h3><p>那么 Push 模式或 Pull 模式如何进行消息的查询？</p><p>能够想到的比较笨的方法是，每隔一定的时间（如1ms）就向 Broker 发送一个查询请求，如果没有新消息则立刻返回。可想而知这种方法非常浪费网络资源。</p><p>RocketMQ 为了提高网络性能，在拉取消息时如果没有新消息，不会马上返回，而是会将该查询请求挂起一段时间，然后再重试查询。如果一直没有新消息，直到轮询时间超过设定的阈值才会返回。</p><p>根据轮询设定的超时阈值大小的不同，RocketMQ 有两种轮询方式，分别为<strong>长轮询</strong>（默认）和<strong>短轮询。</strong></p><h3 id="_1-4-长轮询和短轮询" tabindex="-1"><a class="header-anchor" href="#_1-4-长轮询和短轮询" aria-hidden="true">#</a> 1.4 长轮询和短轮询</h3><p>RocketMQ 的 Broker 端参数 <code>longPollingEnable</code> 可以配置轮询方式，默认为 <code>true</code></p><ul><li>短轮询：<code>longPollingEnable=false</code>，轮询时间为 <code>shortPollingTimeMills</code> ，默认为 1s</li><li>长轮询：<code>longPollingEnable=true</code>，轮询时间为 5s。拉取请求挂起时间：受 <code>DefaultMQPullConsumer</code> 的 <code>brokerSuspendMaxTimeMillis</code> 控制，默认push模式固定15s，pull模式固定20s。</li></ul><h2 id="_2-概要流程" tabindex="-1"><a class="header-anchor" href="#_2-概要流程" aria-hidden="true">#</a> 2. 概要流程</h2>',19),g=n("img",{src:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_activity.drawio.svg",alt:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_activity.drawio.svg",tabindex:"0",loading:"lazy"},null,-1),h={href:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_activity.drawio.svg",target:"_blank",rel:"noopener noreferrer"},b=o('<p>根据上面的活动图来看一下 RocketMQ 消费时的轮询机制流程</p><ol><li>Consumer 发送拉取消息请求</li><li>Broker 收到请求后交给请求处理模块处理</li><li>尝试从存储的消息中拉取消息</li><li>如果能够拉取消息，那么将拉取到的消息直接返回</li><li>如果没有拉取到消息，那么根据 Broker 是否支持挂起和是否开启长轮询来判断是否要进行轮询以及进行哪种轮询。 <ol><li>如果支持挂起，那么会将该拉取请求挂起</li><li>长轮询等待 5s</li><li>短轮询等待 1s</li></ol></li><li>检查消费队列中是否有新消息到达，如果没有则继续等待，以此循环。如果有新消息，处理挂起的拉取消息请求并返回消费者。</li><li>如果没有新消息到达，轮询后会检查每个挂起的拉取请求的挂起时间是否超过挂起时间阈值，如果超过那么也会直接返回消费者，否则继续循环进行轮询操作。</li></ol><hr><p>那么按照上述流程，开启长轮询的情况下，如果一次轮询没有找到消息，要等待 5s 才能进行下一次查询。如果这 5s 当中有新的消息存入，如何保证能够立刻消费到？</p><p>解决方案不难想到，就是新的消息写入后，主动进行通知，让挂起的拉取请求立刻进行拉取操作。</p><p>RocketMQ 就是这么做的，在消息存入 CommitLog 后的 doReput 方法中，会判断是否是长轮询，如果是则会发送一个通知，让挂起的拉取请求立刻进行处理。</p><h2 id="_3-详细流程" tabindex="-1"><a class="header-anchor" href="#_3-详细流程" aria-hidden="true">#</a> 3. 详细流程</h2><h3 id="_3-1-涉及到的类" tabindex="-1"><a class="header-anchor" href="#_3-1-涉及到的类" aria-hidden="true">#</a> 3.1 涉及到的类</h3><h4 id="_3-1-1-pullmessageprocessor" tabindex="-1"><a class="header-anchor" href="#_3-1-1-pullmessageprocessor" aria-hidden="true">#</a> 3.1.1 PullMessageProcessor</h4><p>该类是 Broker 处理 Consumer 拉取清求的入口类。当 Broker 收到 Consumer 发送的拉取请求时，调用该类的 processRequest 方法</p><h4 id="_3-1-2-pullrequestholdservice" tabindex="-1"><a class="header-anchor" href="#_3-1-2-pullrequestholdservice" aria-hidden="true">#</a> 3.1.2 <strong>PullRequestHoldService</strong></h4><p>长轮询请求管理线程，挂起的拉取请求会在这里进行保存。每等待一段时间（长轮询/短轮询等待时间）会检查挂起的请求中是否有可以进行拉取的数据。</p><h4 id="_3-1-3-defaultmessagestore-reputmessageservice" tabindex="-1"><a class="header-anchor" href="#_3-1-3-defaultmessagestore-reputmessageservice" aria-hidden="true">#</a> 3.1.3 <strong>DefaultMessageStore#ReputMessageService</strong></h4><p>该线程负责将存储到 CommitLog 的消息重新转发，用以生成 ConsumeQueue 和 IndexFile 索引。在生成索引之后，会向长轮询线程发送提醒，立刻唤醒相应队列的拉取请求，执行消息拉取。</p><h3 id="_3-2-时序图" tabindex="-1"><a class="header-anchor" href="#_3-2-时序图" aria-hidden="true">#</a> 3.2 时序图</h3>',15),f=n("img",{src:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_sequence.drawio.svg",alt:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_sequence.drawio.svg",tabindex:"0",loading:"lazy"},null,-1),y={href:"https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_sequence.drawio.svg",target:"_blank",rel:"noopener noreferrer"},w=o(`<p>着重体现了长轮询逻辑，其他逻辑有所省略</p><ol><li>消费者调用 <code>pullKernelImpl()</code> 发送拉取请求，调用时用 <code>brokerSuspendMaxTimeMillis</code> 指定了 Broker 挂起的最长时间，默认为 20s</li><li>Broker 中 <code>PullMessageProcess</code> 处理拉取请求，从 <code>ConsumeQueue</code> 中查询消息</li><li>如果没有查询到消息，判断是否启用长轮询，调用 <code>PullRequestHoldService#suspendPullRequest()</code> 方法将该请求挂起</li><li>PullRequestHoldService 线程 <code>run()</code> 方法循环等待轮询时间，然后周期性调用 <code>checkHoldRequest()</code> 方法检查挂起的请求是否有消息可以拉取</li><li>如果检查到有新消息可以拉取，调用 <code>notifyMessageArriving()</code> 方法</li><li>ReputMessageService 的 doReput() 如果被调用，说明也有新消息到达，需要唤醒挂起的拉取请求。这里也会发送一个 notify，进而调用 <code>notifyMessageArriving()</code> 方法</li><li><code>notifyMessageArriving()</code> 方法中也会查询 ConsumeQueue 的最大 offset，如果确实有新消息，那么将唤醒对应的拉取请求，具体的方法是调用 <code>executeRequestWhenWakeup()</code> 方法</li><li><code>executeRequestWhenWakeup()</code> 方法唤醒拉取请求，调用 <code>processRequest()</code> 方法处理该请求</li></ol><h3 id="_3-3-每个类的具体逻辑" tabindex="-1"><a class="header-anchor" href="#_3-3-每个类的具体逻辑" aria-hidden="true">#</a> 3.3 每个类的具体逻辑</h3><h4 id="_3-3-1-pullmessageprocessor" tabindex="-1"><a class="header-anchor" href="#_3-3-1-pullmessageprocessor" aria-hidden="true">#</a> 3.3.1 PullMessageProcessor</h4><p>Broker 处理 Consumer 拉取清求的入口类</p><ul><li><p><code>RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)</code>：处理 Consumer 拉取请求的入口方法，收到 Consumer 拉取请求时调用。该方法主要完成如下操作</p><ol><li>校验</li><li>消息过滤</li><li>从存储中查询消息</li><li>返回响应给 Consumer</li></ol><p>如果从存储中没有查询到消息，会将响应码设置为 <code>ResponseCode.PULL_NOT_FOUND</code>，并且启动长轮询</p></li><li><p><code>void executeRequestWhenWakeup(Channel channel, final RemotingCommand request)</code>：将 Hold 的拉取请求唤醒，再次拉取消息</p><ul><li>该方法在长轮询收到新消息时调用，立即唤醒挂起的拉取请求，然后对这些请求调用 <code>processRequest</code> 方法</li><li>何时需要提醒长轮询新消息已经到达？上面说到，在长轮询等待时如果有新消息到达，<code>CommitLog</code> 的 <code>doReput</code> 方法中会进行提醒，最终会调用 <code>executeRequestWhenWakeup</code> 方法</li></ul></li></ul><h4 id="_3-3-2-pullrequestholdservice" tabindex="-1"><a class="header-anchor" href="#_3-3-2-pullrequestholdservice" aria-hidden="true">#</a> 3.3.2 <strong>PullRequestHoldService</strong></h4><p>该服务线程会从 <code>pullRequestTable</code> 本地缓存变量中取PullRequest请求，检查轮询条件“<strong>待拉取消息的偏移量是否小于消费队列最大偏移量</strong>”是否成立，如果条件成立则说明有新消息达到Broker端，则通过PullMessageProcessor的executeRequestWhenWakeup()方法重新尝试发起Pull消息的RPC请求</p><ul><li><p><code>pullRequestTable</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic@queueId */</span><span class="token punctuation">,</span> <span class="token class-name">ManyPullRequest</span><span class="token comment">/* 同一队列积累的拉取请求 */</span><span class="token operator">&gt;</span> pullRequestTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面是挂起的消息拉取请求容器，它是一个 <code>ConcurrentHashMap</code>，key 是拉取请求的队列，value 是该队列挂起的所有拉取请求。其中 <code>ManyPullRequest</code> 底层是一个 <code>ArrayList</code>，它的 add 方法加了锁。</p></li><li><p><code>suspendPullRequest(String topic, int queueId, PullRequest pullRequest)</code>：将 Consumer 拉取请求暂时挂起，会将请求加入到 <code>pullRequestTable</code> 中</p></li><li><p><code>checkHoldRequest()</code>：检查所有挂起的拉取请求，如果有数据满足要求，就唤醒该请求，对其执行 <code>PullMessageProcessor#processRequest</code> 方法</p></li><li><p><code>run()</code>：线程主循环，每等待一段时间就调用 <code>checkHoldRequest()</code> 方法检查是否有请求需要唤醒。等待的时间根据长轮询/短轮询的配置决定，长轮询等待 5s，短轮询默认等待 1s</p></li><li><p><code>notifyMessageArriving()</code>：被 <code>checkHoldRequest()</code> 和 <code>ReputMessageService#doReput()</code> 调用，表示新消息到达，唤醒对应队列挂起的拉取请求</p></li></ul><h4 id="_3-3-3-defaultmessagestore-reputmessageservice" tabindex="-1"><a class="header-anchor" href="#_3-3-3-defaultmessagestore-reputmessageservice" aria-hidden="true">#</a> 3.3.3 <strong>DefaultMessageStore#ReputMessageService</strong></h4><p>该服务线程 <code>doReput()</code> 方法会在 Broker 端不断地从数据存储对象 <code>CommitLog</code> 中解析数据并分发请求，随后构建出 <code>ConsumeQueue</code>（逻辑消费队列）和 <code>IndexFile</code>（消息索引文件）两种类型的数据。</p><p>同时从本地缓存变量 <code>PullRequestHoldService#pullRequestTable</code> 中，取出挂起的拉起请求并执行。</p><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-pullmessageprocessor" tabindex="-1"><a class="header-anchor" href="#_4-1-pullmessageprocessor" aria-hidden="true">#</a> 4.1 PullMessageProcessor</h3><h4 id="_4-1-1-processrequest" tabindex="-1"><a class="header-anchor" href="#_4-1-1-processrequest" aria-hidden="true">#</a> 4.1.1 processRequest</h4><p>如果从存储中没有查询到消息，会将响应码设置为 <code>ResponseCode.PULL_NOT_FOUND</code>，并且启动长轮询</p><p>以下三种情况会将响应码设置为<code>ResponseCode.PULL_NOT_FOUND</code>：</p><ol><li>NO_MESSAGE_IN_QUEUE：消费队列中没有任何消息</li><li>OFFSET_FOUND_NULL：offset未找到任何数据</li><li>OFFSET_OVERFLOW_ONE：待拉取偏移量等于队列最大偏移量</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 处理客户端请求入口
 *
 * <span class="token keyword">@param</span> <span class="token parameter">channel</span> 网络通道，通过该通道向消息拉取客户端发送响应结果
 * <span class="token keyword">@param</span> <span class="token parameter">request</span> 消息拉取请求
 * <span class="token keyword">@param</span> <span class="token parameter">brokerAllowSuspend</span> Broker端是否允许挂起，默认true。true：如果未找到消息则挂起。false：未找到消息直接返回消息未找到
 * <span class="token keyword">@return</span> 响应
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RemotingCommandException</span></span> 当解析请求发生异常时
 */</span>
<span class="token keyword">private</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> brokerAllowSuspend<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// ...</span>
        <span class="token comment">// 如果从消费队列中未找到新的可以拉取的消息，判断并挂起该拉取请求</span>
        <span class="token keyword">case</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">PULL_NOT_FOUND</span><span class="token operator">:</span>
            <span class="token comment">// 长轮询</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerAllowSuspend <span class="token operator">&amp;&amp;</span> hasSuspendFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> pollingTimeMills <span class="token operator">=</span> suspendTimeoutMillisLong<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    pollingTimeMills <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShortPollingTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">String</span> topic <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> offset <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> queueId <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> pollingTimeMills<span class="token punctuation">,</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> subscriptionData<span class="token punctuation">,</span> messageFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullRequestHoldService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspendPullRequest</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-executerequestwhenwakeup" tabindex="-1"><a class="header-anchor" href="#_4-1-2-executerequestwhenwakeup" aria-hidden="true">#</a> 4.1.2 executeRequestWhenWakeup</h4><p>在PullMessageProcessor的executeRequestWhenWakeup()方法中，通过业务线程池pullMessageExecutor，异步提交重新Pull消息的请求任务，即为重新调了一次PullMessageProcessor业务处理器的processRequest()方法，来实现Pull消息请求的二次处理）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 将Hold的拉取请求唤醒，再次拉取消息
 * 该方法调用线程池，因此，不会阻塞
 *
 * <span class="token keyword">@param</span> <span class="token parameter">channel</span> 通道
 * <span class="token keyword">@param</span> <span class="token parameter">request</span> Consumer拉取请求
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RemotingCommandException</span></span> 当远程调用发生异常
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeRequestWhenWakeup</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Runnable</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 处理Consumer拉取请求，获取返回体</span>
                <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token class-name">PullMessageProcessor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    response<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    response<span class="token punctuation">.</span><span class="token function">markResponseType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 将返回体写入channel，返回给Consumer</span>
                        channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token annotation punctuation">@Override</span>
                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;processRequestWrapper response to {} failed&quot;</span><span class="token punctuation">,</span>
                                        future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;processRequestWrapper process request over, but response failed&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingCommandException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;excuteRequestWhenWakeup run&quot;</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 异步执行请求处理和返回</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullMessageExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestTask</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-pullrequestholdservice" tabindex="-1"><a class="header-anchor" href="#_4-2-pullrequestholdservice" aria-hidden="true">#</a> 4.2 <strong>PullRequestHoldService</strong></h3><h4 id="_4-2-1-suspendpullrequest" tabindex="-1"><a class="header-anchor" href="#_4-2-1-suspendpullrequest" aria-hidden="true">#</a> 4.2.1 suspendPullRequest</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 挂起（保存）客户端请求，当有数据的时候触发请求
 *
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span> 主题
 * <span class="token keyword">@param</span> <span class="token parameter">queueId</span> 队列编号
 * <span class="token keyword">@param</span> <span class="token parameter">pullRequest</span> 拉取消息请求
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">suspendPullRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PullRequest</span> pullRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据topic和queueId构造map的key</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// map的key如果为空，创建一个空的request队列，填充key和value</span>
    <span class="token class-name">ManyPullRequest</span> mpr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mpr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mpr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManyPullRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ManyPullRequest</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> mpr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mpr <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 保存该次Consumer拉取请求</span>
    mpr<span class="token punctuation">.</span><span class="token function">addPullRequest</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-checkholdrequest" tabindex="-1"><a class="header-anchor" href="#_4-2-2-checkholdrequest" aria-hidden="true">#</a> 4.2.2 checkHoldRequest</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 检查所有已经挂起的长轮询请求
 * 如果有数据满足要求，就触发请求再次执行
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历拉取请求容器中的每个队列</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> kArray <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">TOPIC_QUEUEID_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> kArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> topic <span class="token operator">=</span> kArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> queueId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从store中获取队列的最大偏移量</span>
            <span class="token keyword">final</span> <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 根据store中获取的最大偏移量，判断是否有新消息到达，如果有则执行拉取请求操作</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyMessageArriving</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;check hold request failed. topic={}, queueId={}&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-run" tabindex="-1"><a class="header-anchor" href="#_4-2-3-run" aria-hidden="true">#</a> 4.2.3 run</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} service started&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 等待一定时间</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 开启长轮询，每5s判断一次消息是否到达</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 未开启长轮询，每1s判断一次消息是否到达</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShortPollingTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">long</span> beginLockTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>systemClock<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 检查是否有消息到达，可以唤醒挂起的请求</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>systemClock<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginLockTimestamp<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>costTime <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[NOTIFYME] check hold request cost {} ms.&quot;</span><span class="token punctuation">,</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service has exception. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} service end&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-4-notifymessagearriving" tabindex="-1"><a class="header-anchor" href="#_4-2-4-notifymessagearriving" aria-hidden="true">#</a> 4.2.4 notifyMessageArriving</h4><p>这个方法在两个地方被调用，如下图所示</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152215195.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>这个方法是重新唤醒拉取请求的核心方法。调用这个方法，提醒 PullRequestHoldService 线程有新消息到达</p><p>我们来看看这个方法具体做了什么</p><ol><li>根据 topic 和 queueId 获取挂起的拉取请求列表</li><li>从 store 中获取该队列消息的最大offset</li><li>遍历该队列的所有拉取请求，符合以下两种条件之一的拉取请求会被处理并返回 <ol><li>消费队列最大offset比消费者拉取请求的offset大，说明有新的消息可以被拉取，处理该拉取请求</li><li>拉取请求挂起时间超过阈值，直接返回消息未找到</li></ol></li><li>如果不满足以上两个条件，那么该拉取请求会重新放回 <code>pullRequestTable</code>，等待下次检查</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 当有新消息到达的时候，唤醒长轮询的消费端请求
 *
 * <span class="token keyword">@param</span> <span class="token parameter">topic</span>     消息Topic
 * <span class="token keyword">@param</span> <span class="token parameter">queueId</span>   消息队列ID
 * <span class="token keyword">@param</span> <span class="token parameter">maxOffset</span> 消费队列的最大Offset
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyMessageArriving</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxOffset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> tagsCode<span class="token punctuation">,</span>
    <span class="token keyword">long</span> msgStoreTime<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filterBitMap<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据topic和queueId从容器中取出挂起的拉取请求列表</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ManyPullRequest</span> mpr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mpr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取挂起的拉取请求列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> requestList <span class="token operator">=</span> mpr<span class="token punctuation">.</span><span class="token function">cloneListAndClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 预先定义需要继续挂起的拉取请求列表</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> replayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PullRequest</span> request <span class="token operator">:</span> requestList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> newestOffset <span class="token operator">=</span> maxOffset<span class="token punctuation">;</span>
                <span class="token comment">// 从store中获取该队列消息的最大offset</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>newestOffset <span class="token operator">&lt;=</span> request<span class="token punctuation">.</span><span class="token function">getPullFromThisOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    newestOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 消费队列最大offset比消费者拉取请求的offset大，说明有新的消息可以被拉取</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>newestOffset <span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token function">getPullFromThisOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 消息过滤匹配</span>
                    <span class="token keyword">boolean</span> match <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMessageFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMatchedByConsumeQueue</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">,</span> msgStoreTime<span class="token punctuation">,</span> filterBitMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// match by bit map, need eval again when properties is not null.</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">&amp;&amp;</span> properties <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        match <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMessageFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMatchedByCommitLog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 会调用PullMessageProcessor#processRequest方法拉取消息，然后将结果返回给消费者</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullMessageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRequestWhenWakeup</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getClientChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                request<span class="token punctuation">.</span><span class="token function">getRequestCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;execute request when wakeup failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 查看是否超时，如果Consumer请求达到了超时时间，也触发响应，直接返回消息未找到</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSuspendTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullMessageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRequestWhenWakeup</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getClientChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            request<span class="token punctuation">.</span><span class="token function">getRequestCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;execute request when wakeup failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 当前不满足要求，重新放回Hold列表中</span>
                replayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>replayList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mpr<span class="token punctuation">.</span><span class="token function">addPullRequest</span><span class="token punctuation">(</span>replayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-defaultmessagestore-reputmessageservice" tabindex="-1"><a class="header-anchor" href="#_4-3-defaultmessagestore-reputmessageservice" aria-hidden="true">#</a> 4.3 <strong>DefaultMessageStore#ReputMessageService</strong></h3><h4 id="_4-3-1-doreput" tabindex="-1"><a class="header-anchor" href="#_4-3-1-doreput" aria-hidden="true">#</a> 4.3.1 doReput</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doDispatch</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通知消息消费长轮询线程，有新的消息落盘，立即唤醒挂起的消息拉取请求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">!=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener<span class="token punctuation">.</span><span class="token function">arriving</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            dispatchRequest<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getConsumeQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
            dispatchRequest<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            dispatchRequest<span class="token punctuation">.</span><span class="token function">getBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了 NotifyMessageArrivingListener#arriving() 方法，进而调用 PullRequestHoldService.notifyMessageArriving()。</p><p>为什么不直接调用 pullRequestHoldService.notifyMessageArriving() ？因为 doReput 所处的类所在的包是 store，存储包，而 PullRequestHoldService 在 broker 包中</p><p>所以需要一个桥梁，就是 NotifyMessageArrivingListener。它在 Broker 初始化 DefaultMessageStore 时被写入 DefaultMessageStore</p><h4 id="_4-3-2-notifymessagearrivinglistener-arriving" tabindex="-1"><a class="header-anchor" href="#_4-3-2-notifymessagearrivinglistener-arriving" aria-hidden="true">#</a> 4.3.2 NotifyMessageArrivingListener#arriving</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyMessageArrivingListener</span> <span class="token keyword">implements</span> <span class="token class-name">MessageArrivingListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">arriving</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">int</span> queueId<span class="token punctuation">,</span> <span class="token keyword">long</span> logicOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> tagsCode<span class="token punctuation">,</span>
        <span class="token keyword">long</span> msgStoreTime<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filterBitMap<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 提醒长轮询请求管理容器，新的消息到达，立刻拉取最新消息</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestHoldService<span class="token punctuation">.</span><span class="token function">notifyMessageArriving</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> logicOffset<span class="token punctuation">,</span> tagsCode<span class="token punctuation">,</span>
            msgStoreTime<span class="token punctuation">,</span> filterBitMap<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,45),q={href:"https://blog.csdn.net/prestigeding/article/details/79357818",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.6aiq.com/article/1563130068940",target:"_blank",rel:"noopener noreferrer"},R=n("hr",null,null,-1),M=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),P=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function C(S,x){const p=c("ExternalLinkIcon"),e=c("router-link");return u(),i("div",null,[n("p",null,[s("原文地址："),n("a",k,[s("http://hscarb.github.io/rocketmq/20220301-rocketmq-longpolling-pullrequestholdservice.html"),a(p)])]),d,n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#_1-概述"},{default:t(()=>[s("1. 概述")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-1-消息消费方式"},{default:t(()=>[s("1.1 消息消费方式")]),_:1})]),n("li",null,[a(e,{to:"#_1-2-push-消费模式"},{default:t(()=>[s("1.2 Push 消费模式")]),_:1})]),n("li",null,[a(e,{to:"#_1-3-如何进行轮询"},{default:t(()=>[s("1.3 如何进行轮询？")]),_:1})]),n("li",null,[a(e,{to:"#_1-4-长轮询和短轮询"},{default:t(()=>[s("1.4 长轮询和短轮询")]),_:1})])])]),n("li",null,[a(e,{to:"#_2-概要流程"},{default:t(()=>[s("2. 概要流程")]),_:1})]),n("li",null,[a(e,{to:"#_3-详细流程"},{default:t(()=>[s("3. 详细流程")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_3-1-涉及到的类"},{default:t(()=>[s("3.1 涉及到的类")]),_:1})]),n("li",null,[a(e,{to:"#_3-2-时序图"},{default:t(()=>[s("3.2 时序图")]),_:1})]),n("li",null,[a(e,{to:"#_3-3-每个类的具体逻辑"},{default:t(()=>[s("3.3 每个类的具体逻辑")]),_:1})])])]),n("li",null,[a(e,{to:"#_4-源码解析"},{default:t(()=>[s("4. 源码解析")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_4-1-pullmessageprocessor"},{default:t(()=>[s("4.1 PullMessageProcessor")]),_:1})]),n("li",null,[a(e,{to:"#_4-2-pullrequestholdservice"},{default:t(()=>[s("4.2 PullRequestHoldService")]),_:1})]),n("li",null,[a(e,{to:"#_4-3-defaultmessagestore-reputmessageservice"},{default:t(()=>[s("4.3 DefaultMessageStore#ReputMessageService")]),_:1})])])]),n("li",null,[a(e,{to:"#参考资料"},{default:t(()=>[s("参考资料")]),_:1})])])]),v,n("figure",null,[g,n("figcaption",null,[n("a",h,[s("https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_activity.drawio.svg"),a(p)])])]),b,n("figure",null,[f,n("figcaption",null,[n("a",y,[s("https://raw.githubusercontent.com/HScarb/drawio-diagrams/main/rocketmq/consume/long_polling_sequence.drawio.svg"),a(p)])])]),w,n("ul",null,[n("li",null,[n("a",q,[s("源码分析RocketMQ消息PULL-长轮询模式"),a(p)])]),n("li",null,[n("a",_,[s("消息中间件—RocketMQ 消息消费（二）（push 模式实现）"),a(p)])])]),R,M,P])}const O=l(r,[["render",C],["__file","20220301-rocketmq-longpolling-pullrequestholdservice.html.vue"]]);export{O as default};
