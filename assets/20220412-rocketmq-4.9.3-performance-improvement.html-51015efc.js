import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as u,a as n,b as a,d as s,w as o,e as p}from"./app-eaa093f0.js";const r={},d={href:"http://hscarb.github.io/rocketmq/20220412-rocketmq-4.9.3-performance-improvement.html",target:"_blank",rel:"noopener noreferrer"},k=n("h1",{id:"rocketmq-4-9-3-版本-性能优化-源码剖析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rocketmq-4-9-3-版本-性能优化-源码剖析","aria-hidden":"true"},"#"),a(" RocketMQ 4.9.3 版本 性能优化 源码剖析")],-1),m={class:"table-of-contents"},g=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),a(" 概述")],-1),h={href:"https://github.com/apache/rocketmq/releases/tag/rocketmq-all-4.9.1",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220131-rocketmq-4.9.1-performance-improvement.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/apache/rocketmq/releases/tag/rocketmq-all-4.9.3",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220320-rocketmq-scheduled-message-4.9.3-improve.md",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/areyouok",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/apache/rocketmq/issues/3585",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"We have some performance improvements based on 4.9.2",-1),w=p("<li>[Part A] eliminate reverse DNS lookup in MessageExt</li><li>[Part B] Improve header encode/decode performance</li><li>[Part B] Improve RocketMQSerializable performance with zero-copy</li><li>[Part C] cache result for parseChannelRemoteAddr()</li><li>[Part D] improve performance of createUniqID()</li><li>[Part E] eliminate duplicated getNamespace() call when where is no namespace</li><li>[Part F] eliminate regex match in topic/group name check</li><li>[Part G] [Work in progress] support send batch message with different topic/queue</li><li>[Part H] eliminate StringBuilder auto resize in PullRequestHoldService.buildKey() when topic length is greater than 14, this method called twice for each message.</li><li>[Part I] Avoid unnecessary StringBuffer resizing and String Formatting</li><li>[Part J] Use mmap buffer instead of FileChannel when writing consume queue and slave commit log, which greatly speed up consume tps.</li>",11),S={href:"https://github.com/apache/rocketmq/pull/3659",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"These commits almost eliminate bad performance methods in the cpu flame graph in producer side.",-1),z=n("p",null,"下面来逐条剖析",-1),C=n("h2",{id:"性能优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性能优化","aria-hidden":"true"},"#"),a(" 性能优化")],-1),R=n("p",null,"想要优化性能，首先需要找到 RocketMQ 的 Broker 在处理消息时性能损耗的点。使用火焰图可以清晰地看出当前耗时比较多的方法，从耗时较多的方法想办法入手优化，可以更大程度上提升性能。",-1),M=n("p",null,"具体的做法是开启 Broker 的火焰图采样，然后对其进行压测（同时生产和消费），然后观察其火焰图中方法的时间占用百分比，优化占用时间高且可以优化的地方。",-1),I=n("h3",{id:"a-移除-messageext-中的反向-dns-查找",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#a-移除-messageext-中的反向-dns-查找","aria-hidden":"true"},"#"),a(" A. 移除 MessageExt 中的反向 DNS 查找")],-1),B=n("blockquote",null,[n("p",null,"eliminate reverse DNS lookup in MessageExt")],-1),P={href:"https://github.com/apache/rocketmq/pull/3586",target:"_blank",rel:"noopener noreferrer"},T=p('<figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112120431.png" alt="image-20220411212011338" tabindex="0" loading="lazy"><figcaption>image-20220411212011338</figcaption></figure><p><code>inetAddress.getHostName()</code> 方法中会有反向 DNS 查找，可能耗时较多。于是优化成没有反向 DNS 查找的 <code>getHostString()</code> 方法</p><p>（<code>MessageExt#getBornHostNameString()</code> 方法在一个异常流程中被调用，优化此方法其实对性能没有什么提升）</p><h3 id="b-1-优化-rocketmq-通信协议-header-解码性能" tabindex="-1"><a class="header-anchor" href="#b-1-优化-rocketmq-通信协议-header-解码性能" aria-hidden="true">#</a> B.1. 优化 RocketMQ 通信协议 Header 解码性能</h3><blockquote><p>[Part B] Improve header encode/decode performance</p></blockquote>',5),H={href:"https://github.com/apache/rocketmq/pull/3588",target:"_blank",rel:"noopener noreferrer"},N=p(`<p>（该提交未合入 4.9.3 版本，将于 4.9.4 版本发布）</p><blockquote><p>PartB 有两个提交，其实作用不同，但是由于第二个提交依赖第一个所以只能放到一起</p></blockquote><h4 id="寻找优化点" tabindex="-1"><a class="header-anchor" href="#寻找优化点" aria-hidden="true">#</a> 寻找优化点</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204151449934.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>RocketMQ 的通信协议定义了各种指令（消息发送、拉取等等）。其中 Header 是协议头，数据是序列化后的json。json 的每个 key 字段都是固定的，不同的通讯请求字段不一样，但是其中有一个 <code>extField</code> 是完全自定义的，每个指令都不一样。所有指令当前共用了一个通用的解析方法 <code>RemotingCommand#decodeCommandCustomHeader</code>，基于反射来解析和设置消息 Header。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// SendMessageRequestHeaderV2</span>
<span class="token punctuation">{</span>  
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span><span class="token number">310</span><span class="token punctuation">,</span>
    <span class="token property">&quot;extFields&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>  
        <span class="token property">&quot;f&quot;</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;g&quot;</span><span class="token operator">:</span><span class="token string">&quot;1482158310125&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;d&quot;</span><span class="token operator">:</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;e&quot;</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;b&quot;</span><span class="token operator">:</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;c&quot;</span><span class="token operator">:</span><span class="token string">&quot;TBW102&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;a&quot;</span><span class="token operator">:</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;j&quot;</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;k&quot;</span><span class="token operator">:</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;h&quot;</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;i&quot;</span><span class="token operator">:</span><span class="token string">&quot;TAGS\\u0001TagA\\u0002WAIT\\u0001true\\u0002&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;flag&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;language&quot;</span><span class="token operator">:</span><span class="token string">&quot;JAVA&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;opaque&quot;</span><span class="token operator">:</span><span class="token number">206</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span><span class="token number">79</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个发送消息的请求 Header。由于各种指令对应的 Header 的 <code>extField</code> 不同，这个解析 Header 方法内部大量使用反射来设置属性，效率很低。而且这个解码方法应用广泛，在 RocketMQ 网络通信时都会用到（如发送消息、拉取消息），所以很有优化的必要。</p><h4 id="优化方案" tabindex="-1"><a class="header-anchor" href="#优化方案" aria-hidden="true">#</a> 优化方案</h4><p>优化的方案是尽量减少反射的使用，将常用的指令解码方法抽象出来。</p><p>这里引入了 <code>FastCodesHeader</code> 接口，只要实现这个接口，解码时就走具体的实现类而不用反射。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204151255671.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后为生产消息和消费消息的协议单独实现解码方法，内部可以不用反射而是直接进行字段赋值，这样虽然繁琐但是执行速度最快。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// SendMessageRequestHeaderV2.java</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">getAndCheckNotNull</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    str <span class="token operator">=</span> <span class="token function">getAndCheckNotNull</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        b <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    str <span class="token operator">=</span> <span class="token function">getAndCheckNotNull</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    str <span class="token operator">=</span> <span class="token function">getAndCheckNotNull</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        d <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="b-2-提高编解码性能" tabindex="-1"><a class="header-anchor" href="#b-2-提高编解码性能" aria-hidden="true">#</a> B.2. 提高编解码性能</h3><blockquote><p>[Part B] Improve RocketMQSerializable performance with zero-copy</p></blockquote>`,15),Q={href:"https://github.com/apache/rocketmq/pull/3588",target:"_blank",rel:"noopener noreferrer"},A=p(`<p>（该提交未合入 4.9.3 版本，将于 4.9.4 版本发布）</p><h4 id="改动背景" tabindex="-1"><a class="header-anchor" href="#改动背景" aria-hidden="true">#</a> 改动背景</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204151500752.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>RocketMQ 的协议 Header 序列化协议有俩</p><ul><li>RemotingSerializable：内部用 fastjson 进行序列化反序列化，为当前版本使用的序列化协议。</li><li>RocketMQSerializable：RocketMQ 实现的序列化协议，性能对比 fastjson 没有决定性优势，当前默认没有使用。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RemotingCommand.java</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SerializeType</span> serializeTypeConfigInThisServer <span class="token operator">=</span> <span class="token class-name">SerializeType</span><span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">headerEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeCustomHeaderToNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SerializeType</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ</span> <span class="token operator">==</span> serializeTypeCurrentRPC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">RocketMQSerializable</span><span class="token punctuation">.</span><span class="token function">rocketMQProtocolEncode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">RemotingSerializable</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优化方法" tabindex="-1"><a class="header-anchor" href="#优化方法" aria-hidden="true">#</a> 优化方法</h4><p>这个提交优化了 RocketMQSerializable 的性能，具体的方法是消除了 <code>RocketMQSerializable</code> 中多余的拷贝和对象创建，使用 Netty 的 <code>ByteBuf</code> 替换 Java 的 <code>ByteBuffer</code>，性能更高。</p><ul><li>对于写字符串：Netty 的 <code>ByteBuf</code> 有直接 put 字符串的方法 <code>writeCharSequence(CharSequence sequence, Charset charset)</code>，少一次内存拷贝，效率更高。</li><li>对于写 Byte：Netty 的 <code>writeByte(int value)</code> 传入一个 <code>int</code>，Java 传入一个字节 <code>put(byte b)</code>。当前 CPU 都是 32 位、64 位的，对 int 处理更高效。</li></ul><p>（该改动要在 Producer 和 Consumer 设置使用 RocketMQ 序列化协议才能生效）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token constant">SERIALIZE_TYPE_PROPERTY</span><span class="token punctuation">,</span> <span class="token class-name">SerializeType</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>提交说明上的 <code>zero-copy</code> 说的不是操作系统层面上的零拷贝，而是对于 <code>ByteBuf</code> 的零拷贝。</p><p>在 <code>NettyEncoder</code> 中用 <code>fastEncodeHeader</code> 替换原来的 <code>encodeHeader</code> 方法，直接传入 <code>ByteBuf</code> 进行操作，不需要用 Java 的 <code>ByteBuffer</code> 中转一下，少了一次拷贝。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204151600260.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fastEncodeHeader</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bodySize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> beginIndex <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// skip 8 bytes</span>
    out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> headerSize<span class="token punctuation">;</span>
    <span class="token comment">// 如果是 RocketMQ 序列化协议</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SerializeType</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ</span> <span class="token operator">==</span> serializeTypeCurrentRPC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>customHeader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>customHeader <span class="token keyword">instanceof</span> <span class="token class-name">FastCodesHeader</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeCustomHeaderToNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 调用 RocketMQ 序列化协议编码</span>
        headerSize <span class="token operator">=</span> <span class="token class-name">RocketMQSerializable</span><span class="token punctuation">.</span><span class="token function">rocketMQProtocolEncode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeCustomHeaderToNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> header <span class="token operator">=</span> <span class="token class-name">RemotingSerializable</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headerSize <span class="token operator">=</span> header<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    out<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">+</span> headerSize <span class="token operator">+</span> bodySize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    out<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>beginIndex <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">markProtocolType</span><span class="token punctuation">(</span>headerSize<span class="token punctuation">,</span> serializeTypeCurrentRPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rocketMQProtocolEncode</code> 中直接操作 <code>ByteBuf</code>，没有拷贝和新对象的创建。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rocketMQProtocolEncode</span><span class="token punctuation">(</span><span class="token class-name">RemotingCommand</span> cmd<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> beginIndex <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// int code(~32767)</span>
    out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// LanguageCode language</span>
    out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// int version(~32767)</span>
    out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// int opaque</span>
    out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// int flag</span>
    out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// String remark</span>
    <span class="token class-name">String</span> remark <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>remark <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>remark<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">writeStr</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> remark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> mapLenIndex <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">FastCodesHeader</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FastCodesHeader</span><span class="token punctuation">)</span> cmd<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">getExtFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">writeStr</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">writeStr</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    out<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>mapLenIndex<span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mapLenIndex <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginIndex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-缓存-parsechannelremoteaddr-方法的结果" tabindex="-1"><a class="header-anchor" href="#c-缓存-parsechannelremoteaddr-方法的结果" aria-hidden="true">#</a> C. 缓存 parseChannelRemoteAddr() 方法的结果</h3><blockquote><p>cache the result of parseChannelRemoteAddr()</p></blockquote>`,20),j={href:"https://github.com/apache/rocketmq/pull/3589",target:"_blank",rel:"noopener noreferrer"},E=p(`<h4 id="寻找优化点-1" tabindex="-1"><a class="header-anchor" href="#寻找优化点-1" aria-hidden="true">#</a> 寻找优化点</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112132137.png" alt="image-20220411213226971" tabindex="0" loading="lazy"><figcaption>image-20220411213226971</figcaption></figure><p>从火焰图中可以看到，<code>parseChannelRemoteAddr()</code> 这个方法占用了 5% 左右的总耗时。</p><p>这个方法被客户端在发送消息时调用，每次发送消息都会调用到这个方法，这也是他占用如此高 CPU 耗时百分比的原因。</p><p>那么这个方法做了什么？Netty 的 Channel 相当于一个 HTTP 连接，这个方法试图从 Channel 中获取远端的地址。</p><p>从火焰图上看出，该方法的 <code>toString</code>占用大量时间，其中主要包含了复杂的 String 拼接和处理方法。</p><p>那么想要优化这个方法最直接的方式就是——缓存其结果，避免多次调用。</p><h4 id="具体优化方法" tabindex="-1"><a class="header-anchor" href="#具体优化方法" aria-hidden="true">#</a> 具体优化方法</h4><p>Netty 提供了 <code>AttributeKey</code> 这个类，用于将 HTTP 连接的状态保存在 Channel 上。<code>AttributeKey</code> 相当于一个 Key-Value 对，用来存储状态。</p><p>要使用 <code>AttributeKey</code>，需要先初始化它的 Key，这样它就可以预先计算 Key 的 HashCode，查询该 Key 的时候效率就很高了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AttributeKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">REMOTE_ADDR_KEY</span> <span class="token operator">=</span> <span class="token class-name">AttributeKey</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;RemoteAddr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后优化该方法，第一次调用该方法时尝试从 Channel 上获取属性<code>RemoteAddr</code>，如果获取不到，则调用原来的逻辑去获取并且缓存到该 <code>AttributeKey</code> 中。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112151000.png" alt="image-20220411215152793" tabindex="0" loading="lazy"><figcaption>image-20220411215152793</figcaption></figure><p>修改过后在火焰图上已经几乎看不到该方法的用时。</p><h3 id="d-提升-createuniqid-的性能" tabindex="-1"><a class="header-anchor" href="#d-提升-createuniqid-的性能" aria-hidden="true">#</a> D. 提升 createUniqID() 的性能</h3><blockquote><p>Improve performance of createUniqID().</p></blockquote>`,16),D={href:"https://github.com/apache/rocketmq/pull/3590",target:"_blank",rel:"noopener noreferrer"},F=n("h4",{id:"寻找优化点-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#寻找优化点-2","aria-hidden":"true"},"#"),a(" 寻找优化点")],-1),K=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112227481.png",alt:"image-20220411222721408",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220411222721408")],-1),L=n("p",null,[n("code",null,"createUniqID()"),a(" 这个方法用于创建消息的全局唯一 ID，在客户端每次发送消息时会调用，为每个消息创建全局唯一 ID。")],-1),U={href:"https://blog.csdn.net/prestigeding/article/details/104739950",target:"_blank",rel:"noopener noreferrer"},V=p('<p>原本生成全局 ID 的方法将客户端 IP、进程 ID 等信息组合计算生成一个字符串。方法逻辑里面包含了大量字符串和 ByteBuffer 操作，所以耗时较高。</p><h4 id="优化方法-1" tabindex="-1"><a class="header-anchor" href="#优化方法-1" aria-hidden="true">#</a> 优化方法</h4><p>原先的方法实现中，每次调用都会创建 <code>StringBuilder</code> 、<code>ByteBuffer</code>、多个字符串……包含大量字符串操作，字符串操作的 CPU 耗时开销很大。</p><p>优化的方法主要通过字符数组运算替代字符串操作，<strong>避免多余的字符串对象产生</strong>；使用缓存，避免每次调用都重新计算和创建字符串对象。</p><ol><li><p>将原来的 <code>FIX_STRING</code> 字符串换成 <code>char[]</code> 字符数组，然后可以使用 <code>System.arraycopy</code> 替换原来的 <code>StringBuilder</code> 操作，避免多余对象产生。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112215086.png" alt="image-20220411221546009" tabindex="0" loading="lazy"><figcaption>image-20220411221546009</figcaption></figure></li><li><p>新增了 <code>void writeInt(char[] buffer, int pos, int value)</code> 和 <code>writeShort(char[] buffer, int pos, int value)</code> 方法，用于写入字符串数组。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112223581.png" alt="image-20220411222306938" tabindex="0" loading="lazy"><figcaption>image-20220411222306938</figcaption></figure><p>原先的 <code>byte2string</code> 方法创建了 <code>char[]</code> 对象和 <code>String</code> 对象，并且 String 对象构造时需要拷贝一遍 char[]。优化之后完全没有新对象产生。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112225688.png" alt="image-20220411222509675" tabindex="0" loading="lazy"><figcaption>image-20220411222509675</figcaption></figure></li></ol><h3 id="e-当没有用到-namespace-时-避免其被多次调用" tabindex="-1"><a class="header-anchor" href="#e-当没有用到-namespace-时-避免其被多次调用" aria-hidden="true">#</a> E. 当没有用到 namespace 时，避免其被多次调用</h3><blockquote><p>eliminate duplicated getNamespace() call when where is no namespace</p></blockquote>',7),W={href:"https://github.com/apache/rocketmq/pull/3591",target:"_blank",rel:"noopener noreferrer"},J=n("h4",{id:"寻找优化点-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#寻找优化点-3","aria-hidden":"true"},"#"),a(" 寻找优化点")],-1),O=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112236704.png",alt:"image-20220411223612434",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220411223612434")],-1),G=n("code",null,"getNamespace",-1),Y={href:"https://github.com/apache/rocketmq/issues/1120",target:"_blank",rel:"noopener noreferrer"},Z=p('<h4 id="优化方法-2" tabindex="-1"><a class="header-anchor" href="#优化方法-2" aria-hidden="true">#</a> 优化方法</h4><p>由于大部分情况下都用不到 Namespace，所以可以增加一个判断，如果不用 Namespace，就不走 Namespace 的一些验证和匹配逻辑。</p><p>具体的方法很简单，在 <code>ClientConfig</code> 设一个布尔值，用来表示 Namespace 是否初始化（是否使用），如果不使用，则跳过 <code>getNamespace()</code> 方法中后面的逻辑。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112244007.png" alt="image-20220411224424160" tabindex="0" loading="lazy"><figcaption>image-20220411224424160</figcaption></figure><h3 id="f-去除-topic-group-名称的正则匹配检查" tabindex="-1"><a class="header-anchor" href="#f-去除-topic-group-名称的正则匹配检查" aria-hidden="true">#</a> F. 去除 Topic/Group 名称的正则匹配检查</h3><blockquote><p>eliminate regex match in topic/group name check</p></blockquote>',6),X={href:"https://github.com/apache/rocketmq/pull/3594",target:"_blank",rel:"noopener noreferrer"},$=p(`<p>每次发消息时，无论是客户端还是服务端都需要检查一次这个消息的 Topic/Group 是否合法。检查通过正则表达式匹配来进行，匹配规则很简单，就是检查这个名称的字符是否在一些字符范围内 <code>String VALID_PATTERN_STR = &quot;^[%|a-zA-Z0-9_-]+$&quot;</code>。那么就可以把这个正则表达式匹配给优化掉，使用字符来匹配，将正则匹配简化成位图查表的过程，优化性能。</p><p>因为正则表达式匹配的字符编码都在 128 范围内，所以先创建一个位图，大小为 128。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">VALID_CHAR_BIT_MAP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后用位图匹配的方式替换正则匹配：检查的字符串的每一个字符是否在位图中。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112318938.png" alt="image-20220411231805018" tabindex="0" loading="lazy"><figcaption>image-20220411231805018</figcaption></figure><p>注意这里有一句</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将位图从堆复制到栈里（本地变量），提高下面循环的变量访问速度</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bitMap <span class="token operator">=</span> <span class="token constant">VALID_CHAR_BIT_MAP</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将静态变量位图复制到局部变量中，这样做的用意是将堆中的变量复制到栈上（因为局部变量都位于栈），提高下面循环中访问该位图的速度。</p><blockquote><ul><li>栈上存储的数据，很大机会会被虚拟机分配至物理机器的高速寄存器中存储。因而读写效率比从堆内存中读写高很多。</li><li>栈上分配的数据，释放时只需要通过移动栈顶指针，就可以随着栈帧出栈而自动销毁。而堆内存的释放由垃圾回收器负责完成，这一过程中整理和回收内存都需要消耗更多的时间。</li><li>栈操作可以被 JIT 优化，得到 CPU 指令的加速</li><li>栈没有碎片，寻址间距短，可以被 CPU 预测行为</li><li>栈无需释放内存和进行随机寻址</li></ul></blockquote><h3 id="g-支持发送-batch-消息时支持不同的-topic-queue" tabindex="-1"><a class="header-anchor" href="#g-支持发送-batch-消息时支持不同的-topic-queue" aria-hidden="true">#</a> G. 支持发送 batch 消息时支持不同的 Topic/Queue</h3><blockquote><p>support send batch message with different topic/queue</p></blockquote><p>该改动依赖 Part.B ，还未提交 PR</p><h3 id="h-避免无谓的-stringbuilder-扩容" tabindex="-1"><a class="header-anchor" href="#h-避免无谓的-stringbuilder-扩容" aria-hidden="true">#</a> H. 避免无谓的 StringBuilder 扩容</h3><blockquote><p>eliminate StringBuilder auto resize in PullRequestHoldService.buildKey() when topic length is greater than 14, this method called twice for each message</p></blockquote>`,14),nn={href:"https://github.com/apache/rocketmq/pull/3612",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"PullRequestHoldService#buildKey",-1),sn={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220301-rocketmq-longpolling-pullrequestholdservice.md",target:"_blank",rel:"noopener noreferrer"},en=p('<p>该方法中初始化一个 StringBuilder，默认长度为 16。StringBuilder 会将 Topic 和 QueueId 进行拼接，如果 Topic 名称过长，会造成 StringBuilder 的扩容，内部包含字符串的拷贝。在比较坏的情况下，扩容可能会发生多次。</p><p>那么既然已经直到 Topic 的长度，为什么不在 StringBuilder 初始化的时候就设定长度呢？这就是这个优化的改动。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112326976.png" alt="image-20220411232605135" tabindex="0" loading="lazy"><figcaption>image-20220411232605135</figcaption></figure><p>为什么这里是 <code>toipic.length() + 5</code>？因为一般 QueueId 不会超过 4 位数（一个 Topic 下面不会超过 9999 个队列），再加上一个分隔符，得到 5。</p><h3 id="i-避免无谓的-stringbuffer-扩容和-string-格式化" tabindex="-1"><a class="header-anchor" href="#i-避免无谓的-stringbuffer-扩容和-string-格式化" aria-hidden="true">#</a> I. 避免无谓的 StringBuffer 扩容和 String 格式化</h3><blockquote><p>Avoid unnecessary StringBuffer resizing and String Formatting</p></blockquote>',6),tn={href:"https://github.com/apache/rocketmq/pull/3619",target:"_blank",rel:"noopener noreferrer"},on=p('<h4 id="寻找优化点-4" tabindex="-1"><a class="header-anchor" href="#寻找优化点-4" aria-hidden="true">#</a> 寻找优化点</h4><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112336235.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从火焰图上看出，在 Broker 处理消息消费消息请求时，有许多 <code>String.format</code> 方法开销非常大，这些方法都是数据统计用的，用来拼接数据统计字典的 Key。可以想办法进行优化。</p><h4 id="优化方法-3" tabindex="-1"><a class="header-anchor" href="#优化方法-3" aria-hidden="true">#</a> 优化方法</h4><p>首先这里面有使用 StringBuffer 拼接的逻辑，也没有预先设定长度，存在扩容可能性。这里也没有多线程的情况，所以改成 StringBuilder，并且先计算好长度，避免扩容。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112345605.png" alt="image-20220411234502755" tabindex="0" loading="lazy"><figcaption>image-20220411234502755</figcaption></figure><h3 id="j-在写-consumequeue-和-从节点的-commitlog-时-使用-mmap-而不是-filechannel-提升消息消费-tps" tabindex="-1"><a class="header-anchor" href="#j-在写-consumequeue-和-从节点的-commitlog-时-使用-mmap-而不是-filechannel-提升消息消费-tps" aria-hidden="true">#</a> J. 在写 ConsumeQueue 和 从节点的 CommitLog 时，使用 MMap 而不是 FileChannel，提升消息消费 TPS</h3><blockquote><p>Use MappedByteBuffer instead of FileChannel to write consume queue and slave commitlog.</p></blockquote>',8),pn={href:"https://github.com/apache/rocketmq/pull/3657",target:"_blank",rel:"noopener noreferrer"},cn=p('<p>当消费的 Queue 数量特别多时（ 600 个），消费的 TPS 跟不上。即在 Queue 比较少时（72 个）消费速度可以跟上生产速度（20W），但是当 Queue 比较多时，消费速度只有 7W。</p><p>这个修改可以提升 Queue 特别多时的消费速度。</p><ul><li>72 个 Queue，消费速度从 7W 提升到 20W</li><li>600 个 Queue，消费速度从 7W 提升到 11W</li></ul><h4 id="寻找优化点-5" tabindex="-1"><a class="header-anchor" href="#寻找优化点-5" aria-hidden="true">#</a> 寻找优化点</h4><p>对 Broker 进行采样，发现创建消费索引的 reput 线程中有较大的耗时占比。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112355747.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从火焰图上可以看出，FileChannel 写数据的耗时占比比较大，有没有办法来优化一下？</p><h4 id="优化方法-4" tabindex="-1"><a class="header-anchor" href="#优化方法-4" aria-hidden="true">#</a> 优化方法</h4><p>我们知道 RocketMQ 写 CommitLog 是利用 MMap 来提升写入速度。但是在写 ConsumeQueue 时原先用的是 FileChannel 来写，于是这里改成也使用 MMap 来写入。</p><p>MappedFile.java</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112353096.png" alt="image-20220411235301250" tabindex="0" loading="lazy"><figcaption>image-20220411235301250</figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112358935.png" alt="image-20220411235759752" tabindex="0" loading="lazy"><figcaption>image-20220411235759752</figcaption></figure><p>具体修改如上两图所示，这样修改之后会影响两个地方：ConsumeQueue （消费索引）的写入和 Slave 节点 CommitLog 的写入</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112353383.png" alt="image-20220411235323472" tabindex="0" loading="lazy"><figcaption>image-20220411235323472</figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204112359113.png" alt="image-20220411235923338" tabindex="0" loading="lazy"><figcaption>image-20220411235923338</figcaption></figure><p>优化过后构建 ConsumeQueue 的时间占比大大减少</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204120000329.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="k-将-notifymessagearriving-的调用从-reputmessageservice-线程移到-pullrequestholdservice-线程" tabindex="-1"><a class="header-anchor" href="#k-将-notifymessagearriving-的调用从-reputmessageservice-线程移到-pullrequestholdservice-线程" aria-hidden="true">#</a> K. 将 notifyMessageArriving() 的调用从 ReputMessageService 线程移到 PullRequestHoldService 线程</h3><blockquote><p>move execution of notifyMessageArriving() from ReputMessageService thread to PullRequestHoldService thread</p><p>This commit speed up consume qps greatly, in our test up to 200,000 qps.</p></blockquote>',19),ln={href:"https://github.com/apache/rocketmq/pull/3659",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,"（该提交未合入 4.9.3 版本，当前仍未合入）",-1),rn=n("p",null,"这一部分其实也是为了优化 Part.J 中所说的消费速度所做的另一个改动。经过 Part.J 的修改，600 队列下的消费 TPS 能够达到 10w（生产 20w）。这个修改将消费 TPS 提升到 20w。",-1),dn=n("h4",{id:"寻找优化点-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#寻找优化点-6","aria-hidden":"true"},"#"),a(" 寻找优化点")],-1),kn=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204132323403.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),mn=n("p",null,[a("依然是通过查看火焰图的方法，查看到构造消费索引的方法中包含了 "),n("code",null,"notifyMessageArriving()"),a(" 这样一个方法，占用较大快的 CPU 时间。")],-1),gn={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220301-rocketmq-longpolling-pullrequestholdservice.md",target:"_blank",rel:"noopener noreferrer"},hn=p(`<p><code>notifyMessageArriving()</code> 的作用是在收到消息时提醒消费者，有新消息来了可以消费了，这样消费者会马上解除挂起状态开始消费消息。</p><p>这里的优化点就是想办法把这个方法逻辑从构建消费索引的逻辑中抽离出去。</p><h4 id="优化方案-1" tabindex="-1"><a class="header-anchor" href="#优化方案-1" aria-hidden="true">#</a> 优化方案 1</h4><p>首先想到的方法是将 <code>notifyMessageArriving()</code> 用一个单独的线程异步调用。于是在 <code>PullRequestHoldService</code> 里面采用生产-消费模式，启动了一个新的工作线程，将 notify 任务扔到一个队列中，让工作线程去处理，主线程直接返回。</p><p>工作线程每次从队列中 <code>poll</code> 一批任务，批量进行处理（1000 个）。经过这个改动，TPS 可以上升到 20w，但这带来了另一个问题——消息消费的延迟变高，达到 40+ms。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204151125382.png" alt="循环等待 0.1s 直到新消息来唤醒线程" tabindex="0" loading="lazy"><figcaption>循环等待 0.1s 直到新消息来唤醒线程</figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204151126339.png" alt="新消息来了创建异步任务并唤醒线程" tabindex="0" loading="lazy"><figcaption>新消息来了创建异步任务并唤醒线程</figcaption></figure><p>延迟变高的原因是—— RocketMQ 中 <code>ServiceThread</code> 工作线程的 <code>wakeup()</code> 和 <code>waitForRunning()</code> 是弱一致的，没有加锁而是采用 CAS 的方法，造成多线程情况下可能会等待直到超时。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasNotified<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        waitPoint<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// notify</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token keyword">long</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasNotified<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onWaitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//entry to wait</span>
    waitPoint<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        waitPoint<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>interval<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Interrupted&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        hasNotified<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onWaitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优化方案-2" tabindex="-1"><a class="header-anchor" href="#优化方案-2" aria-hidden="true">#</a> 优化方案 2</h4><p>这个方案是实际提交的优化方案，方案比较复杂。主要的思想就是将原先的每条消息都通知一次转化为批通知，减少通知次数，减少通知开销以提升性能。</p><p>同样用生产-消费模式，为了同时保证低延迟和高吞吐引入了 <code>PullNotifyQueue</code>。生产者和消费者仍然是操作通知任务</p><p>生产者线程将消息 <code>put</code> 到队列中，消费者调用 <code>drain</code> 方法消费。</p><p><code>drain</code> 方法中根据消费 TPS 做了判断</p><ul><li>如果 TPS 小于阈值，则拉到一个任务马上进行处理</li><li>如果 TPS 大于阈值（默认 10w），批量拉任务进行通知。一批任务只需要一次 notify（原先每个消息都会通知一次）。此时会略微增加消费时延，换来的是消费性能大幅提升。</li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文介绍了 RocketMQ 4.9.3 版本中的性能优化，主要优化了消息生产的速度和大量队列情况下消息消费的速度。</p><p>优化的步骤是根据 CPU 耗时进行采样形成火焰图，观察火焰图中时间占比较高的方法进行针对性优化。</p><p>总结一下用到的优化方法主要有</p>`,19),vn=n("li",null,"代码硬编码属性，用代码复杂度换性能",-1),bn=n("li",null,"对字符串和字节数组操作时减少创建和拷贝",-1),fn=n("li",null,"对于要多次计算的操作，缓存其结果",-1),yn=n("li",null,"锁内的操作尽量移动到锁外进行，提前进行计算或者用函数式接口懒加载",-1),_n=n("li",null,[a("使用更高效的容器，如 Netty "),n("code",null,"ByteBuf")],-1),qn=n("li",null,"使用容器时在初始化时指定长度，避免动态扩容",-1),wn=n("li",null,"主流程上的分支操作，使用异步而非同步",-1),Sn={href:"https://github.com/HScarb/java-io-benchmark",target:"_blank",rel:"noopener noreferrer"},xn=n("hr",null,null,-1),zn=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),Cn=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function Rn(Mn,In){const e=c("ExternalLinkIcon"),t=c("router-link");return l(),u("div",null,[n("p",null,[a("原文地址："),n("a",d,[a("http://hscarb.github.io/rocketmq/20220412-rocketmq-4.9.3-performance-improvement.html"),s(e)])]),k,n("nav",m,[n("ul",null,[n("li",null,[s(t,{to:"#概述"},{default:o(()=>[a("概述")]),_:1})]),n("li",null,[s(t,{to:"#性能优化"},{default:o(()=>[a("性能优化")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#a-移除-messageext-中的反向-dns-查找"},{default:o(()=>[a("A. 移除 MessageExt 中的反向 DNS 查找")]),_:1})]),n("li",null,[s(t,{to:"#b-1-优化-rocketmq-通信协议-header-解码性能"},{default:o(()=>[a("B.1. 优化 RocketMQ 通信协议 Header 解码性能")]),_:1})]),n("li",null,[s(t,{to:"#b-2-提高编解码性能"},{default:o(()=>[a("B.2. 提高编解码性能")]),_:1})]),n("li",null,[s(t,{to:"#c-缓存-parsechannelremoteaddr-方法的结果"},{default:o(()=>[a("C. 缓存 parseChannelRemoteAddr() 方法的结果")]),_:1})]),n("li",null,[s(t,{to:"#d-提升-createuniqid-的性能"},{default:o(()=>[a("D. 提升 createUniqID() 的性能")]),_:1})]),n("li",null,[s(t,{to:"#e-当没有用到-namespace-时-避免其被多次调用"},{default:o(()=>[a("E. 当没有用到 namespace 时，避免其被多次调用")]),_:1})]),n("li",null,[s(t,{to:"#f-去除-topic-group-名称的正则匹配检查"},{default:o(()=>[a("F. 去除 Topic/Group 名称的正则匹配检查")]),_:1})]),n("li",null,[s(t,{to:"#g-支持发送-batch-消息时支持不同的-topic-queue"},{default:o(()=>[a("G. 支持发送 batch 消息时支持不同的 Topic/Queue")]),_:1})]),n("li",null,[s(t,{to:"#h-避免无谓的-stringbuilder-扩容"},{default:o(()=>[a("H. 避免无谓的 StringBuilder 扩容")]),_:1})]),n("li",null,[s(t,{to:"#i-避免无谓的-stringbuffer-扩容和-string-格式化"},{default:o(()=>[a("I. 避免无谓的 StringBuffer 扩容和 String 格式化")]),_:1})]),n("li",null,[s(t,{to:"#j-在写-consumequeue-和-从节点的-commitlog-时-使用-mmap-而不是-filechannel-提升消息消费-tps"},{default:o(()=>[a("J. 在写 ConsumeQueue 和 从节点的 CommitLog 时，使用 MMap 而不是 FileChannel，提升消息消费 TPS")]),_:1})]),n("li",null,[s(t,{to:"#k-将-notifymessagearriving-的调用从-reputmessageservice-线程移到-pullrequestholdservice-线程"},{default:o(()=>[a("K. 将 notifyMessageArriving() 的调用从 ReputMessageService 线程移到 PullRequestHoldService 线程")]),_:1})])])]),n("li",null,[s(t,{to:"#小结"},{default:o(()=>[a("小结")]),_:1})])])]),g,n("p",null,[a("RocketMQ "),n("a",h,[a("4.9.1 版本"),s(e)]),a(" 针对 Broker 做了一系列性能优化，提升了消息发送的 TPS。"),n("a",v,[a("前文曾就 4.9.1 版本的优化做了深入分析"),s(e)]),a("。")]),n("p",null,[a("在 2022 年的 2 月底，RocketMQ "),n("a",b,[a("4.9.3 版本"),s(e)]),a(" 发布，其对 Broker 做了更进一步的性能优化，本次优化中也包含了生产和消费性能的提升。")]),n("p",null,[a("本文将会详解 4.9.3 版本中的性能优化点。在 4.9.3 版本中对延迟消息的优化已经在"),n("a",f,[a("另一篇文章"),s(e)]),a("中详解。")]),n("p",null,[a("本次和上次的性能优化主要由快手的"),n("a",y,[a("黄理"),s(e)]),a("老师提交，在 "),n("a",_,[a("ISSUE#3585"),s(e)]),a(" 中集中记录。先来看一下本次性能优化的所有优化项")]),n("blockquote",null,[q,n("ol",null,[w,n("li",null,[n("a",S,[a("Part K"),s(e)]),a(" move execution of notifyMessageArriving() from ReputMessageService thread to PullRequestHoldService thread.")])]),x]),z,C,R,M,I,B,n("p",null,[n("a",P,[a("#3586"),s(e)])]),T,n("p",null,[n("a",H,[a("#3588"),s(e)])]),N,n("p",null,[n("a",Q,[a("#3588"),s(e)])]),A,n("p",null,[n("a",j,[a("#3589"),s(e)])]),E,n("p",null,[n("a",D,[a("#3590"),s(e)])]),F,K,L,n("p",null,[a("RocketMQ 中包含两个消息 ID，分别为全局唯一 ID（UNIQUE_ID，消息发送时由客户端生产）和偏移量 ID（offsetMsgId，Broker 保存消息时由保存的偏移量生成），关于这两个 ID 的生成方法和使用可以看丁威老师的 "),n("a",U,[a("RocketMQ msgId与offsetMsgId释疑"),s(e)]),a("。")]),V,n("p",null,[n("a",W,[a("#3591"),s(e)])]),J,O,n("p",null,[a("客户端在发送消息时会调用 "),G,a(" 方法。Namespace 功能在 RocketMQ 中用的很少，它在 4.5.1 版本中被引进，具体可以看 "),n("a",Y,[a("#1120"),s(e)]),a("。它的作用是引入 Namespace 的概念，相同名称的 Topic 如果 Namespace 不同，那么可以表示不同的 Topic。")]),Z,n("p",null,[n("a",X,[a("#3594"),s(e)])]),$,n("p",null,[n("a",nn,[a("#3612"),s(e)])]),n("p",null,[a("在 Broker 处理消息消费逻辑时，如果长轮询被启用，"),an,a(" 每条消息会被调用 2 次。长轮询相关逻辑请移步"),n("a",sn,[a("之前的分析"),s(e)])]),en,n("p",null,[n("a",tn,[a("#3619"),s(e)])]),on,n("p",null,[n("a",pn,[a("#3657"),s(e)])]),cn,n("p",null,[n("a",ln,[a("#3659"),s(e)])]),un,rn,dn,kn,mn,n("p",null,[a("这个方法具体在 "),n("a",gn,[a("轮询机制"),s(e)]),a(" 这篇文章中有详细解释。消息消费的轮询机制指的是在 Push 消费时，如果没有新消息不会马上返回，而是挂起一段时间再重试查询。")]),hn,n("ul",null,[vn,bn,fn,yn,_n,qn,wn,n("li",null,[a("对于磁盘 I/O，MMap 和 FileChannel 的选择，需要实际压测，大部分情况下 MMap 速度更快且更稳定；每次写入较大数据长度时（4k 左右） FileChannel 速度才更快。具体压测结果请看 "),n("a",Sn,[a("java-io-benchmark"),s(e)])])]),xn,zn,Cn])}const Tn=i(r,[["render",Rn],["__file","20220412-rocketmq-4.9.3-performance-improvement.html.vue"]]);export{Tn as default};
