import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c,a as n,b as a,d as o,e as i}from"./app-eaa093f0.js";const u={},l={href:"http://hscarb.github.io/rocketmq/20221104-rocketmq-best-practice.html",target:"_blank",rel:"noopener noreferrer"},r=i(`<h1 id="rocketmq-最佳实践" tabindex="-1"><a class="header-anchor" href="#rocketmq-最佳实践" aria-hidden="true">#</a> RocketMQ 最佳实践</h1><h2 id="生产者" tabindex="-1"><a class="header-anchor" href="#生产者" aria-hidden="true">#</a> 生产者</h2><h3 id="发送重试" tabindex="-1"><a class="header-anchor" href="#发送重试" aria-hidden="true">#</a> 发送重试</h3><p>默认的消息发送超时时间为 3s，重试次数为 2 次。</p><p>在生产环境中建议将超时时间合重试次数设大一点，以便有足够的重试次数来应对发送失败的场景。</p><p>配置建议：</p><p>使用异步发送可以避免上游调用超时，可以将超时时间设为 10s，重试次数设为 16次。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        producer<span class="token punctuation">.</span><span class="token function">setSendMsgTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="延迟故障规避" tabindex="-1"><a class="header-anchor" href="#延迟故障规避" aria-hidden="true">#</a> 延迟故障规避</h3><p>RocketMQ 引入了延迟故障规避机制，当消息发送失败后，不再会发送到失败的 Broker，而是换一个 Broker 发送。该机制默认不开启。</p><p>该配置项为 <code>sendLatencyFaultEnable</code></p><ul><li>false：默认值，规避策略只在当前消息发送失败重试时失效。</li><li>true：一旦消息发送失败，在接下来的一段时间内所有的客户端都不会向对应的 Broker 发送消息。</li></ul><p>配置建议：</p><p>根据集群的负载来选择，一般无需开启。</p><ul><li>如果集群负载较高，不建议开启。因为某个 Broker 发送失败后的 5 分钟不会接收消息，会造成其他 Broker 负载过高。</li></ul><h3 id="同一进程中多个生产者发送消息到多个集群" tabindex="-1"><a class="header-anchor" href="#同一进程中多个生产者发送消息到多个集群" aria-hidden="true">#</a> 同一进程中多个生产者发送消息到多个集群</h3><p>RocketMQ 客户端 SDK 中的 <code>MQClientInstance</code> 表示对应到一个 RocketMQ 集群的客户端，在一个进程中可以有多个。<br> 在 <code>MQClientInstance</code> 中可以注册多个生产者和消费者，这些生产者和消费者的元数据配置是相同的。</p><p>为了实现多个生产者分别发送消息到多个集群，需要将生产者分别注册到多个 <code>MQClientInstance</code> 下，具体的方法为：为生产者设置不同的 <code>ClientId</code>。</p><p>配置建议：</p><p>将生产者的 <code>UnitName</code> 设置成集群名称，<code>ClientId</code> 生成时会拼接 <code>UnitName</code>，进而产生不同的 <code>ClientId</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQProducer</span> producer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;producer_group1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">setUnitName</span><span class="token punctuation">(</span><span class="token string">&quot;Cluster1&quot;</span><span class="token punctuation">)</span>
producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;1.1.1.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DefaultMQProducer</span> producer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;producer_group2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">setUnitName</span><span class="token punctuation">(</span><span class="token string">&quot;Cluster2&quot;</span><span class="token punctuation">)</span>
producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;2.2.2.2:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>附：生成 <code>ClientId</code> 的源码，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">buildMQClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInstanceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unitName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unitName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消费者" tabindex="-1"><a class="header-anchor" href="#消费者" aria-hidden="true">#</a> 消费者</h2><h3 id="消费幂等" tabindex="-1"><a class="header-anchor" href="#消费幂等" aria-hidden="true">#</a> 消费幂等</h3><p>RocketMQ无法避免消息重复（Exactly-Once），所以如果业务对消费重复非常敏感，有必要根据业务上的唯一Key对消息做幂等处理。<br> 因为不同的Message ID对应的消息内容可能相同，有可能出现冲突（重复）的情况，所以真正安全的幂等处理，不建议以Message ID作为处理依据。最好的方式是以业务唯一标识作为幂等处理的关键依据，而业务的唯一标识可以通过消息Key设置。</p><h3 id="消费组线程数" tabindex="-1"><a class="header-anchor" href="#消费组线程数" aria-hidden="true">#</a> 消费组线程数</h3><p>RocketMQ 消费者提供 <code>consumeThreadMin</code>、<code>consumeThreadMax</code> 两个参数来设置线程池中的线程个数，但是由于线程池内部为无界队列，所以 <code>consumeThreadMax</code> 参数无效。<br> 在实践中这两个值往往会设置成相同的。</p><h3 id="避免订阅关系不一致导致消息丢失" tabindex="-1"><a class="header-anchor" href="#避免订阅关系不一致导致消息丢失" aria-hidden="true">#</a> 避免订阅关系不一致导致消息丢失</h3><p>RocketMQ 的一个消费组可以订阅多个 Topic，订阅多个 Tag。到那时同一个消费组中的订阅关系必须一致。<br> 如果订阅关系不一致会造成消息丢失（部分消息未被消费）。</p><h3 id="避免-clientid-相同" tabindex="-1"><a class="header-anchor" href="#避免-clientid-相同" aria-hidden="true">#</a> 避免 ClientId 相同</h3><p>消费者的 ClientId 生成规则与生产者一样。如果一个消费组内两个消费者的 ClientId 相同，会出现有的队列重复消费、有的队列无法消费的情况。</p><p>配置建议：</p><p>由于 ClientId 生成时会拼接消费者的 <code>clientIP</code> 属性，同一 IP 下不同消费者的 <code>clientIP</code> 相同会导致 ClientId 相同，所以建议手动设置 <code>clientIP</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">setClientIP</span><span class="token punctuation">(</span>&#39;<span class="token number">192.168</span><span class="token number">.3</span><span class="token number">.10</span>&#39; <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="消费重试次数" tabindex="-1"><a class="header-anchor" href="#消费重试次数" aria-hidden="true">#</a> 消费重试次数</h3><p>普通消息默认重试 16 次，重试实践按照延迟等级每次重试会递增，到达 16 次后，之后每次重试按照最大延迟等级对应的时间间隔。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 重试的时间从 10s 开始</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> messageDelayLevel <span class="token operator">=</span> <span class="token string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>顺序消费模式下重试次数配置无效，如果一条消息消费不成功会一直重试，重试次数为 <code>Integer.MAX_VALUE</code>。重试时间间隔可以用 <code>suspendCurrentQueueTimeMillis</code> 设置，默认为 1s。</p><h2 id="broker" tabindex="-1"><a class="header-anchor" href="#broker" aria-hidden="true">#</a> Broker</h2><hr><p>欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,43);function d(k,m){const s=t("ExternalLinkIcon");return p(),c("div",null,[n("p",null,[a("原文地址："),n("a",l,[a("http://hscarb.github.io/rocketmq/20221104-rocketmq-best-practice.html"),o(s)])]),r])}const b=e(u,[["render",d],["__file","20221104-rocketmq-best-practice.html.vue"]]);export{b as default};
