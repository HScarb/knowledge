import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as s,d as a,w as t,e as r}from"./app-eaa093f0.js";const u={},k={href:"http://hscarb.github.io/java/20220427-jmh.html",target:"_blank",rel:"noopener noreferrer"},m=n("h1",{id:"java-性能优化神器-jmh-从入门到精通",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-性能优化神器-jmh-从入门到精通","aria-hidden":"true"},"#"),s(" Java 性能优化神器 JMH 从入门到精通")],-1),d={class:"table-of-contents"},v=r(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>你在写 Java 高性能程序时有没有这样的场景：</p><ul><li>纠结使用 ArrayList 还是 LinkedList 哪个更快？</li><li>进行运算时，怎么提高效率？使用 int 还是 long？</li><li>读写文件时，使用 FileChannel 还是 MappedByteBuffer 更快？</li><li>使用锁还是 synchronized？</li><li>使用 AtomicLong 还是 LongAdder 更快？</li><li>……</li></ul><p>特别是在写性能要求高的程序时，这些问题会更频繁地出现。有时上网查询可以找到答案，但是当遇到更复杂、独特的场景时可能就需要自己进行性能压测。</p><p>自己写一个测试方法或者 <code>Main</code> 函数固然也可以，但是有没有更【专业】的工具？我们的神器 JMH 闪亮登场。</p><p>JMH 是 Java Microbenchmark Harness 的缩写，官方介绍如下：</p><blockquote><p>JMH 是 OpenJDK 提供的 JVM 基准测试工具，用于测试 Java 和其他跑在 JVM 上语言程序的性能。</p></blockquote><h2 id="jmh-的意义" tabindex="-1"><a class="header-anchor" href="#jmh-的意义" aria-hidden="true">#</a> JMH 的意义</h2><p>当对一个程序的一小部分代码或者一个函数进行基准测试时，JVM 或底层硬件可能对这部分测试代码进行许多优化，但当这部分代码作为较大程序的一部分时可能无法应用这些优化。</p><p>自己实现基准测试代码时，编写的测试代码可能有缺陷。比如缺乏预热的步骤。</p><p>使用 JMH，你可以使用它提供的一系列注解轻松地编写基准测试代码。并且它通常会阻止 JVM 和硬件在基准测试时执行优化。此外它还能提供简单明了的基准测试结果输出，使用一些工具可以对该结果进行可视化。</p><h3 id="jmh-如何工作" tabindex="-1"><a class="header-anchor" href="#jmh-如何工作" aria-hidden="true">#</a> JMH 如何工作？</h3><p>应用 JMH 注解的代码在编译之后会被编译成多个执行类以进行基准测试结果输出。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778057.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JMH 按照如上所示的流程进行基准测试。</p><ul><li>Fork 为一个新的进程，如果设置用多个进程执行，则各个线程串行执行。</li><li>每个线程中先执行预热（Warmup），然后再执行测试（Measurement）。在预热和测试执行过程中，每一轮测试称为一个迭代（Iteration），一个迭代也是测试数据统计的最小单元。在 <code>@Warmup</code> 和 <code>@Measurement</code> 注解中可以指定执行的迭代次数和每次迭代的执行时常。</li><li>每个迭代中会根据基准测试的模式（<code>@BenchmarkMode</code>）来调用（Invoke）测试方法，可能一次也可能多次，并计算该测试模式所关注的指标。</li><li>可以看到在每次测试前后、每次迭代前后、甚至每次调用方法前后都可以用 <code>@Setup</code> 和 <code>@TearDown</code> 注解来设置启动和停止的方法。</li></ul><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件" aria-hidden="true">#</a> 安装插件</h3><p>使用 JMH 前最好先安装一下配套的 idea 插件。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204182054455.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>它可以帮助解析 JMH 的注解。</p><h3 id="使用-maven-archtype" tabindex="-1"><a class="header-anchor" href="#使用-maven-archtype" aria-hidden="true">#</a> 使用 Maven archtype</h3><p>官方推荐的使用方法是使用 Maven archtype 构建项目，这样可以自动生成基准测试代码，打包之后也自带可以运行基准测试代码的 <code>benchmark.jar</code> 包。由于可能需要在 Linux 上测试，所以这个 jar 包十分有用。</p><p>运行如下代码使用 maven archtype 构建项目。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn archetype:generate <span class="token punctuation">\\</span>
  <span class="token parameter variable">-DinteractiveMode</span><span class="token operator">=</span>false <span class="token punctuation">\\</span>
  <span class="token parameter variable">-DarchetypeGroupId</span><span class="token operator">=</span>org.openjdk.jmh <span class="token punctuation">\\</span>
  <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>jmh-java-benchmark-archetype <span class="token punctuation">\\</span>
  <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>org.sample <span class="token punctuation">\\</span>
  <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>test <span class="token punctuation">\\</span>
  <span class="token parameter variable">-Dversion</span><span class="token operator">=</span><span class="token number">1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 idea，可以使用 idea 添加 Archtype 后创建。</p><p><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204252257190.png" alt="" loading="lazy"><br><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204252258064.png" alt="" loading="lazy"></p><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><p>JMH 在 JDK9 之后的版本已经原生支持。在 JDK9 之前的版本需要引入依赖。当前最新的版本为 1.35。如果已经使用 Archtype 方式构建项目，那么无需额外引入依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写测试代码" tabindex="-1"><a class="header-anchor" href="#编写测试代码" aria-hidden="true">#</a> 编写测试代码</h3><p>使用 Archtype 构建的项目已经写好了 <code>MyBenchmark</code> 类，可以直接运行空测试函数。</p><p>我们编写代码来测试一下 <code>ArrayList</code> 和 <code>LinkedList</code> 添加数据的性能。假设需要测试分别向两种列表中添加 1000w 数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用一个进程来运行测试，如果大于 1，多进程串行执行</span>
<span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 类变量的作用域，这里指 linkedList 和 arrayList 在同一个测试类中共享</span>
<span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
<span class="token comment">// 预热执行 5 次，每次 1 秒</span>
<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 测试执行 5 次，每次 1 秒次</span>
<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 测试模式为计算测试方法的吞吐量（每秒执行次数）</span>
<span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>Throughput</span><span class="token punctuation">)</span>
<span class="token comment">// 用例计时和输出的时间单位</span>
<span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmark</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> linkedList<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">;</span>

    <span class="token comment">// 初始化方法，在每次调用测试方法之前执行，类似 JUnit</span>
    <span class="token comment">// Level 表示该方法运行的时机，Iteration 表示每次测试都会执行（包括预热）</span>
    <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Iteration</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 测试方法，类似 JUnit @Test。标注了 @Benchmark 的方法会被进行基准测试</span>
    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试" aria-hidden="true">#</a> 运行测试</h3><p>在 idea 安装插件的情况下可以直接运行测试。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204252326481.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>另一种方式，可以通过 Archtype 的 benchmark.jar 来运行测试。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean verify
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> target/benchmarks.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看结果" tabindex="-1"><a class="header-anchor" href="#查看结果" aria-hidden="true">#</a> 查看结果</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token constant">JMH</span> version<span class="token operator">:</span> <span class="token number">1.35</span>
# <span class="token class-name">Blackhole</span> mode<span class="token operator">:</span> full <span class="token operator">+</span> dont<span class="token operator">-</span>inline hint <span class="token punctuation">(</span>auto<span class="token operator">-</span>detected<span class="token punctuation">,</span> use <span class="token operator">-</span><span class="token class-name">Djmh</span><span class="token punctuation">.</span>blackhole<span class="token punctuation">.</span>autoDetect<span class="token operator">=</span><span class="token boolean">false</span> <span class="token keyword">to</span> <span class="token namespace">disable</span><span class="token punctuation">)</span>
# <span class="token class-name">Warmup</span><span class="token operator">:</span> <span class="token number">5</span> iterations<span class="token punctuation">,</span> <span class="token number">1</span> s each                      <span class="token comment">// 预热 5 次，每次 1 秒</span>
# <span class="token class-name">Measurement</span><span class="token operator">:</span> <span class="token number">5</span> iterations<span class="token punctuation">,</span> <span class="token number">1</span> s each                 <span class="token comment">// 测试 5 次，每次 1 秒</span>
# <span class="token class-name">Timeout</span><span class="token operator">:</span> <span class="token number">10</span> min per iteration                       <span class="token comment">// 每次执行测试方法的超时时间为 10 分钟</span>
# <span class="token class-name">Threads</span><span class="token operator">:</span> <span class="token number">1</span> thread<span class="token punctuation">,</span> will synchronize iterations      <span class="token comment">// 单线程执行</span>
# <span class="token class-name">Benchmark</span> mode<span class="token operator">:</span> <span class="token class-name">Throughput</span><span class="token punctuation">,</span> ops<span class="token operator">/</span>time                <span class="token comment">// 测试模式：吞吐量，统计每秒操作数</span>
# <span class="token class-name">Benchmark</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>MyBenchmark</span><span class="token punctuation">.</span>testArrayList    <span class="token comment">// 本次测试的测试方法</span>

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">0.00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">20</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">1</span> of <span class="token number">1</span>                                        <span class="token comment">// 第一个进程执行测试</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">141579.663</span> ops<span class="token operator">/</span>ms             <span class="token comment">// 每次预热耗时</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">13048.155</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">126507.754</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">127890.530</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">152379.871</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">149509.372</span> ops<span class="token operator">/</span>ms                      <span class="token comment">// 每次测试执行耗时</span>
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">147695.938</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">100544.988</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">169084.449</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">177057.200</span> ops<span class="token operator">/</span>ms

<span class="token class-name">Result</span> <span class="token string">&quot;org.example.MyBenchmark.testArrayList&quot;</span><span class="token operator">:</span>
  <span class="token number">148778.389</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token number">114555.755</span> ops<span class="token operator">/</span>ms <span class="token punctuation">[</span><span class="token class-name">Average</span><span class="token punctuation">]</span>
  <span class="token punctuation">(</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100544.988</span><span class="token punctuation">,</span> <span class="token number">148778.389</span><span class="token punctuation">,</span> <span class="token number">177057.200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stdev <span class="token operator">=</span> <span class="token number">29749.766</span>
  <span class="token constant">CI</span> <span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">34222.635</span><span class="token punctuation">,</span> <span class="token number">263334.144</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span>

# <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
# <span class="token class-name">Benchmark</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>MyBenchmark</span><span class="token punctuation">.</span>testLinkedList

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">50.00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">13</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">1</span> of <span class="token number">1</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">3997.950</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">9656.378</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">9767.753</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">8815.672</span> ops<span class="token operator">/</span>ms
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">47451.551</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">21131.024</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">9101.728</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">28116.765</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">8994.693</span> ops<span class="token operator">/</span>ms
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">28290.489</span> ops<span class="token operator">/</span>ms


<span class="token class-name">Result</span> <span class="token string">&quot;org.example.MyBenchmark.testLinkedList&quot;</span><span class="token operator">:</span>
  <span class="token number">19126.940</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token number">37132.831</span> ops<span class="token operator">/</span>ms <span class="token punctuation">[</span><span class="token class-name">Average</span><span class="token punctuation">]</span>
  <span class="token punctuation">(</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">8994.693</span><span class="token punctuation">,</span> <span class="token number">19126.940</span><span class="token punctuation">,</span> <span class="token number">28290.489</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stdev <span class="token operator">=</span> <span class="token number">9643.278</span>
  <span class="token constant">CI</span> <span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>≈ <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">56259.771</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span>

# <span class="token class-name">Run</span> <span class="token class-name"><span class="token namespace">complete<span class="token punctuation">.</span></span> Total</span> time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">40</span>                 <span class="token comment">// 所有测试执行完毕，耗时</span>

<span class="token comment">// 测试结果，Mode 表示测试模式，thrpt 表示模式为 Throughput</span>
<span class="token comment">// Score 表示平均耗时，Error 表示误差</span>
<span class="token class-name">Benchmark</span>                    <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>       <span class="token class-name">Score</span>        <span class="token class-name">Error</span>   <span class="token class-name">Units</span>
<span class="token class-name">MyBenchmark</span><span class="token punctuation">.</span>testArrayList   thrpt    <span class="token number">5</span>  <span class="token number">148778.389</span> ± <span class="token number">114555.755</span>  ops<span class="token operator">/</span>ms
<span class="token class-name">MyBenchmark</span><span class="token punctuation">.</span>testLinkedList  thrpt    <span class="token number">5</span>   <span class="token number">19126.940</span> ±  <span class="token number">37132.831</span>  ops<span class="token operator">/</span>ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释详解" tabindex="-1"><a class="header-anchor" href="#注释详解" aria-hidden="true">#</a> 注释详解</h2><p>这个图片可以帮助快速查阅 JMH 各个注解的含义和用法。<br><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202204270021841.png" alt="" loading="lazy"></p>`,44),b={href:"https://juejin.cn/post/7031008727645831176#heading-1",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"高级用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#高级用法","aria-hidden":"true"},"#"),s(" 高级用法")],-1),g={href:"https://juejin.cn/post/6844904147674726407",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"将结果图形化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#将结果图形化","aria-hidden":"true"},"#"),s(" 将结果图形化")],-1),_=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),y={href:"https://www.cnkirito.moe/java-jmh",target:"_blank",rel:"noopener noreferrer"},j={href:"https://blog.csdn.net/yangbindxj/article/details/122899328",target:"_blank",rel:"noopener noreferrer"},M={href:"https://juejin.cn/post/7031008727645831176",target:"_blank",rel:"noopener noreferrer"},J={href:"https://juejin.cn/post/7069967034636845092",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/6844904147674726407",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.cnblogs.com/wupeixuan/p/13091381.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://jenkov.com/tutorials/java-performance/jmh.html",target:"_blank",rel:"noopener noreferrer"},H={href:"http://leogomes.github.io/assets/JMH_cheatsheet.pdf",target:"_blank",rel:"noopener noreferrer"},w={href:"https://medium.com/javarevisited/understanding-java-microbenchmark-harness-or-jmh-tool-5b9b90ccbe8d",target:"_blank",rel:"noopener noreferrer"},B=n("hr",null,null,-1),A=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),z=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function T(W,D){const p=o("ExternalLinkIcon"),e=o("router-link");return l(),i("div",null,[n("p",null,[s("原文地址："),n("a",k,[s("http://hscarb.github.io/java/20220427-jmh.html"),a(p)])]),m,n("nav",d,[n("ul",null,[n("li",null,[a(e,{to:"#背景"},{default:t(()=>[s("背景")]),_:1})]),n("li",null,[a(e,{to:"#jmh-的意义"},{default:t(()=>[s("JMH 的意义")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#jmh-如何工作"},{default:t(()=>[s("JMH 如何工作？")]),_:1})])])]),n("li",null,[a(e,{to:"#快速开始"},{default:t(()=>[s("快速开始")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#安装插件"},{default:t(()=>[s("安装插件")]),_:1})]),n("li",null,[a(e,{to:"#使用-maven-archtype"},{default:t(()=>[s("使用 Maven archtype")]),_:1})]),n("li",null,[a(e,{to:"#引入依赖"},{default:t(()=>[s("引入依赖")]),_:1})]),n("li",null,[a(e,{to:"#编写测试代码"},{default:t(()=>[s("编写测试代码")]),_:1})]),n("li",null,[a(e,{to:"#运行测试"},{default:t(()=>[s("运行测试")]),_:1})]),n("li",null,[a(e,{to:"#查看结果"},{default:t(()=>[s("查看结果")]),_:1})])])]),n("li",null,[a(e,{to:"#注释详解"},{default:t(()=>[s("注释详解")]),_:1})]),n("li",null,[a(e,{to:"#高级用法"},{default:t(()=>[s("高级用法")]),_:1})]),n("li",null,[a(e,{to:"#将结果图形化"},{default:t(()=>[s("将结果图形化")]),_:1})]),n("li",null,[a(e,{to:"#参考资料"},{default:t(()=>[s("参考资料")]),_:1})])])]),v,n("p",null,[s("具体的解析可以看 "),n("a",b,[s("关键注解"),a(p)])]),h,n("p",null,[s("详见 "),n("a",g,[s("基准测试神器JMH —— 详解36个官方例子"),a(p)])]),f,_,n("ul",null,[n("li",null,[n("a",y,[s("JAVA 拾遗 — JMH 与 8 个测试陷阱"),a(p)])]),n("li",null,[n("a",j,[s("JMH - Java 微基准测试工具（自助性能测试）@Benchmark"),a(p)])]),n("li",null,[n("a",M,[s("顶级Java才懂的，基准测试JMH！"),a(p)])]),n("li",null,[n("a",J,[s("JUC学习笔记 - 08JMH入门"),a(p)])]),n("li",null,[n("a",x,[s("基准测试神器JMH —— 详解36个官方例子"),a(p)])]),n("li",null,[n("a",I,[s("性能调优必备利器之 JMH"),a(p)])]),n("li",null,[n("a",L,[s("JMH - Java Microbenchmark Harness"),a(p)])]),n("li",null,[n("a",H,[s("JMH Cheatsheet"),a(p)])]),n("li",null,[n("a",w,[s("Understanding Java Microbenchmark Harness or JMH Tool"),a(p)])])]),B,A,z])}const V=c(u,[["render",T],["__file","20220427-jmh.html.vue"]]);export{V as default};
