import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as a,d as s,w as t,e as r}from"./app-eaa093f0.js";const u={},k={href:"http://hscarb.github.io/rabbitmq/20220131-rabbitmq-flow-control.html",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"rabbitmq-进程内流控-flow-control-源码解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rabbitmq-进程内流控-flow-control-源码解析","aria-hidden":"true"},"#"),a(" RabbitMQ 进程内流控（Flow Control） 源码解析")],-1),b={class:"table-of-contents"},v=r(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><h3 id="_1-1-为什么要流控" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么要流控" aria-hidden="true">#</a> 1.1 为什么要流控？</h3><p>流控主要是为了防止生产者生产消息速度过快，超过 Broker 可以处理的速度。这时需要暂时限制生产者的生产速度，让 Broker 的处理能够跟上生产速度。</p><p>Erlang进程之间不共享内存，每个进程都有自己的进程邮箱，进程间只通过消息来通信。Erlang没有对进程邮箱的大小进行限制，所以当有大量消息持续发往某个进程时，会导致该进程邮箱过大，最终内存溢出并崩溃。如果没有流控，可能会导致内部进程邮箱的大小很快达到内存阈值。</p><h3 id="_1-2-rabbitmq-的多种流控机制" tabindex="-1"><a class="header-anchor" href="#_1-2-rabbitmq-的多种流控机制" aria-hidden="true">#</a> 1.2 RabbitMQ 的多种流控机制</h3><h4 id="_1-2-1-全局流控-内存高水位、磁盘低水位" tabindex="-1"><a class="header-anchor" href="#_1-2-1-全局流控-内存高水位、磁盘低水位" aria-hidden="true">#</a> 1.2.1 全局流控（内存高水位、磁盘低水位）</h4><p>RabbitMQ 可以对<strong>内存</strong>和<strong>磁盘</strong>使用量设置阈值，当达到阈值后，生产者将被完全阻塞（处于block状态） ，直到对应项恢复正常。</p><p>内存和磁盘的流控相当于全局流控，流控时发送消息被完全阻塞，通常会阻塞较长时间（几分钟以上）才恢复。</p><p>全局流控时，从Web UI可以观察到 Connection 处于<code>blocked</code>状态。</p><p>在 rabbitmq-java-client 中，可以用给 Connection 添加 blockedListener 的方式监听阻塞和阻塞解除的事件，用以在客户端应对可能的阻塞情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>connection<span class="token punctuation">.</span><span class="token function">addBlockedListener</span><span class="token punctuation">(</span>
    reason <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">unblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-进程内流控" tabindex="-1"><a class="header-anchor" href="#_1-2-2-进程内流控" aria-hidden="true">#</a> 1.2.2 进程内流控</h4><p>进程内流控是<strong>针对 Erlang 进程</strong>的流控，与全局流控不是一个概念。又可称作 Per-Connection Flow Control。</p><p>在 RabbitMQ Broker 中使用多种进程来处理消息，进程的处理顺序如下。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152216189.png" alt="A simplified depiction of message flows" tabindex="0" loading="lazy"><figcaption><em>A simplified depiction of message flows</em></figcaption></figure><p><em>A simplified depiction of message flows</em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>reader <span class="token operator">-&gt;</span> channel <span class="token operator">-&gt;</span> queue process <span class="token operator">-&gt;</span> message store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进程内流控指的是这4种进程之间的流控。</p><p>进程内流控不会影响到消费端。</p><p>某进程处于流控状态时，从 Web UI 可以观察到该进程的状态为黄色<code>flow</code>，此时该进程会暂时阻塞消息的生产。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152216190.png" alt="A queue in flow state" tabindex="0" loading="lazy"><figcaption>A queue in flow state</figcaption></figure><p>A queue in flow state</p><p>进程内流控的阻塞时间通常很短，在1秒之内。但是也有长至几分钟的。</p><p>进程内流控是阻塞在 Broker 端的 socket 接收方法中，client 端无法监听和做出处理。</p><p>从 RabbitMQ 3.5.5 版本开始，引入了一套基于信用证的流控实现。</p><p>本文主要讨论基于信用证的进程内流控实现。</p><h4 id="_1-2-3-发送方确认" tabindex="-1"><a class="header-anchor" href="#_1-2-3-发送方确认" aria-hidden="true">#</a> 1.2.3 发送方确认</h4><p>这其实并不属于流控机制，但是通过生产者确认的方式可以让发送消息不丢失，并且控制发送消息的速度。</p><p>未开启发送方确认时，消息可能未达到服务器就发送完毕。</p><p>发送方确认开启后，消息在投递到匹配的队列后会给发送方返回一个确认请求，至此发送消息的动作才执行完毕。</p><h4 id="_1-2-4-消费者预取" tabindex="-1"><a class="header-anchor" href="#_1-2-4-消费者预取" aria-hidden="true">#</a> 1.2.4 消费者预取</h4><p>通过<code>Channel#basicQos(int prefetchCount)</code>方法设置消费者允许存在的的最大未Ack消息数量，可以达到预取一批消息到消费者进行消费的目的。</p><h2 id="_2-概要流程" tabindex="-1"><a class="header-anchor" href="#_2-概要流程" aria-hidden="true">#</a> 2. 概要流程</h2><p>从 RabbitMQ 3.5.5 版本开始，引入了一套基于信用证的流控实现。</p><h3 id="_2-1-信用证配置" tabindex="-1"><a class="header-anchor" href="#_2-1-信用证配置" aria-hidden="true">#</a> 2.1 信用证配置</h3><p>信用证流控的两个参数可以通过查询环境变量的方式找到</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl <span class="token builtin class-name">eval</span> <span class="token string">&#39;application:get_all_env(rabbit).&#39;</span>
<span class="token comment"># ...</span>
<span class="token punctuation">{</span>credit_flow_default_credit,<span class="token punctuation">{</span><span class="token number">400,200</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment"># {InitialCredit, MoreCreditAfter}</span>
<span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中400表示每个进程初始的信用值，200表示下游进程处理200个消息后会一次性给上游进程加200信用值。</p><p>这两个参数在老一点的版本中为<code>{200, 50}</code>。</p><h3 id="_2-2-基于信用证的流控" tabindex="-1"><a class="header-anchor" href="#_2-2-基于信用证的流控" aria-hidden="true">#</a> 2.2 基于信用证的流控</h3><p>Erlang 进程与操作系统的进程不同，是一种轻量级进程。</p><p>简单来说，RabbitMQ中有四种进程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>reader <span class="token operator">-&gt;</span> channel <span class="token operator">-&gt;</span> queue process <span class="token operator">-&gt;</span> message store
<span class="token number">400</span>       <span class="token number">400</span>        <span class="token number">400</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在初始化时，会为前三种进程分配信用值，分配的值为<code>InitialCredit</code>，默认400。</p><p>当进程处理一条消息并且发给下游进程时，它自己的信用值会减一。</p><p>下游进程处理完一条消息时，会给上有进程发一个Ack消息。但是此时并不会直接让上游进程的信用值加一，而是等到处理完<code>MoreCreditAfter</code>条消息（默认200）时，才将上游进程的信用值加200。</p><p>当进程的信用值将为1时，就会阻塞上游进程向它发送消息。</p><h2 id="_3-详细流程" tabindex="-1"><a class="header-anchor" href="#_3-详细流程" aria-hidden="true">#</a> 3. 详细流程</h2><h3 id="_3-1-流控详细流程" tabindex="-1"><a class="header-anchor" href="#_3-1-流控详细流程" aria-hidden="true">#</a> 3.1 流控详细流程</h3><p>下图每个橙色组件都是一个 Erlang 进程。</p><p>每个RabbitMQ broker在内部都是通过actor模式实现的，不同组件之间通过消息传递(有时是本地的)进行通信。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152216191.png" alt="A simplified depiction of message flows" tabindex="0" loading="lazy"><figcaption><em><strong>A simplified depiction of message flows</strong></em></figcaption></figure><p><em><strong>A simplified depiction of message flows</strong></em></p><p>下面我们把这个模型简化，然后分析基于信用证的流控机制。</p><ul><li>rabbit_reader：Connection 的处理进程。负责接收、解析 AMQP 协议数据包，将消息发送到 Channel</li><li>rabbit_channel：Channel 的处理进程，负责处理 AMQP 协议的各种方法、进行路由解析；进行安全和协调的处理等</li><li>rabbit_amqqueue_process：Queue 的处理进程，负责将消息存入内存、将队列索引持久化</li><li>rabbit_msg_store：Store 的处理进程，负责消息的持久化</li></ul><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152216192.png" alt="Credit based flow control with classic queues、" tabindex="0" loading="lazy"><figcaption><em>Credit based flow control with classic queues、</em></figcaption></figure><p><em>Credit based flow control with classic queues、</em></p><ol><li>信用证初始化时，下游进程分别为前三个进程 reader、channel、queue 分配初始信用值<code>InitialCredit(400)</code>（图中1）</li><li>当 reader 进程开始处理一条消息，它会先将自己的信用值-1，然后将消息处理完后发给 channel 进程（图中2）</li><li>channel 进程接收 reader 发过来的消息时，会在信用证系统种进行 ack 操作。channel 进程会持续追踪它从 reader 进程 ack 了多少条消息。当累计接收并 ack 的消息数达到<code>MoreCreditAfter(200)</code> 后，会给 reader 分配新的<code>MoreCreditAfter(200)</code>信用值。（图中3）</li><li>当进程字典中的信用值降为0时，该进程会被阻塞。它不会接收消息也不会发送消息，直到获得新的信用值。</li><li>最终，TCP 读取进程被阻塞，从 socket 读取的操作被停止。</li></ol><h3 id="_3-2-如何识别性能瓶颈" tabindex="-1"><a class="header-anchor" href="#_3-2-如何识别性能瓶颈" aria-hidden="true">#</a> 3.2 如何识别性能瓶颈</h3><p>在管理 UI 中，你可能看到 Connection、Channel、Queue 处于<code>flow</code>状态，说明它们最近处于流控状态。这意味着它们暂时耗尽了信用值，等待下游进程授予更多信用。进程内流控可能在1秒钟内触发多次。</p><p>如何通过flow状态识别进程的性能瓶颈？</p><p>简单来说，一个进程的flow状态会导致它的上游进程进入flow状态。而该进程进入flow状态的原因是因为它的下游进程成为了性能瓶颈。</p><p>例如，在下图中，Queue 进程成为性能瓶颈：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152216193.png" alt="Credit exhaustion." tabindex="0" loading="lazy"><figcaption><em>Credit exhaustion.</em></figcaption></figure><p><em>Credit exhaustion.</em></p><p>上图中，Queue 处理缓慢，这就意味着 Queue 可能在较长时间内都没有授予 Channel 新的信用值。Channel 处理比 Queue 快，这样 Channel 的信用值就会先一步耗尽。</p><p>Channel 信用值耗尽后，Channel 被阻塞，不会接受消息也不会处理消息，这样 Reader 的信用值也将会耗尽。</p><p>也就是说，Queue 如果是性能瓶颈，最终会导致它的上游，即 Channel 和 Reader 处于<code>flow</code>状态。</p><hr><p>下面可以总结出判断性能瓶颈在何处的结论：</p><ul><li>当某个 Connection 处于<code>flow</code>状态，但这个 Connection 中没有一个 Channel 处于<code>flow</code>状态时，这就意味这个 Connection 中有一个或者多个 Channel 出现了性能瓶颈。某些 Channel 进程的运作(比如处理路由逻辑)会使得服务器 CPU 的负载过高从而导致了此种情形。尤其是在发送<strong>大量较小的非持久化消息</strong>时，此种情形最易显现。</li><li>当某个 Connection 处于<code>flow</code>状态 ，并且这个 Connection 中也有若干个 Channel 处于<code>flow</code>状态，但没有任何一个对应的队列处于<code>flow</code>状态时，这就意味着有一个或者多个队列出现了性能瓶颈。这可能是由于将消息存入队列的过程中引起服务器 CPU 负载过高，或者是将队列中的消息存入磁盘的过程中引起服务器 I/O 负载过高而引起的此种情形。尤其是在发送<strong>大量较小的持久化消息</strong>时，此种情形最易显现。</li><li>当某个 Connection 处于<code>flow</code>状态，同时这个 Connection 中也有若干个 Channel 处于<code>flow</code>状态，井且也有若干个对应的队列处于<code>flow</code>状态时，这就意味着在消息持久化时出现了性能瓶颈。在将队列中的消息存入磁盘的过程中引起服务器 I/O 负载过高而引起的此种情形。尤其是在<strong>发送大量较大的持久化消息</strong>时，此种情形最易显现。</li></ul><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><p>在 Erlang 中，每个进程都保存为一个<code>.erl</code>文件。这里的进程与操作系统的进程不同，是一个由 Erlang 系统管理的轻量级进程。而信用证流控的逻辑都位于<code>credit_flow.erl</code>文件中。</p><p>下面我们以<code>rabbit_reader</code>（Connection 进程）和<code>rabbit_channel</code>进程为例，看一下源码中如何处理信用的流动和消息的阻塞。</p><h3 id="_4-1-处理消息-减少信用" tabindex="-1"><a class="header-anchor" href="#_4-1-处理消息-减少信用" aria-hidden="true">#</a> 4.1 处理消息，减少信用</h3><p>当<code>rabbit_reader</code>处理一个有内容的命令（比如<code>basic.publish</code>)，会执行如下加粗逻辑</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% rabbit_reader.erl</span>
<span class="token function">process_frame</span><span class="token punctuation">(</span><span class="token variable">Frame</span><span class="token punctuation">,</span> <span class="token variable">Channel</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">ChKey</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">channel</span><span class="token punctuation">,</span> <span class="token variable">Channel</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">ChKey</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
              <span class="token atom">undefined</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">create_channel</span><span class="token punctuation">(</span><span class="token variable">Channel</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token variable">Other</span>     <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">Other</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">}</span>
          <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
        <span class="token punctuation">{</span><span class="token atom">error</span><span class="token punctuation">,</span> <span class="token variable">Error</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
            <span class="token function">handle_exception</span><span class="token punctuation">(</span><span class="token variable">State</span><span class="token punctuation">,</span> <span class="token variable">Channel</span><span class="token punctuation">,</span> <span class="token variable">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">AState</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">State1</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
            <span class="token keyword">case</span> <span class="token atom">rabbit_command_assembler</span><span class="token punctuation">:</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token variable">Frame</span><span class="token punctuation">,</span> <span class="token variable">AState</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
                <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">NewAState</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
                    <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">ChKey</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">NewAState</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token function">post_process_frame</span><span class="token punctuation">(</span><span class="token variable">Frame</span><span class="token punctuation">,</span> <span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">State1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">Method</span><span class="token punctuation">,</span> <span class="token variable">NewAState</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
                    <span class="token atom">rabbit_channel</span><span class="token punctuation">:</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">Method</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">ChKey</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">NewAState</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token function">post_process_frame</span><span class="token punctuation">(</span><span class="token variable">Frame</span><span class="token punctuation">,</span> <span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">State1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">{</span><span class="token atom">ok</span><span class="token punctuation">,</span> <span class="token variable">Method</span><span class="token punctuation">,</span> <span class="token variable">Content</span><span class="token punctuation">,</span> <span class="token variable">NewAState</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
                    <span class="token atom">rabbit_channel</span><span class="token punctuation">:</span><span class="token function">do_flow</span><span class="token punctuation">(</span><span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">Method</span><span class="token punctuation">,</span> <span class="token variable">Content</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">ChKey</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token variable">NewAState</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token function">post_process_frame</span><span class="token punctuation">(</span><span class="token variable">Frame</span><span class="token punctuation">,</span> <span class="token variable">ChPid</span><span class="token punctuation">,</span> <span class="token function">control_throttle</span><span class="token punctuation">(</span><span class="token variable">State1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
                <span class="token punctuation">{</span><span class="token atom">error</span><span class="token punctuation">,</span> <span class="token variable">Reason</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
                    <span class="token function">handle_exception</span><span class="token punctuation">(</span><span class="token variable">State1</span><span class="token punctuation">,</span> <span class="token variable">Channel</span><span class="token punctuation">,</span> <span class="token variable">Reason</span><span class="token punctuation">)</span>
            <span class="token keyword">end</span>
    <span class="token keyword">end</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到会先执行<code>rabbit_channel:doflow/3</code>，再看一下这个方法</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% rabbit_channel_common.erl</span>
<span class="token function">do_flow</span><span class="token punctuation">(</span><span class="token variable">Pid</span><span class="token punctuation">,</span> <span class="token variable">Method</span><span class="token punctuation">,</span> <span class="token variable">Content</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment">%% Here we are tracking messages sent by the rabbit_reader</span>
    <span class="token comment">%% process. We are accessing the rabbit_reader process dictionary.</span>
    <span class="token atom">credit_flow</span><span class="token punctuation">:</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">Pid</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token atom">gen_server2</span><span class="token punctuation">:</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token variable">Pid</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token atom">method</span><span class="token punctuation">,</span> <span class="token variable">Method</span><span class="token punctuation">,</span> <span class="token variable">Content</span><span class="token punctuation">,</span> <span class="token atom">flow</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在<code>rabbit_channel</code>中会调用<code>credit_flow:send/1</code>方法。这里的<code>Pid</code>是 Channel 的进程号。</p><p>这里的逻辑是：<code>rabbit_reader</code>通过<code>credit_flow</code>模块来追踪它已经向<code>rabbit_channel</code>进程发送的消息数，每发一条消息就会将自己的信用值减一。被追踪的信息保存在<code>rabbit_reader</code>的进程字典中。</p><p>注意，尽管这里是在<code>rabbit_channel</code>模块中调用<code>credit_flow:send/1</code>方法，但是此处仍处于<code>rabbit_reader</code>进程中，只有在执行完<code>gen_server2:cast/2</code>方法后才会进入到<code>rabbit_channel</code>进程的内存空间。因此，当<code>credit_flow:send/1</code>方法被调用时，信用值减一的操作仍然在<code>rabbit_reader</code>进程中被追踪。</p><p>见下面<code>credit_flow:send/2</code>和<code>credit_flow:UPDATE</code>的定义，通过调用<code>get/1</code>和<code>put/2</code>方法获取并更新进程字典的值。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">From</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">InitialCredit</span><span class="token punctuation">,</span> <span class="token variable">_MoreCreditAfter</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">?UPDATE</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">credit_from</span><span class="token punctuation">,</span> <span class="token variable">From</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">InitialCredit</span><span class="token punctuation">,</span> <span class="token variable">C</span><span class="token punctuation">,</span>
            <span class="token keyword">if</span> <span class="token variable">C</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token variable">From</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token number">0</span><span class="token punctuation">;</span>
               <span class="token boolean">true</span>   <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">C</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token comment">%% process dict update macro - eliminates the performance-hurting</span>
<span class="token comment">%% closure creation a HOF would introduce</span>
<span class="token operator">-</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token variable">UPDATE</span><span class="token punctuation">(</span><span class="token variable">Key</span><span class="token punctuation">,</span> <span class="token variable">Default</span><span class="token punctuation">,</span> <span class="token variable">Var</span><span class="token punctuation">,</span> <span class="token variable">Expr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">begin</span>
            <span class="token comment">%% We deliberately allow Var to escape from the case here</span>
            <span class="token comment">%% to be used in Expr. Any temporary var we introduced</span>
            <span class="token comment">%% would also escape, and might conflict.</span>
            <span class="token variable">Var</span> <span class="token operator">=</span> <span class="token keyword">case</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">Key</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
                <span class="token atom">undefined</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">Default</span><span class="token punctuation">;</span>
                <span class="token variable">V</span>         <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">V</span>
            <span class="token keyword">end</span><span class="token punctuation">,</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">Key</span><span class="token punctuation">,</span> <span class="token variable">Expr</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一下进程字典中关于信用证的信息</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202203152216194.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>用来保存信用值信息的 key 是<code>{credit_from, From}</code>，<code>From</code>表示消息接受者的进程号（这里是<code>rabbit_channel</code>）。当这个 key 对应的值达到 <strong>0</strong>，拥有该进程字典的进程会被阻塞（调用<code>credit_flow:block/1</code>）方法</p><h3 id="_4-2-进程阻塞-停止接收信息" tabindex="-1"><a class="header-anchor" href="#_4-2-进程阻塞-停止接收信息" aria-hidden="true">#</a> 4.2 进程阻塞，停止接收信息</h3><p>上面说到，当进程字典中的信用值达到 <strong>0</strong> 时，会调用<code>credit_flow:block/1</code>方法，我们来看看这个方法中做了什么。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token function">block</span><span class="token punctuation">(</span><span class="token variable">From</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">?TRACE_BLOCKED</span><span class="token punctuation">(</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">From</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">case</span> <span class="token function">blocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
        <span class="token boolean">false</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token atom">credit_blocked_at</span><span class="token punctuation">,</span> <span class="token atom">erlang</span><span class="token punctuation">:</span><span class="token function">monotonic_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token boolean">true</span>  <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">ok</span>
    <span class="token keyword">end</span><span class="token punctuation">,</span>
    <span class="token variable">?UPDATE</span><span class="token punctuation">(</span><span class="token atom">credit_blocked</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">Blocks</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">From</span> <span class="token punctuation">|</span> <span class="token variable">Blocks</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里更新了进程字典中<code>credit_blocked</code>的值，将阻塞这个进程的下游进程ID（这里是<code>rabbit_channel</code>）加入到<code>credit_blocked</code>中。</p><p>注意，因为<code>rabbit_reader</code>可能会将消息发送给多个进程，所以它也可能被多个进程阻塞。因此<code>credit_blocked</code>的值是一个进程ID列表。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token atom">credit_blocked</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token function">pid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>那么进程阻塞之后，如何停止信息接收？我们来分析一下<code>rabbit_reader</code>接收消息的入口，<code>recvloop</code>方法。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% rabbit_reader.erl</span>
<span class="token function">recvloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">v1</span><span class="token punctuation">{</span><span class="token atom">pending_recv</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">mainloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">recvloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">v1</span><span class="token punctuation">{</span><span class="token atom">connection_state</span> <span class="token operator">=</span> <span class="token atom">blocked</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">mainloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">recvloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">v1</span><span class="token punctuation">{</span><span class="token atom">connection_state</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">become</span><span class="token punctuation">,</span> <span class="token variable">F</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token function">throw</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">become</span><span class="token punctuation">,</span> <span class="token variable">F</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">recvloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span> <span class="token variable">State</span> <span class="token operator">=</span> <span class="token punctuation">#</span><span class="token atom">v1</span><span class="token punctuation">{</span><span class="token atom">sock</span> <span class="token operator">=</span> <span class="token variable">Sock</span><span class="token punctuation">,</span> <span class="token atom">recv_len</span> <span class="token operator">=</span> <span class="token variable">RecvLen</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">when</span> <span class="token variable">BufLen</span> <span class="token operator">&lt;</span> <span class="token variable">RecvLen</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token keyword">case</span> <span class="token atom">rabbit_net</span><span class="token punctuation">:</span><span class="token function">setopts</span><span class="token punctuation">(</span><span class="token variable">Sock</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token atom">active</span><span class="token punctuation">,</span> <span class="token atom">once</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
        <span class="token atom">ok</span>              <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">mainloop</span><span class="token punctuation">(</span><span class="token variable">Deb</span><span class="token punctuation">,</span> <span class="token variable">Buf</span><span class="token punctuation">,</span> <span class="token variable">BufLen</span><span class="token punctuation">,</span>
                                    <span class="token variable">State</span><span class="token punctuation">#</span><span class="token atom">v1</span><span class="token punctuation">{</span><span class="token atom">pending_recv</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span><span class="token atom">error</span><span class="token punctuation">,</span> <span class="token variable">Reason</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token variable">Reason</span><span class="token punctuation">,</span> <span class="token variable">State</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中mainloop会调用<code>recvloop</code>函数，达成无限循环的效果。</p><p><code>rabbit_reader</code>每接收一个包，就设置套接字属性为<code>{active, once}</code>，若当前连接处于blocked状态，则不设置<code>{active, once}</code>，这个接收进程就阻塞在<code>receive</code>方法上。</p><h3 id="_4-3-增加信用值" tabindex="-1"><a class="header-anchor" href="#_4-3-增加信用值" aria-hidden="true">#</a> 4.3 增加信用值</h3><p><code>rabbit_channel</code>每处理一条消息，都会向<code>rabbit_reader</code>进行一次确认（<code>credit_flow:ack</code>）。</p><p>当<code>rabbit_channel</code>累计处理的消息数达到<code>MoreCreditAfter</code>值时，会授予rabbit_reader新的<code>MoreCreditAfter</code>点信用值。</p><hr><p>我们先来看一下<code>ack</code>函数的实现</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token function">ack</span><span class="token punctuation">(</span><span class="token variable">To</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">_InitialCredit</span><span class="token punctuation">,</span> <span class="token variable">MoreCreditAfter</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">?UPDATE</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">credit_to</span><span class="token punctuation">,</span> <span class="token variable">To</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">MoreCreditAfter</span><span class="token punctuation">,</span> <span class="token variable">C</span><span class="token punctuation">,</span>
            <span class="token keyword">if</span> <span class="token variable">C</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">grant</span><span class="token punctuation">(</span><span class="token variable">To</span><span class="token punctuation">,</span> <span class="token variable">MoreCreditAfter</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token variable">MoreCreditAfter</span><span class="token punctuation">;</span>
               <span class="token boolean">true</span>   <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">C</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rabbit_channel</code>进程会记录它向特定的发送者（rabbit_reader）ack了多少条消息。在进程字典中用来保存ack消息数的 key 是<code>{credit_to, To}</code>，这里<code>To</code>是发送者（rabbit_reader）的进程号。</p><p>当<code>MoreCreditAfter</code>条消息被ack，会调用<code>grant</code>方法授予<code>rabbit_reader</code>更多的信用值。</p><hr><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token function">grant</span><span class="token punctuation">(</span><span class="token variable">To</span><span class="token punctuation">,</span> <span class="token variable">Quantity</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">Msg</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token atom">bump_credit</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">Quantity</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">case</span> <span class="token function">blocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
        <span class="token boolean">false</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">To</span> <span class="token operator">!</span> <span class="token variable">Msg</span><span class="token punctuation">;</span>
        <span class="token boolean">true</span>  <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">?UPDATE</span><span class="token punctuation">(</span><span class="token atom">credit_deferred</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">Deferred</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">To</span><span class="token punctuation">,</span> <span class="token variable">Msg</span><span class="token punctuation">}</span> <span class="token punctuation">|</span> <span class="token variable">Deferred</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>rabbit_channel</code>将会发送一条<code>{bump_credit, {self(), Quantity}}</code>的消息给<code>rabbit_reader</code>来授予信用。其中<code>self()</code>指向<code>rabbit_channel</code>。</p><hr><p>当rabbit_reader进程收到bump_credit消息后，它需要将消息传入并调用<code>credit_flow:handle_bump_msg/1</code>方法来处理新增信用值。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token function">handle_bump_msg</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">From</span><span class="token punctuation">,</span> <span class="token variable">MoreCredit</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">?UPDATE</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token atom">credit_from</span><span class="token punctuation">,</span> <span class="token variable">From</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">C</span><span class="token punctuation">,</span>
            <span class="token keyword">if</span> <span class="token variable">C</span> <span class="token operator">=</span><span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">andalso</span> <span class="token variable">C</span> <span class="token operator">+</span> <span class="token variable">MoreCredit</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">unblock</span><span class="token punctuation">(</span><span class="token variable">From</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                    <span class="token variable">C</span> <span class="token operator">+</span> <span class="token variable">MoreCredit</span><span class="token punctuation">;</span>
               <span class="token boolean">true</span>                              <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">C</span> <span class="token operator">+</span> <span class="token variable">MoreCredit</span>
            <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们访问<code>rabbit_reader</code>的进程字典，更新<code>{credit_from, From}</code>这个 key。如果信用值大于0，那么进程会解除阻塞。</p><h3 id="_4-4-进程解除阻塞" tabindex="-1"><a class="header-anchor" href="#_4-4-进程解除阻塞" aria-hidden="true">#</a> 4.4 进程解除阻塞</h3><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">% credit_flow.erl</span>
<span class="token function">unblock</span><span class="token punctuation">(</span><span class="token variable">From</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token variable">?TRACE_UNBLOCKED</span><span class="token punctuation">(</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">From</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token variable">?UPDATE</span><span class="token punctuation">(</span><span class="token atom">credit_blocked</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">Blocks</span><span class="token punctuation">,</span> <span class="token variable">Blocks</span> <span class="token operator">--</span> <span class="token punctuation">[</span><span class="token variable">From</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">case</span> <span class="token function">blocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
        <span class="token boolean">false</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">case</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token atom">credit_deferred</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
                     <span class="token atom">undefined</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">ok</span><span class="token punctuation">;</span>
                     <span class="token variable">Credits</span>   <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token variable">_</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">To</span> <span class="token operator">!</span> <span class="token variable">Msg</span> <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token punctuation">{</span><span class="token variable">To</span><span class="token punctuation">,</span> <span class="token variable">Msg</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token variable">Credits</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                  <span class="token atom">ok</span>
                 <span class="token keyword">end</span><span class="token punctuation">;</span>
        <span class="token boolean">true</span>  <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token atom">ok</span>
    <span class="token keyword">end</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用<code>credit_flow:unblock/1</code>会更新<code>credit_blocked</code>列表，将其清空。随后进程可以继续发送消息。</p><p>同时，<code>credit_flow:unblock/1</code>将负责发送在<code>credit_deferred</code>列表中保存的所有消息。</p><hr><p>当unblock/1被调用时，rabbit_channel进程的ID将从credit_blocked的列表中删除。</p><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token comment">%% We are operating on process A dictionary.</span>
<span class="token function">get</span><span class="token punctuation">(</span><span class="token atom">credit_blocked</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">B</span><span class="token punctuation">,</span> <span class="token variable">C</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
<span class="token function">unblock</span><span class="token punctuation">(</span><span class="token variable">B</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">get</span><span class="token punctuation">(</span><span class="token atom">credit_blocked</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token variable">C</span><span class="token punctuation">]</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，A 仍然被阻塞，直到 C 授予它更多信用。当 A 的阻塞解除，它将处理它的 <code>credit_deferred</code>列表，发送<code>bump_credit</code>消息给列表中的进程。</p><h2 id="_5-参考资料" tabindex="-1"><a class="header-anchor" href="#_5-参考资料" aria-hidden="true">#</a> 5. 参考资料</h2>`,123),m={href:"https://www.rabbitmq.com/flow-control.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.rabbitmq.com/posts/2014/04/finding-bottlenecks-with-rabbitmq-3-3/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.rabbitmq.com/posts/2015/10/new-credit-flow-settings-on-rabbitmq-3-5-5",target:"_blank",rel:"noopener noreferrer"},f={href:"https://alvaro-videla.com/2013/09/rabbitmq-internals-credit-flow-for-erlang-processes.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.rabbitmq.com/posts/2020/05/quorum-queues-and-flow-control-the-concepts/",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"RabbitMQ实战指南",-1),C={href:"https://wenku.baidu.com/view/f18969d684254b35eefd348b",target:"_blank",rel:"noopener noreferrer"},y=n("hr",null,null,-1),x=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),A=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function M(S,B){const p=o("ExternalLinkIcon"),e=o("router-link");return l(),i("div",null,[n("p",null,[a("原文地址："),n("a",k,[a("http://hscarb.github.io/rabbitmq/20220131-rabbitmq-flow-control.html"),s(p)])]),d,n("nav",b,[n("ul",null,[n("li",null,[s(e,{to:"#_1-概述"},{default:t(()=>[a("1. 概述")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_1-1-为什么要流控"},{default:t(()=>[a("1.1 为什么要流控？")]),_:1})]),n("li",null,[s(e,{to:"#_1-2-rabbitmq-的多种流控机制"},{default:t(()=>[a("1.2 RabbitMQ 的多种流控机制")]),_:1})])])]),n("li",null,[s(e,{to:"#_2-概要流程"},{default:t(()=>[a("2. 概要流程")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_2-1-信用证配置"},{default:t(()=>[a("2.1 信用证配置")]),_:1})]),n("li",null,[s(e,{to:"#_2-2-基于信用证的流控"},{default:t(()=>[a("2.2 基于信用证的流控")]),_:1})])])]),n("li",null,[s(e,{to:"#_3-详细流程"},{default:t(()=>[a("3. 详细流程")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_3-1-流控详细流程"},{default:t(()=>[a("3.1 流控详细流程")]),_:1})]),n("li",null,[s(e,{to:"#_3-2-如何识别性能瓶颈"},{default:t(()=>[a("3.2 如何识别性能瓶颈")]),_:1})])])]),n("li",null,[s(e,{to:"#_4-源码解析"},{default:t(()=>[a("4. 源码解析")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_4-1-处理消息-减少信用"},{default:t(()=>[a("4.1 处理消息，减少信用")]),_:1})]),n("li",null,[s(e,{to:"#_4-2-进程阻塞-停止接收信息"},{default:t(()=>[a("4.2 进程阻塞，停止接收信息")]),_:1})]),n("li",null,[s(e,{to:"#_4-3-增加信用值"},{default:t(()=>[a("4.3 增加信用值")]),_:1})]),n("li",null,[s(e,{to:"#_4-4-进程解除阻塞"},{default:t(()=>[a("4.4 进程解除阻塞")]),_:1})])])]),n("li",null,[s(e,{to:"#_5-参考资料"},{default:t(()=>[a("5. 参考资料")]),_:1})])])]),v,n("ul",null,[n("li",null,[n("a",m,[a("Flow Control"),s(p)])]),n("li",null,[n("a",h,[a("Finding bottlenecks with RabbitMQ 3.3"),s(p)])]),n("li",null,[n("a",g,[a("New Credit Flow Settings on RabbitMQ 3.5.5"),s(p)])]),n("li",null,[n("a",f,[a("RABBITMQ INTERNALS - CREDIT FLOW FOR ERLANG PROCESSES"),s(p)])]),n("li",null,[n("a",_,[a("Quorum Queues and Flow Control - The Concepts"),s(p)])]),w,n("li",null,[n("a",C,[a("RabbitMQ流量控制机制分析"),s(p)])])]),y,x,A])}const F=c(u,[["render",M],["__file","20220131-rabbitmq-flow-control.html.vue"]]);export{F as default};
